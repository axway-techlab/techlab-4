{
  "info" : {
    "description" : "API for Flow Manager",
    "version" : "2.2.0",
    "title" : "Flow Manager API v2.2",
    "contact" : {
      "name" : "Axway Support",
      "url" : "https://support.axway.com",
      "email" : "support@axway.com"
    },
    "license" : {
      "name" : "Copyright Axway 2021. All rights reserved."
    },
    "x-audience" : "external-public"
  },
  "servers" : [ {
    "url" : "https://ptx140.demo.axway.com:8081/fm/{basePath}",
    "variables" : {
      "basePath" : {
        "description" : "Base Path",
        "default" : "api"
      }
    },
    "description" : "Main server"
  } ],
  "tags" : [ {
    "name" : "applicationgroups",
    "description" : "Manage groups of applications"
  }, {
    "name" : "applications",
    "description" : "Manage applications for registered products"
  }, {
    "name" : "authentication",
    "description" : "Authentication services"
  }, {
    "name" : "certificates, keys, pgp keys"
  }, {
    "name" : "cft",
    "description" : "Manage Transfer CFT"
  }, {
    "name" : "cftplugin",
    "description" : "Manage Transfer CFT plugin Configuration"
  }, {
    "name" : "configurations",
    "description" : "Manage Flow Manager configuration"
  }, {
    "name" : "customattributedefinitions",
    "description" : "Manage custom attribute definitions"
  }, {
    "name" : "deployments",
    "description" : "View and retry deployments from your repository"
  }, {
    "name" : "distributionInformation",
    "description" : "Provides Flow Manager distribution-specific information"
  }, {
    "name" : "endpointtype",
    "description" : "Offers information about endpoint types from repository"
  }, {
    "name" : "flowpatterns",
    "description" : "Manage flow patterns from repository"
  }, {
    "name" : "flows",
    "description" : "Manage and deploy flows from your repository"
  }, {
    "name" : "flowtemplates",
    "description" : "Manage and deploy flow templates from repository"
  }, {
    "name" : "identitystores",
    "description" : "Manage identity stores"
  }, {
    "name" : "organizations",
    "description" : "Manage organizations"
  }, {
    "name" : "partners",
    "description" : "Manage external partners for flow usage"
  }, {
    "name" : "privileges",
    "description" : "Manage privileges for roles"
  }, {
    "name" : "productplugins",
    "description" : "Manage product plugins"
  }, {
    "name" : "products",
    "description" : "Manage registered products"
  }, {
    "name" : "protocols",
    "description" : "Manage protocols"
  }, {
    "name" : "resources",
    "description" : "Manage resources for privileges and roles"
  }, {
    "name" : "roles",
    "description" : "Manage roles for users"
  }, {
    "name" : "st",
    "description" : "Manage SecureTransport"
  }, {
    "name" : "subscriptions",
    "description" : "Manage subscriptions to flow templates"
  }, {
    "name" : "tags",
    "description" : "Manage tags on different objects"
  }, {
    "name" : "users",
    "description" : "Manage users"
  } ],
  "paths" : {
    "/v2/applicationgroups" : {
      "delete" : {
        "operationId" : "deleteApplicationGroups",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "query",
          "description" : "The business id of the application group to delete. Can delete\n            multiple items. If no parameter is given, all application groups\n            are removed. Use parameters to narrow the list of application\n            groups to be deleted.",
          "required" : false,
          "schema" : {
            "items" : {
              "type" : "string"
            },
            "type" : "array"
          }
        }, {
          "name" : "name",
          "in" : "query",
          "description" : "Search for application groups having this name. Enclose the search\n            value in special character % to filter items containing this\n            value. Add % after the search value to filter items starting with this value.\n            Add % before the search value to filter items ending with this value.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "_forced",
          "in" : "query",
          "description" : "True if the group used in flows is deleted and impacts are managed\n            automatically, false if the group used in flows is not deleted.\n            Default value is false.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The application groups were successfully deleted.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid arguments."
          },
          "403" : {
            "description" : "The user does no have right to deleted application groups."
          }
        },
        "summary" : "Deletes a list of application groups.",
        "description" : "<b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Application_Group</b>, action is <b>Delete</b>)",
        "tags" : [ "applicationgroups" ]
      },
      "get" : {
        "operationId" : "listApplicationGroups",
        "parameters" : [ {
          "name" : "search",
          "in" : "query",
          "description" : "Search for application groups containing this value in 'name' or in 'description.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "name",
          "in" : "query",
          "description" : "Search for application groups having this name. Enclose the search\n            value in special character % to filter items containing this\n            value. Add % after the search value to filter items starting with this value.\n            Add % before the search value to filter items ending with this value.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "productType",
          "in" : "query",
          "description" : "",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "tags",
          "in" : "query",
          "description" : "Search for application groups having this tag. Enclose the search\n            value in special character % to filter items containing this\n            value. Add % after the search value to filter items starting with this value.\n            Add % before the search value to filter items ending with this value.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Get application groups starting from the specified offset\n            in the list of records returned by the database.\n            If not set, offset defaults to 0. Legal values: 0 <= offset <= 2147483647\"",
          "required" : false,
          "schema" : {
            "format" : "int64",
            "type" : "integer"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of items returned per request.",
          "required" : false,
          "schema" : {
            "format" : "int64",
            "type" : "integer"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "Sort application groups using a specific field from result record.\n            Valid values are : name, membersCount, description.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ascending",
          "in" : "query",
          "description" : "Sort application groups in ascending order if sortingCriteria\n            is not empty and ascending is true.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "_brief",
          "in" : "query",
          "description" : "True if the result should be in brief format, false otherwise.\n            Default value is false.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The list was successfully obtained.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "items" : {
                    "$ref" : "#/components/schemas/RApplicationGroup"
                  },
                  "type" : "array"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid offset, limit or sort criteria. See swagger documentation for available options."
          }
        },
        "summary" : "Retrieves a list of application groups.",
        "description" : "<b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Application_Group</b>, action is <b>View</b>)",
        "tags" : [ "applicationgroups" ]
      },
      "post" : {
        "operationId" : "createApplicationGroup",
        "parameters" : [ {
          "name" : "_body",
          "in" : "query",
          "description" : "True if the body of the response contains the created object,\n            false otherwise. Default value is true.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "The application group was successfully created.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RApplicationGroup"
                }
              }
            }
          },
          "400" : {
            "description" : "The application group's fields are not valid."
          },
          "403" : {
            "description" : "The user does no have right to create the application\n              group."
          },
          "409" : {
            "description" : "An application group with the same name already exists."
          }
        },
        "summary" : "Creates a new application group.",
        "description" : "\n \n <p>\n The body has the same syntax as GET /applicationgroups <br>\n The name of the application group is mandatory. It should be unique, and\n should not contain the special characters * ; or , <br>\n If no parameter is given, the created application group contains no\n applications. An application group that contains applications can be created\n if the business Ids of the applications are given in the 'members' array.\n Members count is an INTEGER that specifies the number of applications in the\n group.\n </p><br><b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Application_Group</b>, action is <b>Create</b>)",
        "tags" : [ "applicationgroups" ],
        "requestBody" : {
          "description" : "The group of applications to create.",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RApplicationGroup"
              }
            }
          }
        }
      }
    },
    "/v2/applicationgroups/{businessId}" : {
      "delete" : {
        "operationId" : "deleteApplicationGroupById",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The business id of group of applications to delete.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "_forced",
          "in" : "query",
          "description" : "True if the group used in flows is deleted and impacts are managed\n            automatically, false if the group used in flows is not deleted.\n            Default value is false.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The application group was successfully deleted.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid arguments."
          },
          "403" : {
            "description" : "The user does no have right to deleted the application\n              group."
          },
          "404" : {
            "description" : "The application group does not exist."
          }
        },
        "summary" : "Deletes an application group.",
        "description" : "<b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Application_Group</b>, action is <b>Delete</b>)",
        "tags" : [ "applicationgroups" ]
      },
      "get" : {
        "operationId" : "getApplicationGroupById",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The business id of the application group.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The application groups with the give id is found and it is\n              returned in response body.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RApplicationGroup"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid businessId."
          },
          "404" : {
            "description" : "The application group does not exist."
          }
        },
        "summary" : "Retrieves a given application group.",
        "description" : "<b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Application_Group</b>, action is <b>View</b>)",
        "tags" : [ "applicationgroups" ]
      },
      "head" : {
        "operationId" : "checkApplicationGroupById",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The application group's business id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The application group with given id exists.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          },
          "404" : {
            "description" : "The application group with given id doesn't exist."
          }
        },
        "summary" : "Checks if the given application group exists.",
        "description" : "<b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Application_Group</b>, action is <b>View</b>)",
        "tags" : [ "applicationgroups" ]
      },
      "put" : {
        "operationId" : "updateApplicationGroupById",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The business id of group of applications to update.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "_body",
          "in" : "query",
          "description" : "True if the body of the response contains the created object,\n            false otherwise. Default value is true.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "_forced",
          "in" : "query",
          "description" : "True if the group used in flows is updated and impacts are managed\n            automatically, false if the group used in flows is not updated.\n            Default value is false.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The application group was successfully updated.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RApplicationGroup"
                }
              }
            }
          },
          "400" : {
            "description" : "The application group's fields are not valid."
          },
          "403" : {
            "description" : "The user does no have right to update the application\n              group."
          }
        },
        "summary" : "Updates an application group.",
        "description" : "\n \n <p>\n Because PUT requests are idempotent, you must send all available\n properties/values, not only the ones to modify. A best practice is to query\n for an application group, modify as needed, and resend the entire application\n group.\n </p><br><b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Application_Group</b>, action is <b>Modify</b>)",
        "tags" : [ "applicationgroups" ],
        "requestBody" : {
          "description" : "The group of applications to update.",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RApplicationGroup"
              }
            }
          }
        }
      }
    },
    "/v2/applicationgroups/{businessId}/applications" : {
      "get" : {
        "operationId" : "getApplications",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The business id of the application group.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "items" : {
                    "$ref" : "#/components/schemas/RApplication"
                  },
                  "type" : "array"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid argument."
          },
          "404" : {
            "description" : "The application group does not exist."
          }
        },
        "summary" : "Retrieves all applications from the given application group.",
        "description" : "<b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Application_Group</b>, action is <b>View</b>)",
        "tags" : [ "applicationgroups" ]
      }
    },
    "/v2/applicationgroups/{businessId}/applications/{applicationId}" : {
      "delete" : {
        "operationId" : "removeApplicationFromGroupById",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The business id of the application group.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "applicationId",
          "in" : "path",
          "description" : "The business id of the application.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "_forced",
          "in" : "query",
          "description" : "True if the group used in flows is updated and impacts are managed\n            automatically, false if the group used in flows is not updated.\n            Default value is false.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid arguments."
          },
          "404" : {
            "description" : "The application group or the application does not exist or\n              the application group does not contain the application."
          },
          "412" : {
            "description" : "Precondition failed."
          }
        },
        "summary" : "Remove the application from the given application group.",
        "description" : "<b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Application_Group</b>, action is <b>Modify</b>)",
        "tags" : [ "applicationgroups" ]
      },
      "head" : {
        "operationId" : "checkApplicationIsInGroupById",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The business id of the application group.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "applicationId",
          "in" : "path",
          "description" : "The business id of the application.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid arguments."
          },
          "404" : {
            "description" : "The application group or the application does not exist or\n              the application group does not contain the application."
          }
        },
        "summary" : "Check if the application belongs to the given application group.",
        "description" : "<b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Application_Group</b>, action is <b>View</b>)",
        "tags" : [ "applicationgroups" ]
      },
      "post" : {
        "operationId" : "addApplicationToGroupById",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The business id of the application group.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "applicationId",
          "in" : "path",
          "description" : "The business id of the application.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "_forced",
          "in" : "query",
          "description" : "True if the group used in flows is updated and impacts are managed\n            automatically, false if the group used in flows is not updated.\n            Default value is false.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid argument."
          },
          "404" : {
            "description" : "The application group or the application does not exist."
          },
          "412" : {
            "description" : "Precondition failed."
          },
          "500" : {
            "description" : "Internal server error."
          }
        },
        "summary" : "Add the application to the given application group.",
        "description" : "<b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Application_Group</b>, action is <b>Modify</b>)",
        "tags" : [ "applicationgroups" ]
      }
    },
    "/v2/applications" : {
      "delete" : {
        "operationId" : "deleteApplicationsByFilter",
        "parameters" : [ {
          "name" : "name",
          "in" : "query",
          "description" : "Search for applications having this name. Enclose the search value\n            in special character % to filter items containing this value.\n            Add % after the search value to filter items starting with this value.\n            Add % before the search value to filter items ending with this value.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "host",
          "in" : "query",
          "description" : "Search for applications having this host. Enclose the search value\n            in special character % to filter items containing this value.\n            Add % after the search value to filter items starting with this value.\n            Add % before the search value to filter items ending with this value.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "businessId",
          "in" : "query",
          "description" : "The business id of the application to delete. Can delete multiple\n            items. If no parameter is given, all applications are removed. Use\n            parameters to narrow the list of applications to be deleted.",
          "required" : false,
          "schema" : {
            "items" : {
              "type" : "string"
            },
            "type" : "array"
          }
        }, {
          "name" : "_forced",
          "in" : "query",
          "description" : "To force deleting the application and apply the impacts on flows.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Applications are successfully deleted.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          },
          "400" : {
            "description" : "Criteria missing from request. Set _forced to 'true' to delete\n \t\t\t\tall applications."
          },
          "412" : {
            "description" : "Deleting the application has an impact on flows. To perform\n              the operation regardless of its impact, set the _forced\n              parameter to true."
          }
        },
        "summary" : "Deletes a list of applications.",
        "description" : "<b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Application</b>, action is <b>Delete</b>)<br>Access enforcement <b>always performed</b> (resource is <b>Application_Group</b>, action is <b>Modify</b>)<br>",
        "tags" : [ "applications" ]
      },
      "get" : {
        "operationId" : "listApplications",
        "parameters" : [ {
          "name" : "search",
          "in" : "query",
          "description" : "Search for applications containing this value in 'name', 'description',\n            'host', 'contacts.fullName', 'contacts.jobTitle', 'contacts.phone',\n            'contacts.mail' or in 'tags'.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "name",
          "in" : "query",
          "description" : "Search for applications having this name. Enclose the search value\n            in special character % to filter items containing this value.\n            Add % after the search value to filter items starting with this value.\n            Add % before the search value to filter items ending with this value.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "host",
          "in" : "query",
          "description" : "Search for applications having this host. Enclose the search value\n            in special character % to filter items containing this value.\n            Add % after the search value to filter items starting with this value.\n            Add % before the search value to filter items ending with this value.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "tags",
          "in" : "query",
          "description" : "Search for applications having this tag. Enclose the search value\n            in special character % to filter items containing this value.\n            Add % after the search value to filter items starting with this value.\n            Add % before the search value to filter items ending with this value.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "customAttributeFilter",
          "in" : "query",
          "description" : "Search for applications having this custom attribute filter.\n            Sample filter: customAttrName1=value1&customAttrName2=value2",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Get applications starting from the specified offset\n            in the list of records returned by the database.\n            If not set, offset defaults to 0.\n            Legal values: 0 <= offset <= 2147483647",
          "required" : false,
          "schema" : {
            "format" : "int64",
            "type" : "integer"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of items returned per request.",
          "required" : false,
          "schema" : {
            "format" : "int64",
            "type" : "integer"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "Sort applications using a specific field from result record.\n            Valid values are : name, host, description, contactFirstName,\n            contactLastName, contactJobTitle, contactEmail, contactPhone.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ascending",
          "in" : "query",
          "description" : "Sort applications in ascending order if sortingCriteria\n            is not empty and ascending is true.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "_brief",
          "in" : "query",
          "description" : "Flag indicating that all the properties of the application must be\n            returned or just selected properties. Default value is\n            <code>false</code> meaning that all properties are returned.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Body contains the list of filtered applications.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "items" : {
                    "$ref" : "#/components/schemas/RApplication"
                  },
                  "type" : "array"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid offset, custom attribute filter, limit or sort criteria. See swagger documentation for available options."
          }
        },
        "summary" : "Retrieves a list of applications.",
        "description" : "<b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Application</b>, action is <b>View</b>)<br>Access enforcement <b>always performed</b> (resource is <b>Application_Group</b>, action is <b>View</b>)<br>",
        "tags" : [ "applications" ]
      },
      "post" : {
        "operationId" : "createApplication",
        "parameters" : [ {
          "name" : "_body",
          "in" : "query",
          "description" : "Controls if the body of the created object is returned in the\n            response. Default value is <code>true</code>.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "_forced",
          "in" : "query",
          "description" : "To force creating the application with existing groups and apply\n            the impacts on flows. Default value is <code>false</code>.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "The application was successfully created.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RApplication"
                }
              }
            }
          },
          "400" : {
            "description" : "The application fields are not valid."
          },
          "403" : {
            "description" : "The user does no have right to create application\n              (Resource=Application, Action=Create;Resource=Application_Group,\n              Action=Create)."
          },
          "409" : {
            "description" : "A application with the same name and host already exists."
          },
          "500" : {
            "description" : "Internal server error."
          }
        },
        "summary" : "Creates a new application.",
        "description" : "\n \n <p>\n The body has the same syntax as GET/applications. <br>\n The name and the host of the application are mandatory. <br>\n The name cannot contain the special characters * ; , or ' <br>\n The host can contain only alphanumerical characters and may include the\n characters . : - _ <br>\n If no parameter is given, the created application is not linked to products.\n You can create an application that is linked to products if the product's\n business Ids are given. <br>\n An application can be linked to an application group at creation if the name\n of the group is given in the groups section. If the group does not exist, it\n is created as well. <br>\n Several products and groups can be specified. <br>\n An application is identified by its name and host. You can create two\n applications with the same name if their host differs.\n </p><br><b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Application</b>, action is <b>Create</b>)<br>Access enforcement <b>always performed</b> (resource is <b>Application_Group</b>, action is <b>Create</b>)<br>Access enforcement <b>always performed</b> (resource is <b>Application_Group</b>, action is <b>Modify</b>)<br>",
        "tags" : [ "applications" ],
        "requestBody" : {
          "description" : "The application to create.",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RApplication"
              }
            }
          }
        }
      }
    },
    "/v2/applications/{businessId}" : {
      "delete" : {
        "operationId" : "deleteApplicationById",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The applications business id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "_forced",
          "in" : "query",
          "description" : "To force deleting the application and apply the impacts on flows.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The application was deleted.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid argument."
          },
          "403" : {
            "description" : "The user does no have right to delete the application."
          },
          "404" : {
            "description" : "Application with the given businessId doesn't exist."
          },
          "412" : {
            "description" : "If deleting the application has an impact on flows. To\n              perform the operation regardless of its impact, set the _forced\n              parameter to true."
          }
        },
        "summary" : "Deletes an application.",
        "description" : "<b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Application</b>, action is <b>Delete</b>)<br>Access enforcement <b>always performed</b> (resource is <b>Application_Group</b>, action is <b>Modify</b>)<br>",
        "tags" : [ "applications" ]
      },
      "get" : {
        "operationId" : "getApplicationById",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The application's business id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The application with given id is found and it is returned\n              in response body.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RApplication"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid arguments."
          },
          "404" : {
            "description" : "The application with given id doesn't exist or the user has\n              no rights to retrieve it due to FGAC settings."
          }
        },
        "summary" : "Retrieves a given application.",
        "description" : "<b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Application</b>, action is <b>View</b>)<br>Access enforcement <b>always performed</b> (resource is <b>Application_Group</b>, action is <b>View</b>)<br>",
        "tags" : [ "applications" ]
      },
      "head" : {
        "operationId" : "checkApplicationExistsById",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The application's business id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The application with given id exists.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          },
          "404" : {
            "description" : "The application with given id doesn't exist."
          }
        },
        "summary" : "Checks if the given application exists.",
        "description" : "<b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Application</b>, action is <b>View</b>)<br>Access enforcement <b>always performed</b> (resource is <b>Application_Group</b>, action is <b>View</b>)<br>",
        "tags" : [ "applications" ]
      },
      "put" : {
        "operationId" : "updateApplicationById",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The business id of the application to update.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "_body",
          "in" : "query",
          "description" : "Controls if the body of the created object is returned in the\n            response. Default value is <code>true</code>.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "_forced",
          "in" : "query",
          "description" : "To force updating the application and apply the impacts on flows.\n            Default value is <code>false</code>.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The application is successfully updated.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RApplication"
                }
              }
            }
          },
          "400" : {
            "description" : "The application fields are not valid."
          },
          "403" : {
            "description" : "The user does no have right to update application."
          },
          "404" : {
            "description" : "The application with the given businessId doesn't exist."
          },
          "412" : {
            "description" : "If updating the application has an impact on flows. If the\n              action requires confirmation, add '_forced' set to true as a\n              query parameter to perform it."
          },
          "500" : {
            "description" : "Internal server error."
          }
        },
        "summary" : "Updates an application.",
        "description" : "\n \n <p>\n PUT is idempotent so PUT requests you MUST send all the available\n properties/values , not just the ones you want to change. <br>\n It is a good practice to query for a application, modify what needed and then\n resend the whole application.\n </p><br><b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Application</b>, action is <b>Modify</b>)<br>Access enforcement <b>always performed</b> (resource is <b>Application_Group</b>, action is <b>Create</b>)<br>Access enforcement <b>always performed</b> (resource is <b>Application_Group</b>, action is <b>Modify</b>)<br>",
        "tags" : [ "applications" ],
        "requestBody" : {
          "description" : "The application to update.",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RApplication"
              }
            }
          }
        }
      }
    },
    "/v2/applications/{businessId}/applicationgroups" : {
      "get" : {
        "operationId" : "getApplicationsGroups",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The business id of the application.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "_brief",
          "in" : "query",
          "description" : "Flag indicating that defining properties of the application group\n            are returned or all the properties.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "items" : {
                    "$ref" : "#/components/schemas/RApplicationGroup"
                  },
                  "type" : "array"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid businessId."
          },
          "404" : {
            "description" : "The application does not exist."
          }
        },
        "summary" : "Retrieves an application group to which the given application belongs.",
        "description" : "<b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Application</b>, action is <b>View</b>)<br>Access enforcement <b>always performed</b> (resource is <b>Application_Group</b>, action is <b>View</b>)<br>",
        "tags" : [ "applications" ]
      }
    },
    "/v2/applications/{businessId}/applicationgroups/{groupBusinessId}" : {
      "delete" : {
        "operationId" : "removeApplicationsGroupById",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The business id of the application.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "groupBusinessId",
          "in" : "path",
          "description" : "The business id of the application group.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "_body",
          "in" : "query",
          "description" : "Controls if the body of the created object is returned in the\n            response. Default value is <code>false</code>.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "_forced",
          "in" : "query",
          "description" : "True if the group used in flows is updated and impacts are managed\n            automatically, false if the group used in flows is not updated.\n            Default value is false.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid arguments."
          },
          "403" : {
            "description" : "The user does no have right to update the application or\n              the application group."
          },
          "404" : {
            "description" : "The application does not exist. The application group does\n              not exist."
          },
          "412" : {
            "description" : "The update of the application has an impact on flows. To\n              perform the operation regardless of its impact, set the _forced\n              parameter to true."
          },
          "500" : {
            "description" : "Internal server error"
          }
        },
        "summary" : "Removes the given application from an application group.",
        "description" : "\n\n <p>\n Removes the group from the application if _forced=true. Flows are impacted\n when the application is used in flows, or when the application is part of a\n group used in flows\n </p><br><b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Application</b>, action is <b>Modify</b>)<br>Access enforcement <b>always performed</b> (resource is <b>Application_Group</b>, action is <b>Modify</b>)<br>",
        "tags" : [ "applications" ]
      },
      "head" : {
        "operationId" : "checkApplicationInGroupByGroupId",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The business id of the application.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "groupBusinessId",
          "in" : "path",
          "description" : "The business id of the application group.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid arguments."
          },
          "404" : {
            "description" : "The application does not exist. The application group does\n              not exist. The application does not belong to given application\n              group."
          }
        },
        "summary" : "Checks if the given application belongs to the application group.",
        "description" : "<b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Application</b>, action is <b>View</b>)<br>Access enforcement <b>always performed</b> (resource is <b>Application_Group</b>, action is <b>View</b>)<br>",
        "tags" : [ "applications" ]
      },
      "post" : {
        "operationId" : "addApplicationToGroupByGroupId",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The business id of the application.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "groupBusinessId",
          "in" : "path",
          "description" : "The business id of the application group.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "_body",
          "in" : "query",
          "description" : "Controls if the body of the created object is returned in the\n            response. Default value is <code>false</code>.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "_forced",
          "in" : "query",
          "description" : "True if the group used in flows is updated and impacts are managed\n            automatically, false if the group used in flows is not updated.\n            Default value is false.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          },
          "400" : {
            "description" : "Couldn't serialize payload."
          },
          "403" : {
            "description" : "The user does no have right to update the application or\n              the application group."
          },
          "404" : {
            "description" : "The application does not exist. The application group does\n              not exist."
          },
          "412" : {
            "description" : "The update of the application has an impact on flows. To\n              perform the operation regardless of its impact, set the _forced\n              parameter to true."
          },
          "500" : {
            "description" : "Internal server error."
          }
        },
        "summary" : "Adds the given application to the application group.",
        "description" : "<b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Application</b>, action is <b>Modify</b>)<br>Access enforcement <b>always performed</b> (resource is <b>Application_Group</b>, action is <b>Modify</b>)<br>",
        "tags" : [ "applications" ]
      }
    },
    "/v2/applications/{businessId}/pgpkeys" : {
      "delete" : {
        "operationId" : "deletePgpKeyForApplication",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The business id of the application.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "name",
          "in" : "query",
          "description" : "The PGP key name. Two PGP keys cannot have the same name.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "businessId",
          "in" : "query",
          "description" : "The business id of the pgp keys to delete. Can delete multiple items.",
          "required" : false,
          "schema" : {
            "items" : {
              "type" : "string"
            },
            "type" : "array"
          }
        }, {
          "name" : "_forced",
          "in" : "query",
          "description" : "To force deleting the pgp key and apply the impacts.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The application exists and PGP key is removed"
          },
          "400" : {
            "description" : "Invalid arguments."
          },
          "404" : {
            "description" : "The application does not exist or the PGP key with the given name does not exist on application."
          },
          "412" : {
            "description" : "Precondition failed."
          }
        },
        "summary" : "Remove a PGP key by name for a given application.",
        "description" : "<b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Application</b>, action is <b>Modify</b>)",
        "tags" : [ "applications" ]
      },
      "get" : {
        "operationId" : "getPgpKeysForApplication",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The business id of the application.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "name",
          "in" : "query",
          "description" : "Search for the PGP key having this name. Two PGP keys cannot have the same name.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The application exists and the list of PGP keys will be returned.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "items" : {
                    "$ref" : "#/components/schemas/RPgpKeyCredential"
                  },
                  "type" : "array"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid arguments."
          },
          "404" : {
            "description" : "The application does not exist."
          }
        },
        "summary" : "Retrieves a list of PGP keys for a given application.",
        "description" : "<b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Application</b>, action is <b>View</b>)",
        "tags" : [ "applications" ]
      },
      "post" : {
        "operationId" : "createPgpKeyForApplication",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The id of the application that will contain the PGP Key.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "_body",
          "in" : "query",
          "description" : "Controls if the body of the created object is returned in the response. Default value is <code>true</code>.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "The PGP Key was successfully created.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RPgpKeyCredential"
                }
              }
            }
          },
          "400" : {
            "description" : "The PGP Key fields are not valid."
          },
          "403" : {
            "description" : "The user does no have right to create the pgpKey"
          },
          "404" : {
            "description" : "The application identified by appID does not exist."
          },
          "500" : {
            "description" : "Internal server error."
          }
        },
        "summary" : "Creates a new PGP Key for a application.",
        "description" : "<b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Application</b>, action is <b>Modify</b>)",
        "tags" : [ "applications" ],
        "requestBody" : {
          "description" : "The PGP Key to create.",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RPgpKeyCredential"
              }
            }
          }
        }
      }
    },
    "/v2/applications/{businessId}/pgpkeys/{keyId}" : {
      "delete" : {
        "operationId" : "deletePgpKeyForApplicationById",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The business id of the application.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "keyId",
          "in" : "path",
          "description" : "The key id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "_forced",
          "in" : "query",
          "description" : "To force deleting the pgp key and apply the impacts.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The application exists and PGP key is removed"
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "404" : {
            "description" : "The application does not exist or the PGP key with the given name does not exist on application."
          }
        },
        "summary" : "Remove a PGP key by id for a given application.",
        "description" : "<b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Application</b>, action is <b>Modify</b>)",
        "tags" : [ "applications" ]
      },
      "get" : {
        "operationId" : "getPgpKeyForApplicationById",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The business id of the application.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "keyId",
          "in" : "path",
          "description" : "The key id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "X-EncryptionKey",
          "in" : "header",
          "description" : "encryption key used for private key in base64 format",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The application and the certificate exist.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RPgpKeyCredential"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid argument."
          },
          "404" : {
            "description" : "The application does not exist or the key with the given id does not exists."
          }
        },
        "summary" : "Retrieves the PGP key with given id for a given application.",
        "description" : "\n In order to retrieve the private key, you need to put the encryption key encoded in base64 in the header X-EncryptionKey<br><b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Application</b>, action is <b>View</b>)",
        "tags" : [ "applications" ]
      },
      "put" : {
        "operationId" : "updatePgpKeyForApplicationById",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The id of the application that contains the PGP key.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "keyId",
          "in" : "path",
          "description" : "The key id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "_forced",
          "in" : "query",
          "description" : "To force updating the application key and apply the impacts on flows.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "_body",
          "in" : "query",
          "description" : "Controls if the body of the created object is returned in the response. Default value is <code>true</code>.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The key was successfully updated.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RPgpKeyCredential"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "403" : {
            "description" : "The user does no have right to update the key"
          },
          "404" : {
            "description" : "The application identified by appID does not exist or the key identified by keyId does not exists."
          },
          "412" : {
            "description" : "The update of the application key has an impact on flows.\n To perform the operation regardless of its impact, set the _forced parameter to true."
          },
          "500" : {
            "description" : "Internal server error."
          }
        },
        "summary" : "Updates an existing PGP key for a application.",
        "description" : "<b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Application</b>, action is <b>Modify</b>)",
        "tags" : [ "applications" ],
        "requestBody" : {
          "description" : "The PGP key to be updated.",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RPgpKeyCredential"
              }
            }
          }
        }
      }
    },
    "/v2/applications/{businessId}/products" : {
      "get" : {
        "operationId" : "getApplicationProducts",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The business id of the application.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "Search for products having this type. Some possible values are: Transfer CFT, SecureTransport",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "_brief",
          "in" : "query",
          "description" : "Flag indicating that defining properties of the product are returned or\n \t\t\tall the properties.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "items" : {
                    "$ref" : "#/components/schemas/RProduct"
                  },
                  "type" : "array"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid arguments."
          },
          "404" : {
            "description" : "The application does not exist."
          }
        },
        "summary" : "Retrieves the products linked to the given application.",
        "description" : "<b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Application</b>, action is <b>View</b>)<br>Access enforcement <b>always performed</b> (resource is <b>Product</b>, action is <b>View</b>)<br>",
        "tags" : [ "applications" ]
      }
    },
    "/v2/applications/{businessId}/products/{productBusinessId}" : {
      "delete" : {
        "operationId" : "unlinkProductById",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The business id of the application.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "productBusinessId",
          "in" : "path",
          "description" : "The business id of the product.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "_body",
          "in" : "query",
          "description" : "Controls if the body of the created object is returned in the response. Default value is <code>false</code>.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "_forced",
          "in" : "query",
          "description" : "True if the application used in flows is updated and impacts are managed automatically, false if the application used in flows is not updated. Default value is false.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "ok",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid arguments."
          },
          "403" : {
            "description" : "the user does no have right to update the application"
          },
          "404" : {
            "description" : "The application does not exist. The product does not exist."
          },
          "412" : {
            "description" : "The update of the application has an impact on flows. To perform the operation regardless of its impact, set the _forced parameter to true."
          },
          "500" : {
            "description" : "internal server error"
          }
        },
        "summary" : "Unlinks a product from the given application.",
        "description" : "\n\n <p>\n  Removes the group from the application if _forced=true.\n  The flows are impacted when the application is used in flows or when application is part of a group used in flows. \n </p><br><b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Application</b>, action is <b>Modify</b>)<br>",
        "tags" : [ "applications" ]
      },
      "head" : {
        "operationId" : "checkApplicationProductById",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The business id of the application.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "productBusinessId",
          "in" : "path",
          "description" : "The business id of the product (middleware).",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid arguments."
          },
          "404" : {
            "description" : "The application does not exist. The product does not exist. The application is not linked to given product."
          }
        },
        "summary" : "Checks if the product is linked to the given application.",
        "description" : "<b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Application</b>, action is <b>View</b>)",
        "tags" : [ "applications" ]
      },
      "post" : {
        "operationId" : "linkProductById",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The business id of the application.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "productBusinessId",
          "in" : "path",
          "description" : "The business id of the product.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "_body",
          "in" : "query",
          "description" : "controls if the body of the created object is returned in the response. Default value is <code>false</code>.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "_forced",
          "in" : "query",
          "description" : "True if the application used in flows is updated and impacts are managed automatically, false if the application used in flows is not updated. Default value is false.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid arguments."
          },
          "403" : {
            "description" : "The user does no have right to update the application."
          },
          "404" : {
            "description" : "The application does not exist. The product does not exist."
          },
          "412" : {
            "description" : "The update of the application has an impact on flows. To perform the operation regardless of its impact, set the _forced parameter to true."
          },
          "500" : {
            "description" : "Internal server error."
          }
        },
        "summary" : "Links the given application to the product.",
        "description" : "\n\n <p>\n If the application is used in flows, and a new product is added to the application,\n the flows are not automatically updated with the new product.\n <br>\n In order to get the flow to use this newly added product, \n the user must use /flows/{businessId}/sources/{sourceId}/products/{productid} \n or /flows/{businessId}/targets/{targetId}/products/{productid}\n </p><br><b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Application</b>, action is <b>Modify</b>)<br>",
        "tags" : [ "applications" ]
      }
    },
    "/v2/configurations" : {
      "get" : {
        "operationId" : "getConfigurations",
        "parameters" : [ {
          "name" : "tag",
          "in" : "query",
          "description" : "The tag to filter by.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The list was successfully obtained.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RConfiguration"
                }
              }
            }
          },
          "404" : {
            "description" : "No configuration found with the given tag."
          }
        },
        "summary" : "Retrieves the list of Configuration entries.",
        "description" : "\n The list can be filtered by the tag of the Configuration entries.Access enforcement <b>always performed</b> (resource is <b>Configuration_Settings</b>, action is <b>View</b>)",
        "tags" : [ "configurations" ]
      },
      "post" : {
        "operationId" : "updateConfigurations",
        "parameters" : [ ],
        "responses" : {
          "204" : {
            "description" : "The Configuration entries were updated."
          },
          "400" : {
            "description" : "The Configuration entries fields are not valid."
          },
          "404" : {
            "description" : "One of the Configuration entries does not exist."
          }
        },
        "summary" : "Updates several Configuration entries.",
        "description" : "Access enforcement <b>always performed</b> (resource is <b>Configuration_Settings</b>, action is <b>Modify</b>)",
        "tags" : [ "configurations" ],
        "requestBody" : {
          "description" : "The list of Configuration entries.",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "items" : {
                  "$ref" : "#/components/schemas/RConfiguration"
                },
                "type" : "array"
              }
            }
          }
        }
      }
    },
    "/v2/configurations/{name}" : {
      "get" : {
        "operationId" : "getConfigurationByName",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "The name of the Configuration entry.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The Configuration entry exists.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RConfiguration"
                }
              }
            }
          },
          "404" : {
            "description" : "The Configuration entry does not exist."
          }
        },
        "summary" : "Retrieves a Configuration entry, searching by its name.",
        "description" : "Access enforcement <b>always performed</b> (resource is <b>Configuration_Settings</b>, action is <b>View</b>)",
        "tags" : [ "configurations" ]
      },
      "put" : {
        "operationId" : "updateConfiguration",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "The name of the Configuration entry.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "The Configuration entry was updated."
          },
          "400" : {
            "description" : "The Configuration entry fields are not valid."
          },
          "404" : {
            "description" : "The Configuration entry does not exist."
          }
        },
        "summary" : "Updates a Configuration entry by its name.",
        "description" : "Access enforcement <b>always performed</b> (resource is <b>Configuration_Settings</b>, action is <b>Modify</b>)",
        "tags" : [ "configurations" ],
        "requestBody" : {
          "description" : "The Configuration entry to update.",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RConfiguration"
              }
            }
          }
        }
      }
    },
    "/v2/customattributedefinitions" : {
      "delete" : {
        "operationId" : "deleteCustomAttributeDefinitionByFilter",
        "parameters" : [ {
          "name" : "name",
          "in" : "query",
          "description" : "Search for custom attribute definition having this name. Enclose\n            the search value in special character % to filter items containing\n            this value. Add % after the search value to filter items starting with this value.\n            Add % before the search value to filter items ending with this value.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "businessId",
          "in" : "query",
          "description" : "The business id of the custom attribute to delete. Can delete multiple\n            items. If no parameter is given, all custom attributes are removed. Use\n            parameters to narrow the list of custom attributes to be deleted.",
          "required" : false,
          "schema" : {
            "items" : {
              "type" : "string"
            },
            "type" : "array"
          }
        }, {
          "name" : "_forced",
          "in" : "query",
          "description" : "True if the custom attribute used in flows is deleted and impacts\n            are managed automatically, false if the custom attribute used in\n            flows is not deleted. Default value is false.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Custom attribute definitions are successfully deleted.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid arguments."
          },
          "403" : {
            "description" : "User is not authorized to DELETE on Custom attribute\n              definition resource"
          }
        },
        "summary" : "Deletes custom attribute definitions.",
        "description" : "<b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Custom_attribute_definition</b>, action is <b>Delete</b>)",
        "tags" : [ "customattributedefinitions" ]
      },
      "get" : {
        "operationId" : "listCustomAttributeDefinitions",
        "parameters" : [ {
          "name" : "search",
          "in" : "query",
          "description" : "Search for custom attribute definitions containing this value in 'name', 'description' or 'tags'.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "name",
          "in" : "query",
          "description" : "Search for custom attribute definitions having this name. Enclose\n            the search value in special character % to filter items containing\n            this value. Add % after the search value to filter items starting with this value.\n            Add % before the search value to filter items ending with this value.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "description",
          "in" : "query",
          "description" : "Search for custom attribute definitions having this description.\n            Enclose the search value in special character % to filter items containing this value.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "tags",
          "in" : "query",
          "description" : "Search for custom attribute definitions having this tag. Enclose\n            the search value in special character % to filter items containing\n            this value. Add % after the search value to filter items starting with this value.\n            Add % before the search value to filter items ending with this value.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "attributeType",
          "in" : "query",
          "description" : "Search for custom attribute definitions having this attribute type. Enclose\n            the search value in special character % to filter items containing\n            this value. Add % after the search value to filter items starting with this value.\n            Add % before the search value to filter items ending with this value.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "label",
          "in" : "query",
          "description" : "Search for custom attribute definitions having this tag. Enclose\n            the search value in special character % to filter items containing\n            this value. Add % after the search value to filter items starting with this value.\n            Add % before the search value to filter items ending with this value.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "scope",
          "in" : "query",
          "description" : "Search for custom attribute definitions having this scope.\n            Possible values: APPLICATION, PARTNER, COMPROFILE or FLOW.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Get custom attribute definitions starting from the specified\n            offset in the list of records returned by the database.\n            If not set, offset defaults to 0. Legal values: 0 <= offset <= 2147483647",
          "required" : false,
          "schema" : {
            "format" : "int64",
            "type" : "integer"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of items returned per request.",
          "required" : false,
          "schema" : {
            "format" : "int64",
            "type" : "integer"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "Sort custom attribute definitions using a specific field from result record.\n            Use in conjunction with 'ascending' parameter. Valid values are: name, scope.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ascending",
          "in" : "query",
          "description" : "Use in conjunction with 'sort' parameter. Defaults to 'false' - descending order.\n            (if none of 'sort' or 'ascending' are set, results are returned in the order they are in the database).",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Body contains the list of filtered custom attribute\n              definitions.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "items" : {
                    "$ref" : "#/components/schemas/RCustomAttributeDef"
                  },
                  "type" : "array"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid offset, limit, sort criteria or invalid scope\n              to search for. See swagger documentation for available options."
          },
          "403" : {
            "description" : "User is not authorized to VIEW on Custom attribute\n              definition resource"
          }
        },
        "summary" : "Retrieves a list of custom attribute definitions.",
        "description" : "<b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Custom_attribute_definition</b>, action is <b>View</b>)",
        "tags" : [ "customattributedefinitions" ]
      },
      "post" : {
        "operationId" : "createCustomAttributeDefinition",
        "parameters" : [ {
          "name" : "_body",
          "in" : "query",
          "description" : "Controls if the body of the created object is returned in the\n            response. Default value is <code>true</code>.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "The custom attribute definition was successfully created.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RCustomAttributeDef"
                }
              }
            }
          },
          "400" : {
            "description" : "The custom attribute definition fields are not valid."
          },
          "403" : {
            "description" : "User is not authorized to CREATE on Custom attribute\n              definition resource"
          },
          "409" : {
            "description" : "A custom attribute definition with the same name already\n              exists."
          },
          "500" : {
            "description" : "Internal server error."
          }
        },
        "summary" : "Creates a new custom attribute definition.",
        "description" : "\n\n <p>\n A custom attribute definition is identified by its name and scope. You cannot\n create two custom attribute definitions with the same name and scope.\n </p><br><b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Custom_attribute_definition</b>, action is <b>Create</b>)",
        "tags" : [ "customattributedefinitions" ],
        "requestBody" : {
          "description" : "The custom attribute definition to create.",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RCustomAttributeDef"
              }
            }
          }
        }
      }
    },
    "/v2/customattributedefinitions/{businessId}" : {
      "delete" : {
        "operationId" : "deleteCustomAttributeDefinitionById",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The custom attribute definition business id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "_forced",
          "in" : "query",
          "description" : "True if the custom attribute used in flows is deleted and impacts\n            are managed automatically, false if the custom attribute used in\n            flows is not deleted. Default value is false.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The custom attribute definition was deleted.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid argument."
          },
          "403" : {
            "description" : "User is not authorized to DELETE on Custom attribute\n              definition resource."
          },
          "404" : {
            "description" : "Custom attribute definition with the given businessId\n              doesn't exist."
          }
        },
        "summary" : "Deletes a custom attribute definition.",
        "description" : "<b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Custom_attribute_definition</b>, action is <b>Delete</b>)",
        "tags" : [ "customattributedefinitions" ]
      },
      "get" : {
        "operationId" : "getCustomAttributeDefinitionById",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The custom attribute definition business id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The custom attribute definition with given id is found and\n              it is returned in response body.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid argument."
          },
          "403" : {
            "description" : "User is not authorized to VIEW on Custom attribute\n              definition resource."
          },
          "404" : {
            "description" : "The custom attribute definition with given id doesn't\n              exist."
          }
        },
        "summary" : "Retrieves a given custom attribute definition.",
        "description" : "<b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Custom_attribute_definition</b>, action is <b>View</b>)",
        "tags" : [ "customattributedefinitions" ]
      },
      "put" : {
        "operationId" : "updateCustomAttributeDefinitionById",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The business id of the custom attribute definition to update.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "_body",
          "in" : "query",
          "description" : "If the update should return the updated object.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The custom attribute definition is successfully updated.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RCustomAttributeDef"
                }
              }
            }
          },
          "400" : {
            "description" : "The custom attribute definition is not valid."
          },
          "403" : {
            "description" : "User is not authorized to UPDATE on Custom attribute\n              definition resource"
          },
          "404" : {
            "description" : "The custom attribute definition with the given businessId\n              doesn't exist."
          },
          "500" : {
            "description" : "Internal server error."
          }
        },
        "summary" : "Updates a custom attribute definition.",
        "description" : " Only tags and description can be\n changed.<br><b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Custom_attribute_definition</b>, action is <b>Modify</b>)",
        "tags" : [ "customattributedefinitions" ],
        "requestBody" : {
          "description" : "The custom attribute definition to update with the new tags or\n            description values.",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RCustomAttributeDef"
              }
            }
          }
        }
      }
    },
    "/v2/deployments" : {
      "get" : {
        "operationId" : "listDeployments",
        "parameters" : [ {
          "name" : "search",
          "in" : "query",
          "description" : "Search for deployments containing this value in deployedObject.type or deployedObject.name or targetProduct.name",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "deployedObjectType",
          "in" : "query",
          "description" : "Search for deployments having this deployedObject type. Possible values are: flow, configuration, update",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "deployedObjectName",
          "in" : "query",
          "description" : "Search for deployments having this deployedObject name. Enclose the search value in special character % to filter items containing this value.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "targetProductName",
          "in" : "query",
          "description" : "Search for deployments having this targetProduct name. Enclose the search value in special character % to filter items containing this value.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "statusCode",
          "in" : "query",
          "description" : "Search for deployments having this status code. Possible values are : Deploying, Deployed, DeployedNeedsRestart, DeployedInError, Removed, Removing, RemovedWithErrors, Uploading, Updating, UploadedInError, Updated, UpdatedInError. If you want to retrieve multiple status codes put '|' between statusCodes. Example : statusCode=DeployedInError|RemovedWithErrors|UploadedInError|UpdatedInError",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "startTime",
          "in" : "query",
          "description" : "Search for deployments after a specific time. Use unix epoch time in milliseconds.",
          "required" : false,
          "schema" : {
            "format" : "int64",
            "type" : "integer"
          }
        }, {
          "name" : "endTime",
          "in" : "query",
          "description" : "Search for deployments before a specific time. Use unix epoch time in milliseconds.",
          "required" : false,
          "schema" : {
            "format" : "int64",
            "type" : "integer"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Get Deployments starting from the specified offset in the list of records returned by the database. If not set, offset defaults to 0. Legal values: 0 <= offset <= 2147483647",
          "required" : false,
          "schema" : {
            "format" : "int64",
            "type" : "integer"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of items returned per request.",
          "required" : false,
          "schema" : {
            "format" : "int64",
            "type" : "integer"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "Sort deployments using a specific field from result record. Valid values are : deployedObject.name, deployedObject.type, targetProduct.name, timestamp, statusCode",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ascending",
          "in" : "query",
          "description" : "Sort deployments in ascending order if sortingCriteria is not empty and ascending is true.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The list was successfully obtained.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "items" : {
                    "$ref" : "#/components/schemas/RDeployment"
                  },
                  "type" : "array"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid offset, limit, sort criteria or statusCode. See swagger documentation for available options."
          }
        },
        "summary" : "Retrieves a list of deployments.",
        "description" : "Access enforcement <b>always performed</b> (resource is <b>Deployment</b>, action is <b>View</b>)",
        "tags" : [ "deployments" ]
      }
    },
    "/v2/deployments/redeploybox" : {
      "post" : {
        "operationId" : "redeployFailedDeployments",
        "parameters" : [ ],
        "responses" : {
          "202" : {
            "description" : "The redeployment was triggered. Check response body for details."
          },
          "400" : {
            "description" : "At least one business id is required to trigger redeployment."
          },
          "default" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RDeploymentsPendingMetadata"
                }
              }
            }
          }
        },
        "summary" : "Redeploys the given failed deployments.",
        "description" : "<b>Since: </b>FC v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Flow</b>, action is <b>Deploy</b>)<br>Access enforcement <b>always performed</b> (resource is <b>Policy</b>, action is <b>Deploy</b>)<br>Access enforcement <b>always performed</b> (resource is <b>Product_Configuration</b>, action is <b>Deploy</b>)<br>Access enforcement <b>always performed</b> (resource is <b>Product_Configuration</b>, action is <b>Deploy_Without_Restart</b>)<br>Access enforcement <b>always performed</b> (resource is <b>Update_Package</b>, action is <b>Deploy</b>)<br>Access enforcement <b>always performed</b> (resource is <b>Deployment</b>, action is <b>View</b>)<br>",
        "tags" : [ "deployments" ],
        "requestBody" : {
          "description" : "The business ids of the failed deployments to redeploy.",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "items" : {
                  "type" : "string"
                },
                "type" : "array"
              }
            }
          }
        }
      }
    },
    "/v2/deployments/{businessId}" : {
      "get" : {
        "operationId" : "getDeploymentById",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The business id of the deployment.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The deployment record exists.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RDeployment"
                }
              }
            }
          },
          "404" : {
            "description" : "The deployment record does not exist."
          }
        },
        "summary" : "Retrieves a given deployment record.",
        "description" : "<b>Since: </b>FC v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Deployment</b>, action is <b>View</b>)",
        "tags" : [ "deployments" ]
      }
    },
    "/v2/distributioninformation" : {
      "get" : {
        "operationId" : "distributionSpecificInformation",
        "parameters" : [ {
          "name" : "property",
          "in" : "query",
          "description" : "Search for configuration property having this name.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Configuration property found or all configuration properties (key/value pairs) if no property was passed in as query param.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "items" : {
                    "type" : "string"
                  },
                  "type" : "array"
                }
              }
            }
          }
        },
        "summary" : "Retrieves Flow Manager distribution-specific information.",
        "description" : "Access enforcement <b>never performed</b>...",
        "tags" : [ "distributionInformation" ]
      }
    },
    "/v2/endpointtypes/searchbox" : {
      "post" : {
        "operationId" : "getEndpointTypeIdAndNameByEndpointTypeIdPairs",
        "parameters" : [ {
          "name" : "brief",
          "in" : "query",
          "description" : "True if the result should be in brief format (not including dependencies), false otherwise. Default value is false.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A map of businessId / name found or descriptive errors.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid argument."
          }
        },
        "summary" : "Retrieve Endpoint Types id and name by endpointType / list of businessIds pairs.",
        "description" : " For products and partner, the ComProfiles id and name pairs are also returned.Access enforcement <b>always performed</b> (resource is <b>Application</b>, action is <b>View</b>)<br>Access enforcement <b>always performed</b> (resource is <b>Application_Group</b>, action is <b>View</b>)<br>Access enforcement <b>always performed</b> (resource is <b>Partner</b>, action is <b>View</b>)<br>Access enforcement <b>always performed</b> (resource is <b>Product</b>, action is <b>View</b>)<br>",
        "tags" : [ "endpointtype" ],
        "requestBody" : {
          "description" : "A map of endpointType / list of businessIds pairs",
          "required" : true,
          "content" : {
            "application/json" : {
              "examples" : {
                "exampleAllEndpoints" : {
                  "summary" : "exampleAllEndpoints",
                  "value" : {
                    "application" : [ "bid1", "bid2" ],
                    "certificate" : [ "bid1", "bid2" ],
                    "credential" : [ "bid1", "bid2" ],
                    "partner" : [ "bid1", "bid2" ],
                    "product" : [ "bid1", "bid2" ],
                    "template" : [ "bid1", "bid2" ]
                  }
                }
              },
              "schema" : {
                "$ref" : "#/components/schemas/Map"
              }
            }
          }
        }
      }
    },
    "/v2/flowpatterns" : {
      "delete" : {
        "operationId" : "deleteFlowPatternsByFilter",
        "parameters" : [ {
          "name" : "name",
          "in" : "query",
          "description" : "Search for flow patterns having this name. Enclose the search value in\n            special character % to filter items containing this value.\n            Add % after the search value to filter items starting with this value.\n            Add % before the search value to filter items ending with this value.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "businessId",
          "in" : "query",
          "description" : "The business id of the flow pattern to delete. Can delete multiple items.",
          "required" : false,
          "schema" : {
            "items" : {
              "type" : "string"
            },
            "type" : "array"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Flow patterns were deleted.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          },
          "400" : {
            "description" : "Use at least one filter."
          },
          "412" : {
            "description" : "Some flow patterns cannot be removed because they are used in flow templates."
          }
        },
        "summary" : "Deletes a list of flow patterns.",
        "description" : "<b>Since: </b>FM v2.0<br>Access enforcement <b>always performed</b> (resource is <b>Flow_Pattern</b>, action is <b>Delete</b>)",
        "tags" : [ "flowpatterns" ]
      },
      "get" : {
        "operationId" : "listFlowPatterns",
        "parameters" : [ {
          "name" : "search",
          "in" : "query",
          "description" : "Search for flow patterns containing this value in 'name' or in 'description'.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "name",
          "in" : "query",
          "description" : "Search for flow patterns having this name. Enclose the search value in special character % to filter items containing this value.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "description",
          "in" : "query",
          "description" : "Search for flow patterns having this description. Enclose the search value in special character % to filter items containing this value.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "sourceType",
          "in" : "query",
          "description" : "Search for flow patterns having this source type. Source type can be one of: Partner, Application, Hybrid.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "relayType",
          "in" : "query",
          "description" : "Search for flow patterns having this relay type. Relay type can be one of: SecureTransport, CFT, none.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "targetType",
          "in" : "query",
          "description" : "Search for flow patterns having this target type. Target type can be one of: Partner, Application, Hybrid.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "subscriberType",
          "in" : "query",
          "description" : "Search for flow patterns having this subscriber type. Subscriber type can be one of: Partner, Application, Hybrid.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "subscriberPosition",
          "in" : "query",
          "description" : "Search for flow patterns having this subscriber position. Subscriber position can be one of: Source, Target.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "protocol",
          "in" : "query",
          "description" : "Search for flow patterns having this protocol. Protocol can be one of: PESIT, SFTP, FTP, HTTP.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Get flow patterns starting from the specified offset\n            in the list of records returned by the database.\n            If not set, offset defaults to 0. Legal values: 0 <= offset <= 2147483647",
          "required" : false,
          "schema" : {
            "format" : "int64",
            "type" : "integer"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of items returned per request.",
          "required" : false,
          "schema" : {
            "format" : "int64",
            "type" : "integer"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "Sort flow templates using a specific field from result record.\n            Use in conjunction with 'ascending' parameter.\n            Valid values are: name, description, creationDate, changeDate.\n            It defaults to 'changeDate'.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ascending",
          "in" : "query",
          "description" : "Use in conjunction with 'sort' parameter.\n            Defaults to 'false' - descending order.\n            Sort defaults to 'changeDate' - (if none of 'sort' or 'ascending'\n            are set, the latest modified flow patterns will be returned first).",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "_brief",
          "in" : "query",
          "description" : "\"true\" if the result should be in brief format, \"false\" otherwise. Default value is \"false\".",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Flow Patterns found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "items" : {
                    "$ref" : "#/components/schemas/RFlowPattern"
                  },
                  "type" : "array"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid offset, limit or sort criteria. See swagger documentation for available options."
          },
          "404" : {
            "description" : "No Flow Pattern was found."
          }
        },
        "summary" : "Retrieves a list of Flow Patterns.",
        "description" : "<b>Since: </b>FM v2.0<br>Access enforcement <b>always performed</b> (resource is <b>Flow_Pattern</b>, action is <b>View</b>)",
        "tags" : [ "flowpatterns" ]
      },
      "post" : {
        "operationId" : "createFlowPattern",
        "parameters" : [ {
          "name" : "_forced",
          "in" : "query",
          "description" : "True if the flow pattern update is forced. Default value is <code>false</code>.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "_body",
          "in" : "query",
          "description" : "Controls if the body of the created object is returned in the response. Default value is <code>true</code>.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "The flow pattern was successfully created or updated.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RFlowPattern"
                }
              }
            }
          },
          "400" : {
            "description" : "The flow pattern fields are not valid or the productMinVersion is not compatible with the product version"
          },
          "403" : {
            "description" : "The user does no have right to create flow patterns (Resource=Flow_Pattern, Action=Create)."
          },
          "409" : {
            "description" : "A flow pattern with the same name and version already exists."
          },
          "412" : {
            "description" : "The pattern already exist with a higher version and must be explicitly overridden with forced=true."
          }
        },
        "summary" : "Creates or updates a flow pattern.",
        "description" : "<b>Since: </b>FM v2.0<br>Access enforcement <b>always performed</b> (resource is <b>Flow_Pattern</b>, action is <b>Create</b>)",
        "tags" : [ "flowpatterns" ],
        "requestBody" : {
          "description" : "The flow pattern to create or update.",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RFlowPattern"
              }
            }
          }
        }
      }
    },
    "/v2/flowpatterns/generatebox" : {
      "post" : {
        "operationId" : "generateFlowPattern",
        "parameters" : [ {
          "name" : "_body",
          "in" : "query",
          "description" : "Controls if the body of the created object is returned in the response. Default value is <code>true</code>.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "The flow pattern was successfully generated.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RFlowPattern"
                }
              }
            }
          },
          "400" : {
            "description" : "The flow pattern fields are not valid or the productMinVersion is not compatible with the product version"
          },
          "403" : {
            "description" : "The user does no have right to generate flow patterns (Resource=Flow_Pattern, Action=Generate)."
          },
          "409" : {
            "description" : "A flow pattern with the same name and version already exists."
          },
          "412" : {
            "description" : "The pattern already exist with a higher version and must be explicitly overridden with forced=true."
          }
        },
        "summary" : "Generates a flow pattern.",
        "description" : "<b>Since: </b>FM v2.0<br>Access enforcement <b>always performed</b> (resource is <b>Flow_Pattern</b>, action is <b>Generate</b>)",
        "tags" : [ "flowpatterns" ],
        "requestBody" : {
          "description" : "The flow pattern to create or update.",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RFlowPatternDefinition"
              }
            }
          }
        }
      }
    },
    "/v2/flowpatterns/{businessId}" : {
      "delete" : {
        "operationId" : "deleteFlowPatternById",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The flow pattern's business id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The flow pattern with the given business id was deleted.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid arguments."
          },
          "404" : {
            "description" : "The flow pattern with the given business id doesn't exist."
          },
          "412" : {
            "description" : "The flow pattern cannot be removed because it is used in flow templates."
          }
        },
        "summary" : "Deletes a flow pattern.",
        "description" : "<b>Since: </b>FM v2.0<br>Access enforcement <b>always performed</b> (resource is <b>Flow_Pattern</b>, action is <b>Delete</b>)",
        "tags" : [ "flowpatterns" ]
      },
      "get" : {
        "operationId" : "getFlowsPatternById",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "the businessId of the Flow Pattern",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Flow Pattern found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RFlowPattern"
                }
              }
            }
          },
          "404" : {
            "description" : "Flow Pattern does not exist."
          }
        },
        "summary" : "Retrieves a given Flow Pattern, based on its business id.",
        "description" : "<b>Since: </b>FM v2.0<br>Access enforcement <b>always performed</b> (resource is <b>Flow_Pattern</b>, action is <b>View</b>)",
        "tags" : [ "flowpatterns" ]
      }
    },
    "/v2/flowpatterns/{businessId}/subscriptionschema" : {
      "get" : {
        "operationId" : "getFlowPatternSubscriptionSchema",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The business id of the Flow Pattern",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The flow pattern exists.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Map"
                }
              }
            }
          },
          "404" : {
            "description" : "The flow pattern does not exist."
          }
        },
        "summary" : "Retrieves a Flow Pattern subscription schema, searching pattern by a provided business id.",
        "description" : "\n <br/>Access enforcement <b>always performed</b> (resource is <b>Flow_Pattern</b>, action is <b>View</b>)",
        "tags" : [ "flowpatterns" ]
      }
    },
    "/v2/flows" : {
      "delete" : {
        "operationId" : "deleteFlowsByFilter",
        "parameters" : [ {
          "name" : "name",
          "in" : "query",
          "description" : "Search for flows having this name. Enclose the search value in\n            special character % to filter items containing this value.\n            Add % after the search value to filter items starting with this value.\n            Add % before the search value to filter items ending with this value.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "businessId",
          "in" : "query",
          "description" : "The business id of the flow to delete. Can delete multiple items.\n            If no parameter is given, all flows are removed. Use parameters to\n            narrow the list of flows to be deleted.",
          "required" : false,
          "schema" : {
            "items" : {
              "type" : "string"
            },
            "type" : "array"
          }
        } ],
        "responses" : {
          "202" : {
            "description" : "The delete request has been accepted for processing, but\n              the processing has not been completed."
          },
          "400" : {
            "description" : "Delete request must contain at least one criteria."
          },
          "default" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          }
        },
        "summary" : "Deletes a list of filtered flows.",
        "description" : "<b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Flow</b>, action is <b>Delete</b>)",
        "tags" : [ "flows" ]
      },
      "get" : {
        "operationId" : "listFlows",
        "parameters" : [ {
          "name" : "search",
          "in" : "query",
          "description" : "Search for flows containing this value in name or member name.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "name",
          "in" : "query",
          "description" : "Search for flows having this name. Enclose the search value in\n            special character % to filter items containing this value.\n            Add % after the search value to filter items starting with this value.\n            Add % before the search value to filter items ending with this value.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "status",
          "in" : "query",
          "description" : "The flow status to filter by: Saved, SavedNotDeployed, Deploying,\n            DeployingInError, Deployed, DeployedInError, Removed,\n            RemovedInError, Removing",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "customAttributeFilter",
          "in" : "query",
          "description" : "Search for flows having this custom attribute filter. Sample\n            filter: customAttrName1=value1&customAttrName2=value2",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "flowPatternName",
          "in" : "query",
          "description" : "Search for flows having this flowPatternName. Enclose the search value\n            in special character % to filter items containing this value.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "flowTemplateName",
          "in" : "query",
          "description" : "Search for flows having this flowTemplateName. Enclose the search value\n            in special character % to filter items containing this value.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "subscriptionName",
          "in" : "query",
          "description" : "Search for flows having this subscriptionName. Enclose the search value\n            in special character % to filter items containing this value.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "memberName",
          "in" : "query",
          "description" : "Search for flows having this memberName. Enclose the search value\n            in special character % to filter items containing this value.\n            Add % after the search value to filter items starting with this value.\n            Add % before the search value to filter items ending with this value.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "memberPosition",
          "in" : "query",
          "description" : "The member position to filter by: ANY, SOURCE, TARGET, RELAY",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "memberType",
          "in" : "query",
          "description" : "The member type to filter by: APPLICATION, PARTNER, SECURE_TRANSPORT, TRANSFER_CFT.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "protocol",
          "in" : "query",
          "description" : "Search for flows based on flow patterns using this protocol.\n            Protocol can be one of: PESIT, SFTP, FTP, HTTP.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "tags",
          "in" : "query",
          "description" : "Search for flows having this tag. Enclose the search value in\n            special character % to filter items containing this value.\n            Add % after the search value to filter items starting with this value.\n            Add % before the search value to filter items ending with this value.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "pesitIDF",
          "in" : "query",
          "description" : "Search for flows having this PeSIT IDF.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "updatedSince",
          "in" : "query",
          "description" : "Search for flows updated in the specified period.\n            Allowed values are: 1hour, 1day, 1week, 1month.\n            If startTime is also set, the startTime value will be used for filtering.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "startTime",
          "in" : "query",
          "description" : "Search for flows modified after a specific time. Use unix epoch time in milliseconds.",
          "required" : false,
          "schema" : {
            "format" : "int64",
            "type" : "integer"
          }
        }, {
          "name" : "endTime",
          "in" : "query",
          "description" : "Search for flows modified before a specific time. Use unix epoch time in milliseconds.",
          "required" : false,
          "schema" : {
            "format" : "int64",
            "type" : "integer"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Get flows starting from the specified offset in the list of records\n            returned by the database. If not set, offset defaults to 0.\n            Legal values: 0 <= offset <= 2147483647",
          "required" : false,
          "schema" : {
            "format" : "int64",
            "type" : "integer"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of items returned per request.",
          "required" : false,
          "schema" : {
            "format" : "int64",
            "type" : "integer"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "Sort flows using a specific field from result record.\n            Use in conjunction with 'ascending' parameter.\n            Valid values are: name, status, changeDate.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ascending",
          "in" : "query",
          "description" : "Use in conjunction with 'sort' parameter.\n            Defaults to 'false' - descending order.\n            (if none of 'sort' or 'ascending' are set,\n            results are returned with the newest/updated first).",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "_brief",
          "in" : "query",
          "description" : "True if the result should be in brief format, false otherwise.\n            Default value is false.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "retrieveComProfiles",
          "in" : "query",
          "description" : "True if the result should contain the comProfiles, false\n            otherwise. Default value is true.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The list was successfully obtained.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "items" : {
                    "$ref" : "#/components/schemas/RFlow"
                  },
                  "type" : "array"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid startTime, endTime, status, custom attribute filter, offset, limit or sort criteria."
          }
        },
        "summary" : "Retrieves a list of flows.",
        "description" : "\n\n <p>\n Only the businessId, name, and status are retrieved when _brief=true. <br>\n The status refers to the products on which the flow has already been\n deployed. The code is the status of the flow as a whole. The deployment\n status for individual products is listed, and is grouped by Deployed,\n DeployedwithErrors, Deploying. <br>\n A flow JSON also contains information about sources, targets, relays, and\n protocols. When the products in sources or targets are Transfer CFTs, the\n source/target sections contain a set of properties: transfer properties, file\n properties and processing scripts. <br>\n The relay section contains data specific to each relay. The business id of a\n relay is given by its position in the flow. The first relay has the business\n id=1, the second has the business id=2. <br>\n Protocols also have business ids that identify their position in the flow. If\n the flow has relays, the protocol between source and the first relay has the\n business id=1, the protocol between the first relay and the next entity\n (relay or target) has the business id=2. <br>\n The file transfer direction is from the source, through the relays to the\n target. <br>\n The entity preceding a specific protocol is called a sender, and the one\n following it is called a receiver. <br>\n Each protocol contains a general data section, common to all combinations of\n sender/receiver products. This section contains information about the\n selected protocol, the direction (sender or receiver), and protocol-specific\n data (PESIT, SFTP, HTTP or FTP). <br>\n The protocol section also contains information about each sender/receiver\n pair. <br>\n From a transfer initiator perspective, a product can have the role of client\n or server. The client is the product initiating the transfer and the server\n is the product with which the client is communicating directly via the\n selected protocol. For example, if a flow has a relay and in the source-relay\n protocol sender pushes files, a product in a source application is the\n initiator and thus client. The relay product in this case is the server. <br>\n In order to know how to handle a transfer, each product has pairs of client\n and server communication profiles. The selected flow JSON lists the protocol\n definition for a collection of client/server pairs, each containing the\n client communication profile from one product and the server communication\n profile from the product with which it communicates. <br>\n For more information, see:\n <ul>\n <li>GET /unmanagedproducts/{businessid}/communicationprofiles</li>\n <li>GET /products/{businessid}/communicationprofiles</li>\n <li>GET /partners</li>\n </ul>\n <br>\n For more information regarding the flow source or target properties, check\n the <b>API flow</b> column in the <b>Transfer CFT corresponding parameters >\n Flow configuration in Flow Manager and CFTUTIL</b> section from the\n User Guide.\n </p><br><b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Flow</b>, action is <b>View</b>)",
        "tags" : [ "flows" ]
      },
      "post" : {
        "operationId" : "createFlow",
        "parameters" : [ {
          "name" : "_body",
          "in" : "query",
          "description" : "Controls if the body of the created object is returned in the\n            response. Default value is <code>true</code>.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "The flow was successfully created and the body contains the\n              created flow.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RFlow"
                }
              }
            }
          },
          "400" : {
            "description" : "The flow fields are not valid."
          },
          "403" : {
            "description" : "The user does no have right to create flows (Resource=Flow,\n              Action=Create)."
          },
          "409" : {
            "description" : "A flow with the same name already exists."
          },
          "500" : {
            "description" : "Internal server error."
          }
        },
        "summary" : "Creates a flow.",
        "description" : "\n\n <p>\n Creates a complete or incomplete flow. A complete flow is ready to be\n deployed. An incomplete flow is a flow where at least one of the flow members\n is missing, for example the source. <br>\n The created flow must adhere to certain rules that are valid in the GUI. All\n the rules below that apply to sources, also apply to targets.\n <ul>\n <li>The flow name is mandatory.</li>\n <li>The defaultIdentifier is mandatory for the PeSIT protocol. Additionally,\n when the direction is RECEIVER_PULLS_FILE, the field in the sources -> File\n properties -> Filename is mandatory.</li>\n <li>A flow may have no source or target. In this case the protocol cannot be\n set. You can only set the protocol after defining at least one source and a\n target.</li>\n <li>Sources are members of the flow and are all of the same type:\n applications, application groups, or unmanaged products.</li>\n <li>If you do not define the source properties, the default values are\n used.</li>\n <li>processing script files, as well as certificates, are included in the\n body of the API, encoded in base64.</li>\n <li>if the protocol is not specified, the flow will have the protocol set to\n Undefined.</li>\n <li>if the protocol section contains only general settings, the communication\n profiles will be set automatically.</li>\n <li>for each protocol using SSL, a certificate is mandatory.</li>\n </ul>\n The recommended workflow is to create a simple flow and then use the\n dedicated APIs for sources, targets, relays, and protocols to add details.\n <br>\n See GET /flows for the flow syntax. <br>\n For more information regarding the flow source or target properties, check\n the <b>API flow</b> column in the <b>Transfer CFT corresponding parameters >\n Flow configuration in Flow Manager and CFTUTIL</b> section from the\n User Guide.\n </p><br><b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Flow</b>, action is <b>Create</b>)",
        "tags" : [ "flows" ],
        "requestBody" : {
          "description" : "The flow to create.",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RFlow"
              }
            }
          }
        }
      }
    },
    "/v2/flows/deploybox" : {
      "post" : {
        "operationId" : "deployFlows",
        "parameters" : [ {
          "name" : "_forceRestart",
          "in" : "query",
          "description" : "Force the restart of impacted products. Default value is\n            <code>false</code>.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "_forceDeploy",
          "in" : "query",
          "description" : "Force the deploy of impacted products even if conflicts are\n            detected on given flows. Default value is <code>true</code>.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "202" : {
            "description" : "The deploy request has been accepted for processing, but\n              the processing has not been completed."
          },
          "400" : {
            "description" : "Business ids is empty or invalid."
          },
          "412" : {
            "description" : "The deploy request has been triggered, but some products\n              require restart or generates conflict with legacy flows."
          },
          "default" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RFlowPendingMetadata"
                }
              }
            }
          }
        },
        "summary" : "Deploys a list of flows.",
        "description" : "\n\n <p>\n Deployment is only triggered only on the flows that are deployable:\n SavedNotDeployed or DeployedInError. <br>\n If the list of flows to be deployed contain flows that have the status\n Deployed, Saved, or Deploying, the deploy is not triggered on those flows.\n <br>\n The command response specifies the number of flows on which the deploy was\n triggered. Deployment continues after the command is reported as successful.\n <br>\n Use the GET /flows command with _brief=true to check the deployments status.\n <br>\n If conflicts with other flows or with legacy flows are detected during the\n flow deployment and _forcedRestart=true, the deployment is forced on all\n products. The equivalent in the GUI is an OK to the warning about these\n conflicts.\n </p><br><b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Flow</b>, action is <b>Deploy</b>)",
        "tags" : [ "flows" ],
        "requestBody" : {
          "description" : "An array of flow business id to deploy sent in the body of the\n            request",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "items" : {
                  "type" : "string"
                },
                "type" : "array"
              }
            }
          }
        }
      }
    },
    "/v2/flows/{businessId}" : {
      "delete" : {
        "operationId" : "deleteFlowById",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The flow business id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "202" : {
            "description" : "The delete request has been accepted for processing, but\n              the processing has not been completed."
          },
          "400" : {
            "description" : "Illegal businessId."
          },
          "404" : {
            "description" : "Flow with the given businessId doesn't exist."
          },
          "default" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          }
        },
        "summary" : "Deletes a flow.",
        "description" : "<b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Flow</b>, action is <b>Delete</b>)",
        "tags" : [ "flows" ]
      },
      "get" : {
        "operationId" : "getFlowById",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The business id of the flow.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Fields for projection",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The flow exists.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RFlow"
                }
              }
            }
          },
          "400" : {
            "description" : "Illegal arguments."
          },
          "404" : {
            "description" : "The flow does not exist."
          }
        },
        "summary" : "Retrieves a given flow.",
        "description" : "<b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Flow</b>, action is <b>View</b>)",
        "tags" : [ "flows" ]
      },
      "put" : {
        "operationId" : "updateFlowById",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The flow's business id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "_body",
          "in" : "query",
          "description" : "If the update should return the updated object.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The flow is successfully updated.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RFlow"
                }
              }
            }
          },
          "400" : {
            "description" : "The flow fields are not valid."
          },
          "404" : {
            "description" : "The flow with the given businessId doesn't exist."
          }
        },
        "summary" : "Updates a flow.",
        "description" : "\n\n <p>\n PUT is idempotent so PUT requests you MUST send all the available\n properties/values , not just the ones you want to change. It is a good\n practice to query for a flow, modify what needed and then resend the whole\n flow.\n </p><br><b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Flow</b>, action is <b>Modify</b>)",
        "tags" : [ "flows" ],
        "requestBody" : {
          "description" : "The flow to update.",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RFlow"
              }
            }
          }
        }
      }
    },
    "/v2/flows/{businessId}/products" : {
      "get" : {
        "operationId" : "getDeploymentStatus",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The flow business id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "productName",
          "in" : "query",
          "description" : "Search for products that are part of the flow and have this\n            productName. Enclose the search value in special character\n            % to filter items containing this value. Add % after the\n            search value to filter items starting with this value. Add %\n            before the search value to filter items ending with this value.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "productLastDeploymentStatus",
          "in" : "query",
          "description" : "The product deployment status. Possible values are: NotDeployed,\n            DeployedInError, Deploying, Deployed, RemovedInError",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The deployment statuses were successfully obtained.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RFlowProductLastDeploymentStatus"
                }
              }
            }
          },
          "400" : {
            "description" : "The deployment status used as a filter is not correct"
          },
          "404" : {
            "description" : "The flow with the given businessId does not exist or"
          }
        },
        "summary" : "Retrieves the products with the given name or the given last deployment\n status in a flow",
        "description" : "\n\n <p>\n Retrieves deployment status of all the products in the flow. <br>\n When used with parameters, the deployment status of some of the products in\n the flow is retrieved. <br>\n The deployment status can be: Not deployed, Deployed in error, Deploying,\n Deployed, Removed in error\n </p><br><b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Flow</b>, action is <b>View</b>)",
        "tags" : [ "flows" ]
      }
    },
    "/v2/flows/{businessId}/products/deploybox" : {
      "post" : {
        "operationId" : "deployProductsToFlow",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The flow business id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "_forceRestart",
          "in" : "query",
          "description" : "Force the restart of impacted products. Default value is\n            <code>false</code>.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "_forceDeploy",
          "in" : "query",
          "description" : "Force the deploy of impacted products even if conflicts are\n            detected on given flows. Default value is <code>true</code>.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The deployment successfully started. Use the other services to check on a specific product the deployment status.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid arguments."
          },
          "404" : {
            "description" : "Flow with the given businessId does not exist."
          }
        },
        "summary" : "Deploys on the given products in the given flow",
        "description" : "\n\n <p>\n After this API command in executed, the GUI deployment status will reflect\n the success of the deployment on the number of products on which the command\n had an effect. <br>\n When deploying on a specific product in a flow, other products in the flow\n might need to be deployed as well in order to have the whole flow in status\n Deployed. <br>\n The status of each product in the flow after deployment can be retrieved with\n GET /flows/{businessId}/products\n </p><br><b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Flow</b>, action is <b>Deploy</b>)",
        "tags" : [ "flows" ],
        "requestBody" : {
          "description" : "The product business ids",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "items" : {
                  "type" : "string"
                },
                "type" : "array"
              }
            }
          }
        }
      }
    },
    "/v2/flows/{businessId}/products/{productId}" : {
      "get" : {
        "operationId" : "getDeploymentStatusByProductId",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The flow business id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "productId",
          "in" : "path",
          "description" : "The product business id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The deployment status was successfully obtained.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RFlowProductLastDeploymentStatus"
                }
              }
            }
          },
          "400" : {
            "description" : "Illegal arguments."
          },
          "404" : {
            "description" : "The flow with the given businessId does not exist or the\n              product with the given productId does not exist"
          }
        },
        "summary" : "Retrieves the deployment status for the product with the given id in the\n given flow.",
        "description" : "\n\n <p>\n Retrieves deployment status of all the products in the flow. <br>\n When used with parameters, the deployment status of some of the products in\n the flow is retrieved. <br>\n The deployment status can be: Not deployed, Deployed in error, Deploying,\n Deployed, Removed in error\n </p><br><b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Flow</b>, action is <b>View</b>)",
        "tags" : [ "flows" ]
      }
    },
    "/v2/flows/{businessId}/protocols/{protocolId}" : {
      "get" : {
        "operationId" : "getProtocols",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "the flow business identifier",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "protocolId",
          "in" : "path",
          "description" : "the index of the protocol in a flow (ex: the first protocol has\n            index 1)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The protocol was successfully obtained.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RProtocol"
                }
              }
            }
          },
          "400" : {
            "description" : "Illegal arguments."
          },
          "404" : {
            "description" : "The flow with given id or the protocol with the given index\n              does not exist"
          }
        },
        "summary" : "Retrieves a protocol identified by it's index",
        "description" : "\n\n <p>\n Identifies the position of the protocol in the flow. Id=1 is the protocol\n between source and target. If the flow has relays, the protocol with id=1 is\n the protocol between the source and the first relay. <br>\n For more information about protocols see GET /flows.\n </p><br><b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Flow</b>, action is <b>View</b>)",
        "tags" : [ "flows" ]
      },
      "head" : {
        "operationId" : "checkProtocolExistsById",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The flow business id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "protocolId",
          "in" : "path",
          "description" : "the index of the protocol in a flow (ex: the first protocol has\n            index 1)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The protocol with given index exists.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          },
          "400" : {
            "description" : "Illegal arguments."
          },
          "404" : {
            "description" : "The flow with given id or the protocol with the given index\n              does not exist"
          }
        },
        "summary" : "Checks if the protocol with the given index exists.",
        "description" : "<b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Flow</b>, action is <b>View</b>)",
        "tags" : [ "flows" ]
      },
      "put" : {
        "operationId" : "updateProtocolInFlow",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The flow business identifier",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "protocolId",
          "in" : "path",
          "description" : "the index of the protocol in a flow (ex: the first protocol has\n            index 1)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "_body",
          "in" : "query",
          "description" : "If the update should return the updated object.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The protocol was updated.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RProtocol"
                }
              }
            }
          },
          "400" : {
            "description" : "Illegal arguments."
          },
          "404" : {
            "description" : "The flow with given id or the protocol with the given index\n              does not exist."
          }
        },
        "summary" : "Updates protocol in flow",
        "description" : "\n\n <p>\n The protocol, direction, and properties fields are common to all\n sender/receiver product pairs:\n <ul>\n <li>Protocol - Can be PESIT, SFTP, HTTP, FTP</li>\n <li>Direction - Can be sender_pushes_files or reciever_pulls files</li>\n <li>Properties - Specific to each protocol</li>\n </ul>\n <ul>\n The general properties specific to PeSIT are:\n <li>securityPorfile: NONE, Mutual_authentication</li>\n <li>defaultIdentifier: string - the flow identifier from GUI</li>\n <li>networkProtocol: TCP, PTCP, UDT</li>\n </ul>\n The communication profiles for PeSIT are updated automatically, and are not\n mandatory in this API command. <br>\n If the protocol is not supported on some of the products in the flow\n connected by this protocol, the flow status becomes Saved and there is a\n warning in the GUI on the flow protocol. <br>\n You can use a simplified syntax for A2A flows, which is the result of GET\n /flows/{businessId}/protocols.\n </p><br><b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Flow</b>, action is <b>Modify</b>)",
        "tags" : [ "flows" ],
        "requestBody" : {
          "description" : "",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RProtocol"
              }
            }
          }
        }
      }
    },
    "/v2/flows/{businessId}/relays" : {
      "delete" : {
        "operationId" : "deleteAllRelaysInFlow",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The flow business identifier",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The relays were deleted.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          },
          "400" : {
            "description" : "Illegal arguments."
          },
          "404" : {
            "description" : "The flow with the given businessId does not exist."
          }
        },
        "summary" : "Deletes all relays in the given flow",
        "description" : "\n\n <p>\n When you remove a relay between entities A and B, the protocol between A and\n the relay becomes after deletion the protocol between A and B.\n <p><br><b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Flow</b>, action is <b>Modify</b>)",
        "tags" : [ "flows" ]
      },
      "get" : {
        "operationId" : "listRelaysInFlow",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "the flow business identifier",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "name",
          "in" : "query",
          "description" : "the name of the product used as relay",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The list was successfully obtained.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "items" : {
                    "$ref" : "#/components/schemas/RRelay"
                  },
                  "type" : "array"
                }
              }
            }
          },
          "400" : {
            "description" : "Illegal arguments."
          },
          "404" : {
            "description" : "The flow with the given business id does not exist"
          }
        },
        "summary" : "Retrieves a list of relays from the given flow",
        "description" : "\n\n <p>\n The business id of the relay is the position of the relay in the flow. The\n relay after the source has business id 1, the next relay has business id 2\n and so on. <br>\n If a relay is defined, GET will return information about the product in the\n relay. <br>\n A single relay can be retrieved if the name of the product is given as\n parameter. <br>\n If the product of the relay is not defined, the GET command will return only\n the relay id.\n </p><br><b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Flow</b>, action is <b>View</b>)",
        "tags" : [ "flows" ]
      },
      "post" : {
        "operationId" : "createRelayInFlow",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "the flow business identifier",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "_body",
          "in" : "query",
          "description" : "If the operation should return the added relay",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The relay was added",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RRelay"
                }
              }
            }
          },
          "400" : {
            "description" : "The product added as relay is already used as source or\n              target in the flow"
          },
          "404" : {
            "description" : "The flow with the given businessId does not exist. The\n              product with the given id and name does not exists"
          }
        },
        "summary" : "Creates a new relay in the given flow",
        "description" : "\n\n <p>\n To add a relay that is not yet set to a product, set the body to {}. <br>\n When the relay is set to a product, the business id of the product is\n mandatory. <br>\n A product used in a relay must not be already used in a source, target, or\n other relay. <br>\n When a relay is added between entities A and B, the protocol between the\n entities A and the relay will remain the same as the one that existed between\n A and B. The protocol after the relay is set to undefined. <br>\n You can use a simplified syntax for A2A flows, which is the result of GET\n /flows/{businessId}/relays\n </p><br><b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Flow</b>, action is <b>Modify</b>)",
        "tags" : [ "flows" ],
        "requestBody" : {
          "description" : "the relay to add",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RRelay"
              }
            }
          }
        }
      },
      "put" : {
        "operationId" : "updateAllRelaysInFlow",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The flow business identifier",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "_body",
          "in" : "query",
          "description" : "If the update should return the updated object.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The relays were updated.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RRelayList"
                }
              }
            }
          },
          "400" : {
            "description" : "Illegal arguments."
          },
          "404" : {
            "description" : "The flow with the given businessId does not exist."
          }
        },
        "summary" : "Updates all relays from the given flow",
        "description" : "\n\n <p>\n The syntax of the PUT command is an array of relays, each defined with an id\n and product.\n </p><br><b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Flow</b>, action is <b>Modify</b>)",
        "tags" : [ "flows" ],
        "requestBody" : {
          "description" : "The relays to update",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RRelayList"
              }
            }
          }
        }
      }
    },
    "/v2/flows/{businessId}/relays/{id}" : {
      "delete" : {
        "operationId" : "deleteRelayFromFlowById",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The flow business identifier",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "The name or index of the relay to delete (ex: the first relay has\n            index 1)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The relay was deleted.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          },
          "400" : {
            "description" : "Illegal arguments."
          },
          "404" : {
            "description" : "The flow with the given businessId does not exist. The\n              product with the given id and name does not exists"
          }
        },
        "summary" : "Deletes a relay from the given flow",
        "description" : "\n\n <p>\n When a relay between entities A and B is removed, the protocol between A and\n the relay becomes after deletion the protocol between A and B.\n </p><br><b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Flow</b>, action is <b>Modify</b>)",
        "tags" : [ "flows" ]
      },
      "get" : {
        "operationId" : "getRelayInFlowById",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "the flow business identifier",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "the index of the relay in a flow (ex: the first relay has index 1)",
          "required" : true,
          "schema" : {
            "format" : "int32",
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The relays was successfully obtained.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RRelay"
                }
              }
            }
          },
          "400" : {
            "description" : "Illegal arguments."
          },
          "404" : {
            "description" : "The flow with the given business id does not exist or the\n              relay with the given index does not exist"
          }
        },
        "summary" : "Retrieves a given relay.",
        "description" : " The id is the position of the relay in the flow<br><b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Flow</b>, action is <b>View</b>)",
        "tags" : [ "flows" ]
      },
      "head" : {
        "operationId" : "checkRelayExistsById",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The flow business id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "the index of the relay in a flow (ex: the first relay has index 1)",
          "required" : true,
          "schema" : {
            "format" : "int32",
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The relay with given index exists.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          },
          "404" : {
            "description" : "The flow with given id doesn't exist or the relay with the\n              given index does not exist"
          }
        },
        "summary" : "Checks if the given relay exists",
        "description" : "<b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Flow</b>, action is <b>View</b>)",
        "tags" : [ "flows" ]
      },
      "put" : {
        "operationId" : "updateRelayInFlowById",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The flow business identifier",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "The name or index of the relay to update (ex: the first relay has\n            index 1)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "_body",
          "in" : "query",
          "description" : "If the update should return the updated object.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The relay was added",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/REndpoint"
                }
              }
            }
          },
          "400" : {
            "description" : "The product added as relay is already used as source or\n              target in the flow"
          },
          "404" : {
            "description" : "The flow with the given businessId does not exist. The\n              product with the given id and name does not exists"
          }
        },
        "summary" : "Updates a relay from the given flow",
        "description" : "\n\n <p>\n Replaces a product in a specific relay with another product. <br>\n A product used in a relay must not be already used in a source, target, or\n other relay. <br>\n You can use a simplified syntax for A2A flows, which is the result of GET\n /flows/{businessId}/relays\n </p><br><b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Flow</b>, action is <b>Modify</b>)",
        "tags" : [ "flows" ],
        "requestBody" : {
          "description" : "The relay to update",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RRelay"
              }
            }
          }
        }
      }
    },
    "/v2/flows/{businessId}/sources" : {
      "get" : {
        "operationId" : "listFlowSourcesById",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The flow business id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The list was successfully obtained.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "items" : {
                    "$ref" : "#/components/schemas/REndpoint"
                  },
                  "type" : "array"
                }
              }
            }
          },
          "400" : {
            "description" : "Illegal arguments."
          },
          "404" : {
            "description" : "The flow with the given businessId doesn't exist."
          }
        },
        "summary" : "Retrieves the sources in a given flow.",
        "description" : "\n\n <p>\n The data retrieved includes properties common to all sources and an array of\n properties specific to each source. For example, if the source is an\n application with several Transfer CFTs, the response contains:\n <ul>\n <li>type - An application</li>\n <li>parts - An array of applications, each being contained in a -part-\n section</li>\n <li>properties - The transfer properties, file properties, and processing\n scripts</li>\n </ul>\n <br>\n For more information regarding the flow source or target properties, check\n the <b>API flow</b> column in the <b>Transfer CFT corresponding parameters >\n Flow configuration in Flow Manager and CFTUTIL</b> section from the\n User Guide.\n </p><br><b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Flow</b>, action is <b>View</b>)",
        "tags" : [ "flows" ]
      },
      "post" : {
        "operationId" : "addFlowCompleteSource",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The flow business id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "_body",
          "in" : "query",
          "description" : "If the operation should return all the sources in the flow.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The flow sources are successfully updated.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/REndpoint"
                }
              }
            }
          },
          "400" : {
            "description" : "The flow source is not valid."
          },
          "404" : {
            "description" : "The flow with the given businessId doesn't exist. Flow\n              sources do not exist or do not have the same type as the added\n              source"
          }
        },
        "summary" : "Adds a new source to the given flow.",
        "description" : " Body is required. Products are linked to\n the new source if they are specified in the body\n\n <p>\n This command can be used to add a source member, when the flow already\n contain at least one source member and thus the type and the common\n properties are already defined. <br>\n The JSON syntax differs from the one returned by GET; it has the content of a\n part added to the parts array. This command cannot change the source type.\n <br>\n Additionally, for PeSIT the properties are common to all sources and are not\n altered by this command. <br>\n It is possible to add a new application and to not link a product to it. To\n link a product to an application, use a dedicated API command: POST\n /flows/{businessId}/sources/{sourceId}/products/{productid} <br>\n See GET and POST /flows for more information on flow syntax. <br>\n For more information regarding the flow source or target properties, check\n the <b>API flow</b> column in the <b>Transfer CFT corresponding parameters >\n Flow configuration in Flow Manager and CFTUTIL</b> section from the\n User Guide.\n </p><br><b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Flow</b>, action is <b>Modify</b>)",
        "tags" : [ "flows" ],
        "requestBody" : {
          "description" : "The sources to add",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RPart"
              }
            }
          }
        }
      },
      "put" : {
        "operationId" : "updateFlowSourceById",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The flow business id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "_body",
          "in" : "query",
          "description" : "If the update should return the updated object.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The flow sources are successfully updated.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/REndpoint"
                }
              }
            }
          },
          "400" : {
            "description" : "The flow sources are not valid."
          },
          "404" : {
            "description" : "The flow with the given businessId doesn't exist."
          }
        },
        "summary" : "Updates the sources in the given flow",
        "description" : "\n\n <p>\n The JSON syntax is the same as the one returned by GET\n /flows/{businessId}/sources <br>\n You can replace the type, parts, and properties. The properties definition is\n not mandatory. <br>\n If the properties syntax is not correct, or the business id of the product\n linked to an application is not valid, only the valid part is taken into\n account. <br>\n See GET and POST /flows for more information on flow syntax. <br>\n For more information regarding the flow source or target properties, check\n the <b>API flow</b> column in the <b>Transfer CFT corresponding parameters >\n Flow configuration in Flow Manager and CFTUTIL</b> section from the\n User Guide.\n </p><br><b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Flow</b>, action is <b>Modify</b>)",
        "tags" : [ "flows" ],
        "requestBody" : {
          "description" : "The sources to update",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/REndpoint"
              }
            }
          }
        }
      }
    },
    "/v2/flows/{businessId}/sources/{applicationId}/products/{productId}" : {
      "delete" : {
        "operationId" : "unlinkFlowsSourceById",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The flow business id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "applicationId",
          "in" : "path",
          "description" : "The source application id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "productId",
          "in" : "path",
          "description" : "The product id to unlink",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The product was unlinked as source of the flow",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          },
          "400" : {
            "description" : "The identifiers are not valid or application is not a\n              source of a flow or product is not linked to the application"
          },
          "404" : {
            "description" : "The flow or application or product with the given\n              businessId do not exist"
          }
        },
        "summary" : "Deletes a product from flow sources",
        "description" : "<b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Flow</b>, action is <b>Modify</b>)",
        "tags" : [ "flows" ]
      },
      "post" : {
        "operationId" : "linkFlowSourceById",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The flow business id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "applicationId",
          "in" : "path",
          "description" : "The source application id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "productId",
          "in" : "path",
          "description" : "The product id to link",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The product was linked as source of the flow or product is\n              already linked to the application",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          },
          "400" : {
            "description" : "The identifiers are not valid or application is not a\n              source of a flow or product is not linked to the application"
          },
          "404" : {
            "description" : "The flow or application or product with the given\n              businessId do not exist"
          }
        },
        "summary" : "Adds a product as source to the given flow",
        "description" : "<b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Flow</b>, action is <b>Modify</b>)",
        "tags" : [ "flows" ]
      }
    },
    "/v2/flows/{businessId}/sources/{sourceId}" : {
      "delete" : {
        "operationId" : "deleteFlowSourceById",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The flow business id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "sourceId",
          "in" : "path",
          "description" : "The id of the source id to delete",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The flow source was deleted.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          },
          "400" : {
            "description" : "The component is not used as source of the flow"
          },
          "404" : {
            "description" : "The flow with the given businessId doesn't exist or the\n              communicable does not exist"
          }
        },
        "summary" : "Deletes a source in a flow",
        "description" : "<b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Flow</b>, action is <b>Modify</b>)",
        "tags" : [ "flows" ]
      },
      "post" : {
        "operationId" : "addFlowSource",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The flow business id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "sourceId",
          "in" : "path",
          "description" : "The id of the component to add",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The flow sources are successfully updated.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/REndpoint"
                }
              }
            }
          },
          "400" : {
            "description" : "The flow source to add is not valid."
          },
          "404" : {
            "description" : "The flow with the given businessId doesn't exist. Flow\n              sources do not exist or do not have the same type as the added\n              source"
          }
        },
        "summary" : "Adds a new source to the given flow.",
        "description" : " No body is required. The products of the\n new source are not linked automatically\n\n <p>\n If the source is an application, all of the products linked to the\n application are added to the flow as well.\n </p><br><b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Flow</b>, action is <b>Modify</b>)",
        "tags" : [ "flows" ]
      }
    },
    "/v2/flows/{businessId}/targets" : {
      "get" : {
        "operationId" : "listFlowTargets",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The flow business id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The list was successfully obtained.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "items" : {
                    "$ref" : "#/components/schemas/RFlow"
                  },
                  "type" : "array"
                }
              }
            }
          },
          "400" : {
            "description" : "Illegal arguments."
          },
          "404" : {
            "description" : "The flow with the given businessId doesn't exist."
          }
        },
        "summary" : "Retrieves the targets in a given flow.",
        "description" : "\n \n <p>\n The data retrieved includes properties common to all targets and an array of\n properties specific to each target. <br>\n For example, if the target is an application with several Transfer CFTs, the\n response contains:\n <ul>\n <li>type - An application</li>\n <li>parts - An array of applications, each being contained in a 'part'\n section</li>\n <li>properties - The transfer properties, file properties, and processing\n scripts</li>\n </ul>\n <br>\n For more information regarding the flow source or target properties, check\n the <b>API flow</b> column in the <b>Transfer CFT corresponding parameters >\n Flow configuration in Flow Manager and CFTUTIL</b> section from the\n User Guide.\n </p><br><b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Flow</b>, action is <b>View</b>)",
        "tags" : [ "flows" ]
      },
      "post" : {
        "operationId" : "addCompleteFlowTarget",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The flow business id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "_body",
          "in" : "query",
          "description" : "If the update should return the updated object.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The flow targets are successfully updated.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/REndpoint"
                }
              }
            }
          },
          "400" : {
            "description" : "The target to add is not valid."
          },
          "404" : {
            "description" : "The flow with the given businessId doesn't exist. Flow\n              targets do not exist or do not have the same type as the added\n              target"
          }
        },
        "summary" : "Adds a new target to the given flow.",
        "description" : " Body is required. Products are linked to\n the new target if they are specified in the body\n \n <p>\n This command can be used to add a target member, when the flow already\n contain at least one target member and thus the type and the common\n properties are already defined. <br>\n The JSON syntax differs from the one returned by GET; it has the content of a\n part added to the parts array. This command cannot change the target type.\n <br>\n Additionally, for PeSIT the properties are common to all targets and are not\n altered by this command. <br>\n It is possible to add a new application and to not link a product to it. To\n link a product to an application, use a dedicated API command: POST\n /flows/{businessId}/targets/{targetId}/products/{productid} <br>\n See GET and POST /flows for more information on flow syntax. <br>\n For more information regarding the flow source or target properties, check\n the <b>API flow</b> column in the <b>Transfer CFT corresponding parameters >\n Flow configuration in Flow Manager and CFTUTIL</b> section from the\n User Guide.\n </p><br><b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Flow</b>, action is <b>Modify</b>)",
        "tags" : [ "flows" ],
        "requestBody" : {
          "description" : "The targets to update",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RPart"
              }
            }
          }
        }
      },
      "put" : {
        "operationId" : "updateFlowTargetById",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The flow business id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "_body",
          "in" : "query",
          "description" : "If the update should return the updated object.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The flow targets are successfully updated.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/REndpoint"
                }
              }
            }
          },
          "400" : {
            "description" : "The flow targets are not valid."
          },
          "404" : {
            "description" : "The flow with the given businessId doesn't exist."
          }
        },
        "summary" : "Updates the targets in a given flow",
        "description" : "\n \n <p>\n The JSON syntax is the same as the one returned by GET\n /flows/{businessId}/targets <br>\n You can replace the type, parts, and properties. The properties definition is\n not mandatory. <br>\n If the properties syntax is not correct, or the business id of the product\n linked to an application is not valid, only the valid part is taken into\n account. <br>\n See GET and POST /flows for more information on flow syntax. <br>\n For more information regarding the flow source or target properties, check\n the <b>API flow</b> column in the <b>Transfer CFT corresponding parameters >\n Flow configuration in Flow Manager and CFTUTIL</b> section from the\n User Guide.\n </p><br><b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Flow</b>, action is <b>Modify</b>)",
        "tags" : [ "flows" ],
        "requestBody" : {
          "description" : "The targets to update",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/REndpoint"
              }
            }
          }
        }
      }
    },
    "/v2/flows/{businessId}/targets/{applicationId}/products/{productId}" : {
      "delete" : {
        "operationId" : "unlinkFlowProductTarget",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The flow business id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "applicationId",
          "in" : "path",
          "description" : "The source application id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "productId",
          "in" : "path",
          "description" : "The product id to unlink",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The product was unlinked as target of the flow",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          },
          "400" : {
            "description" : "The identifiers are not valid or application is not a\n              target of a flow or product is not linked to the application"
          },
          "404" : {
            "description" : "The flow or application or product with the given\n              businessId do not exist"
          }
        },
        "summary" : "Deletes a product from flow targets",
        "description" : "<b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Flow</b>, action is <b>Modify</b>)",
        "tags" : [ "flows" ]
      },
      "post" : {
        "operationId" : "linkFlowProductTarget",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The flow business id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "applicationId",
          "in" : "path",
          "description" : "The target application id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "productId",
          "in" : "path",
          "description" : "The product id to link",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The product was linked as target of the flow or product is\n              already linked to the application",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          },
          "400" : {
            "description" : "The identifiers are not valid or application is not a\n              target of a flow or product is not linked to the application"
          },
          "404" : {
            "description" : "The flow or application or product with the given\n              businessId do not exist"
          }
        },
        "summary" : "Adds a product as target to the given flow",
        "description" : "<b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Flow</b>, action is <b>Modify</b>)",
        "tags" : [ "flows" ]
      }
    },
    "/v2/flows/{businessId}/targets/{targetId}" : {
      "delete" : {
        "operationId" : "deleteFlowTargetById",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The flow business id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "targetId",
          "in" : "path",
          "description" : "The id of the target to delete",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The flow target was deleted.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          },
          "400" : {
            "description" : "The component is not used as target of the flow"
          },
          "404" : {
            "description" : "The flow with the given businessId doesn't exist or the\n              communicable does not exist"
          }
        },
        "summary" : "Deletes a target in a flow",
        "description" : "<b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Flow</b>, action is <b>Modify</b>)",
        "tags" : [ "flows" ]
      },
      "post" : {
        "operationId" : "addFlowTarget",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The flow business id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "targetId",
          "in" : "path",
          "description" : "The id of the target to add",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The flow targets are successfully updated.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/REndpoint"
                }
              }
            }
          },
          "400" : {
            "description" : "The target to add is not valid."
          },
          "404" : {
            "description" : "The flow with the given businessId doesn't exist. Flow\n              targets do not exist or do not have the same type as the added\n              target"
          }
        },
        "summary" : "Adds a new target to the given flow.",
        "description" : " No body is required. The products of the\n new target are not linked automatically\n \n <p>\n If the target is an application, all of the products linked to the\n application are added as well.\n </p><br><b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Flow</b>, action is <b>Modify</b>)",
        "tags" : [ "flows" ]
      }
    },
    "/v2/flowtemplates" : {
      "delete" : {
        "operationId" : "deleteFlowTemplateByFilter",
        "parameters" : [ {
          "name" : "name",
          "in" : "query",
          "description" : "Search for flow templates having this name. Enclose the search value in\n            special character % to filter items containing this value.\n            Add % after the search value to filter items starting with this value.\n            Add % before the search value to filter items ending with this value.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "businessId",
          "in" : "query",
          "description" : "The business ids of the Flow Templates to delete. Can delete multiple items.",
          "required" : false,
          "schema" : {
            "items" : {
              "type" : "string"
            },
            "type" : "array"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Flow Templates were deleted.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          },
          "400" : {
            "description" : "Name and Business ids are empty or invalid."
          }
        },
        "summary" : "Deletes a list of Flow Templates.",
        "description" : "Access enforcement <b>always performed</b> (resource is <b>Flow_Template</b>, action is <b>Delete</b>)",
        "tags" : [ "flowtemplates" ]
      },
      "get" : {
        "operationId" : "listFlowTemplates",
        "parameters" : [ {
          "name" : "search",
          "in" : "query",
          "description" : "Search for flow templates containing this value\n            in 'name', 'description', 'flowPatternName' or in 'tags'.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "name",
          "in" : "query",
          "description" : "Search for flow templates having this name. Enclose the search value in\n            special character % to filter items containing this value.\n            Add % after the search value to filter items starting with this value.\n            Add % before the search value to filter items ending with this value.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "tags",
          "in" : "query",
          "description" : "Search for flow templates having this tag. Enclose the search value in\n            special character % to filter items containing this value.\n            Add % after the search value to filter items starting with this value.\n            Add % before the search value to filter items ending with this value.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "status",
          "in" : "query",
          "description" : "Search for flow templates having this status. Possible values: SAVED,\n            PUBLISHING, PUBLISHED, PUBLISHED_IN_ERROR, UNPUBLISHING, UNPUBLISHED_IN_ERROR",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "flowPatternName",
          "in" : "query",
          "description" : "Search for flow templates having this flow pattern. Enclose the search value in\n            special character % to filter items containing this value.\n            Add % after the search value to filter items starting with this value.\n            Add % before the search value to filter items ending with this value.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "memberType",
          "in" : "query",
          "description" : "Search for flow templates having this member type. Parameter 'memberType'\n            can be one of: APPLICATION, PARTNER, HYBRID, CFT or SecureTransport.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "memberPosition",
          "in" : "query",
          "description" : "Search for flow templates having this member position. Parameter\n            'memberPosition' can be one of: SOURCE, TARGET, RELAY.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "protocol",
          "in" : "query",
          "description" : "Search for flow templates having this protocol in the flow template.\n            Protocol can be one of: PESIT, SFTP, FTP, HTTP.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Get flow templates starting from the specified offset\n            in the list of records returned by the database.\n            If not set, offset defaults to 0. Legal values: 0 <= offset <= 2147483647",
          "required" : false,
          "schema" : {
            "format" : "int64",
            "type" : "integer"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of items returned per request.",
          "required" : false,
          "schema" : {
            "format" : "int64",
            "type" : "integer"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "Sort flow templates using a specific field from result record.\n            Use in conjunction with 'ascending' parameter.\n            Valid values are: name, status, flowPatternName, changeDate, creationDate.\n            It defaults to 'changeDate'.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ascending",
          "in" : "query",
          "description" : "Use in conjunction with 'sort' parameter.\n            Defaults to 'false' - descending order.\n            Sort defaults to 'changeDate' - (if none of 'sort' or 'ascending'\n            are set, the latest modified flow templates will be returned first).",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "_brief",
          "in" : "query",
          "description" : "Flag indicating what properties to be returned. Default value is false\n            to return all the properties of the flow template. Use true for just\n            the basic properties.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "X-EncryptionKey",
          "in" : "header",
          "description" : "",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Body containing the list of filtered flow templates.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "items" : {
                    "$ref" : "#/components/schemas/RFlowTemplate"
                  },
                  "type" : "array"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid offset, limit, sort criteria or invalid status to search for.\n                   See swagger documentation for available options."
          }
        },
        "summary" : "Retrieves a list of Flow Templates.",
        "description" : "Access enforcement <b>always performed</b> (resource is <b>Flow_Template</b>, action is <b>View</b>)",
        "tags" : [ "flowtemplates" ]
      },
      "post" : {
        "operationId" : "createFlowTemplate",
        "parameters" : [ {
          "name" : "_body",
          "in" : "query",
          "description" : "Controls if the body of the created object is returned in the response. Default value is true.",
          "required" : false,
          "schema" : {
            "example" : {
              "summary" : "genericFlowTemplate",
              "value" : {
                "description" : "template created from Swagger UI",
                "enrollmentParameters" : {
                  "properties" : { },
                  "type" : "object"
                },
                "flowPatternConfigurations" : {
                  "application_name" : "Paris_Invoices",
                  "application_product_name" : "cft_docker_0",
                  "flow_description" : "SFTP partner to internal CFT by ST",
                  "flow_name" : "Flow_${enrollment.participant.name}",
                  "relay_to_target_ack_profile_name" : "Private_Host_PESIT_plain",
                  "relay_to_target_receiver_profile_name" : "TCP1_PESIT1",
                  "relay_to_target_sender_profile_name" : "Private_Host_PESIT_plain_Client",
                  "routing_base_directory" : "Dir_${enrollment.participant.name}",
                  "source_protocol_sftp_auth_mode" : "password_or_public_key",
                  "source_protocol_sftp_transfer_mode" : "AUTODETECT",
                  "source_relay_onFailure_action" : "delete",
                  "source_to_relay_receiver_profile_name" : "Private_host_SSH_SFTP",
                  "st_relay_name" : "SecureTransport",
                  "target_prop_ack_script" : "default",
                  "target_prop_ack_script_file_usage" : "existing_file",
                  "target_prop_ack_script_state" : "IGNORE",
                  "target_prop_error_script" : "default",
                  "target_prop_error_script_file_usage" : "existing_file",
                  "target_prop_post_script" : "default",
                  "target_prop_post_script_file_usage" : "existing_file",
                  "target_protocol_pesit_ack_enabled" : "false",
                  "target_protocol_pesit_compression" : "0",
                  "target_protocol_pesit_flow_idf" : "IDF_${enrollment.participant.name}",
                  "target_protocol_pesit_net_protocol" : "TCP",
                  "target_protocol_pesit_security" : "NONE",
                  "target_relay_filefilter_type" : "glob"
                },
                "flowPatternName" : "SFTP_PUSH_ST_PESIT_PUSH_CFT_APP",
                "name" : "template example",
                "participantProfiles" : [ "login_password" ],
                "serviceDescription" : "## Service description\n\rCR\n\r## How to use?\n\rTo use this service, your partner needs to connect via SFTP to the following server:\n\r Host : 172.18.0.5\n\r* Port : 8822\n\rAuthentication is based on SSH keys, which can be imported or updated in the \"Apps\" menu.\n\rThe ZIP file containing all invoices needs to be uploaded in the *Dir_<Partner Name>* folder.{*}",
                "status" : "SAVED",
                "version" : "1"
              }
            },
            "type" : "boolean"
          }
        }, {
          "name" : "X-EncryptionKey",
          "in" : "header",
          "description" : "X-EncryptionKey encryption key used for passwords",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "publish",
          "in" : "query",
          "description" : "True if the flow template should also be published. Default value is false.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "The flow template was successfully created.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RFlowTemplate"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid arguments."
          },
          "409" : {
            "description" : "A flow template with the same name already exists."
          },
          "500" : {
            "description" : "Internal server error."
          }
        },
        "summary" : "Creates a Flow Template.",
        "description" : "Access enforcement <b>always performed</b> (resource is <b>Flow_Template</b>, action is <b>Create</b>)",
        "tags" : [ "flowtemplates" ],
        "requestBody" : {
          "description" : "The Flow Template to create",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RFlowTemplate"
              }
            }
          }
        }
      }
    },
    "/v2/flowtemplates/forcedeletebox" : {
      "delete" : {
        "operationId" : "forcedeleteFlowTemplateByFilter",
        "parameters" : [ {
          "name" : "name",
          "in" : "query",
          "description" : "Search for flow templates having this name. Enclose the search value in\n            special character % to filter items containing this value.\n            Add % after the search value to filter items starting with this value.\n            Add % before the search value to filter items ending with this value.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "businessId",
          "in" : "query",
          "description" : "",
          "required" : false,
          "schema" : {
            "items" : {
              "type" : "string"
            },
            "type" : "array"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Flow Templates were deleted.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          },
          "400" : {
            "description" : "Name and Business ids are empty or invalid."
          }
        },
        "summary" : "Force deletes a list of Flow Templates.",
        "description" : "Access enforcement <b>always performed</b> (resource is <b>Flow_Template</b>, action is <b>Force_Delete</b>)",
        "tags" : [ "flowtemplates" ]
      }
    },
    "/v2/flowtemplates/publishbox" : {
      "post" : {
        "operationId" : "publishFlowTemplates",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "The publish request has been completed.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Map"
                }
              }
            }
          },
          "400" : {
            "description" : "Business ids is empty or invalid."
          }
        },
        "summary" : "Publish a list of flow templates.",
        "description" : "\n\n <p>\n The response specifies the result of the operation on each flow template.\n </p>Access enforcement <b>always performed</b> (resource is <b>Flow_Template</b>, action is <b>Publish</b>)",
        "tags" : [ "flowtemplates" ],
        "requestBody" : {
          "description" : "A publish box containing an array of flow template business ids to publish sent in the body of the request",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RPublishBox"
              }
            }
          }
        }
      }
    },
    "/v2/flowtemplates/unpublishbox" : {
      "post" : {
        "operationId" : "unpublishFlowTemplates",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "The unpublish request has been completed.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Map"
                }
              }
            }
          },
          "400" : {
            "description" : "Business ids is empty or invalid."
          }
        },
        "summary" : "Unpublish a list of flow templates.",
        "description" : "\n\n <p>\n The response specifies the result of the operation on each flow template.\n </p>Access enforcement <b>always performed</b> (resource is <b>Flow_Template</b>, action is <b>Unpublish</b>)",
        "tags" : [ "flowtemplates" ],
        "requestBody" : {
          "description" : "A unpublish box containing an array of flow template business ids to unpublish sent in the body of the request",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RPublishBox"
              }
            }
          }
        }
      }
    },
    "/v2/flowtemplates/{businessId}" : {
      "get" : {
        "operationId" : "getFlowTemplateById",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The business id of the Flow Template",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "X-EncryptionKey",
          "in" : "header",
          "description" : "",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "_promote",
          "in" : "query",
          "description" : "Flag that indicates if the template is for promotion, false if the template is not for promotion. Default value is false.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The flow template exists.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RFlowTemplate"
                }
              }
            }
          },
          "404" : {
            "description" : "The flow template does not exist."
          }
        },
        "summary" : "Retrieves a Flow Template, searching by a provided business id.",
        "description" : "\n <br/>Access enforcement <b>always performed</b> (resource is <b>Flow_Template</b>, action is <b>View</b>)",
        "tags" : [ "flowtemplates" ]
      },
      "put" : {
        "operationId" : "updateFlowTemplateById",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The flow template business id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "_body",
          "in" : "query",
          "description" : "If the update should return the updated object.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "X-EncryptionKey",
          "in" : "header",
          "description" : "",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "publish",
          "in" : "query",
          "description" : "True if the flow template should be also published. If the flow template is not published, the subscriptions are not deployed. Default value is false.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "deploy",
          "in" : "query",
          "description" : "True if the flow template subscriptions should be also deployed. Taken into consideration only if the flow template is published. Default value is false.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The flow template is successfully updated.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RFlowTemplate"
                }
              }
            }
          },
          "400" : {
            "description" : "The flow template fields are not valid."
          },
          "404" : {
            "description" : "The flow template with the given businessId doesn't exist."
          }
        },
        "summary" : "Updates a flow template.",
        "description" : "\n\n <p>\n PUT is idempotent, so PUT requests you MUST send all the available\n properties/values, not just the ones you want to change. <br>\n It is a good practice to query for a flow template, modify what needed\n and then resend the whole flow template.\n </p>Access enforcement <b>always performed</b> (resource is <b>Flow_Template</b>, action is <b>Modify</b>)",
        "tags" : [ "flowtemplates" ],
        "requestBody" : {
          "description" : "The flow template to update.",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RFlowTemplate"
              }
            }
          }
        }
      }
    },
    "/v2/flowtemplates/{businessId}/subscriptionschema" : {
      "get" : {
        "operationId" : "getFlowTemplateSubscriptionSchema",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The business id of the Flow Template",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The flow template exists.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Map"
                }
              }
            }
          },
          "404" : {
            "description" : "The flow template does not exist."
          }
        },
        "summary" : "Retrieves a Flow Template subscription schema, searching template by a provided business id.",
        "description" : "\n <br/>Access enforcement <b>always performed</b> (resource is <b>Flow_Template</b>, action is <b>View</b>)",
        "tags" : [ "flowtemplates" ]
      }
    },
    "/v2/flowtemplates/{name}/{version}" : {
      "get" : {
        "operationId" : "getFlowTemplateByNameAndVersion",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "The name of the Flow Template",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "version",
          "in" : "path",
          "description" : "The version of the Flow Template",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "X-EncryptionKey",
          "in" : "header",
          "description" : "",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The flow template exists.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RFlowTemplate"
                }
              }
            }
          },
          "400" : {
            "description" : "Request parameter values are invalid."
          },
          "404" : {
            "description" : "The flow template does not exist."
          }
        },
        "summary" : "Retrieves a Flow Template, searching by provided name and version.",
        "description" : "\n <br/>Access enforcement <b>always performed</b> (resource is <b>Flow_Template</b>, action is <b>View</b>)",
        "tags" : [ "flowtemplates" ]
      }
    },
    "/v2/partners" : {
      "delete" : {
        "operationId" : "deletePartnerByFilter",
        "parameters" : [ {
          "name" : "name",
          "in" : "query",
          "description" : "Search for partners having this name. Enclose the search value in\n            special character % to filter items containing this value.\n            Add % after the search value to filter items starting with this value.\n            Add % before the search value to filter items ending with this value.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "businessId",
          "in" : "query",
          "description" : "The business id of the partner to delete. Can delete multiple\n            items. If no parameter is given, all partners are removed. Use\n            parameters to narrow the list of partners to be deleted.",
          "required" : false,
          "schema" : {
            "items" : {
              "type" : "string"
            },
            "type" : "array"
          }
        }, {
          "name" : "_forced",
          "in" : "query",
          "description" : "To force deleting the partner and apply the impacts on flows.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Partners with the given business ids were deleted.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          },
          "400" : {
            "description" : "Delete request must contain at least one criteria."
          },
          "412" : {
            "description" : "Deleting the partners has an impact on flows. To perform\n              the operation regardless of its impact, set the _forced\n              parameter to true."
          }
        },
        "summary" : "Deletes a list of partners.",
        "description" : "<b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Partner</b>, action is <b>Delete</b>)",
        "tags" : [ "partners" ]
      },
      "get" : {
        "operationId" : "listPartners",
        "parameters" : [ {
          "name" : "name",
          "in" : "query",
          "description" : "Search for partners having this name. Enclose the search value in\n            special character % to filter items containing this value.\n            Add % after the search value to filter items starting with this value.\n            Add % before the search value to filter items ending with this value.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "tags",
          "in" : "query",
          "description" : "Search for partners having this tag. Enclose the search value in\n            special character % to filter items containing this value.\n            Add % after the search value to filter items starting with this value.\n            Add % before the search value to filter items ending with this value.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "customAttributeFilter",
          "in" : "query",
          "description" : "Search for partners having this custom attribute filter. Sample\n            filter: customAttrName1=value1&customAttrName2=value2",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Get partners starting from the specified offset\n            in the list of records returned by the database.\n            If not set, offset defaults to 0. Legal values: 0 <= offset <= 2147483647",
          "required" : false,
          "schema" : {
            "format" : "int64",
            "type" : "integer"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of items returned per request.",
          "required" : false,
          "schema" : {
            "format" : "int64",
            "type" : "integer"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "Sort partners using a specific field from result record.\n            Valid values are : name, email, phone, city, state, country.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ascending",
          "in" : "query",
          "description" : "Sort partners in ascending order if sortingCriteria\n            is not empty and ascending is true.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "_brief",
          "in" : "query",
          "description" : "Flag indicating that all the properties of the partner must be\n            returned or just selected properties.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "search",
          "in" : "query",
          "description" : "Search for partners containing this value in 'name',\n \t          'description, 'contacts.city', 'contacts.email', 'country' or in 'tags'.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "X-EncryptionKey",
          "in" : "header",
          "description" : "header X-EncryptionKey encryption key used for private key in\n            base64 format. If not present the password will not be returned.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Body contains the list of filtered partners.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "items" : {
                    "$ref" : "#/components/schemas/RPartner"
                  },
                  "type" : "array"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid offset, custom attribute filter, limit or sort criteria. See swagger documentation for available options."
          }
        },
        "summary" : "Retrieves a list of partners.",
        "description" : "\n\n <p>\n Partners contain general information (name, type) and server communication\n profiles. <br>\n Server communication profiles can have the protocol PeSIT, SFTP, FTP or HTTP.\n <br>\n A partner can be used in a flow as source or target. Depending on the\n direction of the protocol the partner can play the role of client or server.\n The client initiates the transfer. For example, if the direction of the\n protocol between source and relay is sender pushes files, the source is\n initiator and thus is a client. If the direction is receiver pulls files, the\n client is the relay. <br>\n In order to define the client/server communication parameters, a client\n communication profile and a server communication profile have to be defined\n for each pair of interacting products in the flow. <br>\n In GUI the server communication profiles are defined in the partner. <br>\n In GUI the client communication profiles are defined during flow creation.\n <br>\n In APIs client and server communication profiles of a partner are typically\n handled in the /partners resource. GET /partners retrieves client and server\n communication profiles associated with each partner.\n </p><br><b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Partner</b>, action is <b>View</b>)",
        "tags" : [ "partners" ]
      },
      "post" : {
        "operationId" : "createPartner",
        "parameters" : [ {
          "name" : "_body",
          "in" : "query",
          "description" : "Controls if the body of the created object is returned in the\n            response. Default value is <code>true</code>.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "X-EncryptionKey",
          "in" : "header",
          "description" : "header X-EncryptionKey encryption key used for private key in\n            base64 format. If not present the password will not be returned.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "The partner was successfully created.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RPartner"
                }
              }
            }
          },
          "400" : {
            "description" : "The partner fields are not valid."
          },
          "403" : {
            "description" : "The user does no have right to create partners\n              (Resource=Partner, Action=Create)."
          },
          "409" : {
            "description" : "A partner with the same name already exists."
          }
        },
        "summary" : "Creates a new partner.",
        "description" : "\n\n <p>\n  For the JSON syntax see GET /partners <br>\n See POST /partner/{businessId}/communicationprofiles and GET /partners for\n more information.\n </p><br><b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Partner</b>, action is <b>Create</b>)",
        "tags" : [ "partners" ],
        "requestBody" : {
          "description" : "The partner to create.",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RPartner"
              }
            }
          }
        }
      }
    },
    "/v2/partners/{businessId}" : {
      "delete" : {
        "operationId" : "deletePartnerById",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The partner's business id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "_forced",
          "in" : "query",
          "description" : "To force deleting the partner and apply the impacts on flows.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Partner with the given business id was deleted.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid arguments."
          },
          "404" : {
            "description" : "Partner with the given businessId doesn't exist."
          },
          "412" : {
            "description" : "Deleting the partner has an impact on flows. To perform the\n              operation regardless of its impact, set the _forced parameter to\n              true."
          }
        },
        "summary" : "Deletes a partner.",
        "description" : "<b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Partner</b>, action is <b>Delete</b>)",
        "tags" : [ "partners" ]
      },
      "get" : {
        "operationId" : "getPartnerById",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The business id of the partner.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "X-EncryptionKey",
          "in" : "header",
          "description" : "header X-EncryptionKey encryption key used for private key in\n            base64 format. If not present the password will not be returned.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The partner exists.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RPartner"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid arguments."
          },
          "404" : {
            "description" : "The partner does not exist."
          }
        },
        "summary" : "Retrieves a given partner.",
        "description" : "\n\n <p>\n For more information about partners, see GET /partners.\n </p><br><b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Partner</b>, action is <b>View</b>)",
        "tags" : [ "partners" ]
      },
      "head" : {
        "operationId" : "partnerExists",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The partner business id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The partner with given id exists.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          },
          "404" : {
            "description" : "The partner with given id doesn't exist."
          }
        },
        "summary" : "Checks if the given partner exists.",
        "description" : "<b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Partner</b>, action is <b>View</b>)",
        "tags" : [ "partners" ]
      },
      "put" : {
        "operationId" : "updatePartnerById",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The partner business id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "_body",
          "in" : "query",
          "description" : "If the update should return the updated object.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "_forced",
          "in" : "query",
          "description" : "To force updating the partner and apply the impacts on flows.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "X-EncryptionKey",
          "in" : "header",
          "description" : "header X-EncryptionKey encryption key used for private key in\n            base64 format",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The partner is successfully updated.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RPartner"
                }
              }
            }
          },
          "400" : {
            "description" : "The partner fields are not valid."
          },
          "404" : {
            "description" : "The partner with the given businessId doesn't exist."
          },
          "412" : {
            "description" : "The update of the partner has an impact on flows. To\n              perform the operation regardless of its impact, set the _forced\n              parameter to true."
          }
        },
        "summary" : "Updates a partner.",
        "description" : "\n\n <p>\n PUT is idempotent, so PUT requests you MUST send all the available\n properties/values , not just the ones you want to change. <br>\n It is a good practice to query for a partner, modify what needed and then\n resend the whole partner. <br>\n Communication profiles not present in the partner will be deleted. <br>\n For more information about partner update rules, see PUT\n /partners/{businessId}/communicationprofiles/{cpid}.\n </p><br><b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Partner</b>, action is <b>Modify</b>)",
        "tags" : [ "partners" ],
        "requestBody" : {
          "description" : "The partner to update.",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RPartner"
              }
            }
          }
        }
      }
    },
    "/v2/partners/{businessId}/certificates" : {
      "delete" : {
        "operationId" : "deletePartnerCertificateByNameOrIds",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The business id of the partner.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "name",
          "in" : "query",
          "description" : "The certificate name. Two certificates cannot have the same name.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "businessId",
          "in" : "query",
          "description" : "The business id of the certificates to delete. Can delete multiple items.",
          "required" : false,
          "schema" : {
            "items" : {
              "type" : "string"
            },
            "type" : "array"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The partner exists and the certificate is removed"
          },
          "400" : {
            "description" : "Use at least one filter"
          },
          "404" : {
            "description" : "The partner does not exist or when the certificate does not\n              exists on the given partner"
          }
        },
        "summary" : "Remove a certificate given by name or business ids for a given partner.",
        "description" : "<b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Partner</b>, action is <b>Modify</b>)",
        "tags" : [ "partners" ]
      },
      "get" : {
        "operationId" : "getPartnertCertificatesByIdAndName",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The business id of the partner.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "name",
          "in" : "query",
          "description" : "Search for the certificate having this name. Two certificates\n            cannot have the same alias.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The partner exists and the list of certificates will be\n              returned.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "items" : {
                    "$ref" : "#/components/schemas/RCertificateCredential"
                  },
                  "type" : "array"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid arguments."
          },
          "404" : {
            "description" : "The partner does not exist."
          }
        },
        "summary" : "Retrieves a list of certificates for a given partner.",
        "description" : "<b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Partner</b>, action is <b>View</b>)",
        "tags" : [ "partners" ]
      },
      "post" : {
        "operationId" : "createPartnerCertificate",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The id of the partner that will contain the certificate.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "_body",
          "in" : "query",
          "description" : "Controls if the body of the created object is returned in the\n            response. Default value is <code>true</code>.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "The certificate was successfully created.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RCertificateCredential"
                }
              }
            }
          },
          "400" : {
            "description" : "The certificate fields are not valid."
          },
          "403" : {
            "description" : "The user does no have right to create the certificate"
          },
          "404" : {
            "description" : "The partner identified by partnerID does not exist."
          },
          "500" : {
            "description" : "Internal server error."
          }
        },
        "summary" : "Creates a new Certificate for a partner.",
        "description" : "<b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Partner</b>, action is <b>Modify</b>)",
        "tags" : [ "partners" ],
        "requestBody" : {
          "description" : "The Certificate to create.",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RCertificateCredential"
              }
            }
          }
        }
      }
    },
    "/v2/partners/{businessId}/certificates/{certificateId}" : {
      "delete" : {
        "operationId" : "deletePartnerCertificateById",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The business id of the partner.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "certificateId",
          "in" : "path",
          "description" : "The certificate id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The partner exists and the certificate is removed"
          },
          "400" : {
            "description" : "Invalid arguments."
          },
          "404" : {
            "description" : "The partner does not exist."
          }
        },
        "summary" : "Remove a certificate given by id for a given partner.",
        "description" : "<b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Partner</b>, action is <b>Modify</b>)",
        "tags" : [ "partners" ]
      },
      "get" : {
        "operationId" : "getPartnerCertificatesById",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The business id of the partner.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "certificateId",
          "in" : "path",
          "description" : "The certificate id. Two certificates cannot have the same name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The partner exists and the certificate exists"
          },
          "400" : {
            "description" : "Invalid arguments."
          },
          "404" : {
            "description" : "The partner does not exist."
          }
        },
        "summary" : "Retrieve certificate given by id for a given partner.",
        "description" : "<b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Partner</b>, action is <b>View</b>)",
        "tags" : [ "partners" ]
      },
      "put" : {
        "operationId" : "updatePartnerCertificateContentById",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The id of the partner that contains the certificate.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "certificateId",
          "in" : "path",
          "description" : "The certificate id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "_forced",
          "in" : "query",
          "description" : "To force updating the partner certificate and apply the impacts on\n            flows.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "_body",
          "in" : "query",
          "description" : "Controls if the body of the created object is returned in the\n            response. Default value is <code>true</code>.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The certificate was successfully updated.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RCertificateCredential"
                }
              }
            }
          },
          "400" : {
            "description" : "The certificate fields are not valid."
          },
          "403" : {
            "description" : "The user does no have right to update the certificate"
          },
          "404" : {
            "description" : "The partner identified by partnerId does not exist or the\n              certificate identified by certificateId does not exists."
          },
          "412" : {
            "description" : "The update of the partner certificate has an impact on\n              flows. To perform the operation regardless of its impact, set\n              the _forced parameter to true."
          },
          "500" : {
            "description" : "Internal server error."
          }
        },
        "summary" : "Updates an existing certificate credential for a partner.",
        "description" : "<b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Partner</b>, action is <b>Modify</b>)",
        "tags" : [ "partners" ],
        "requestBody" : {
          "description" : "The Certificate to be updated.",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RCertificateCredential"
              }
            }
          }
        }
      }
    },
    "/v2/partners/{businessId}/communicationprofiles" : {
      "delete" : {
        "operationId" : "deletePartnerComprofileByFilter",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The partner business id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "businessId",
          "in" : "query",
          "description" : "",
          "required" : false,
          "schema" : {
            "items" : {
              "type" : "string"
            },
            "type" : "array"
          }
        }, {
          "name" : "name",
          "in" : "query",
          "description" : "The communication profile name. Enclose the search value in\n            special character % to filter items containing this value.\n            Add % after the search value to filter items starting with this value.\n            Add % before the search value to filter items ending with this value.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "The type of the communication profile: CLIENT or SERVER.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "protocol",
          "in" : "query",
          "description" : "The protocol of the communication profile.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "_forced",
          "in" : "query",
          "description" : "To force deleting the partner communication profile and apply the\n            impacts on flows.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid arguments."
          },
          "404" : {
            "description" : "Communication profile with a given business id doesn't\n              exist."
          },
          "412" : {
            "description" : "Deleting partner's communication profiles has an impact on\n              flows. To perform the operation regardless of its impact, set\n              the _forced parameter to true."
          }
        },
        "summary" : "Deletes a list of partner communication profiles.",
        "description" : "<b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Partner</b>, action is <b>Modify</b>)",
        "tags" : [ "partners" ]
      },
      "get" : {
        "operationId" : "listPartnerComprofiles",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The business id of the partner.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "name",
          "in" : "query",
          "description" : "The name of the communication profile. Enclose the search value in\n            special character % to filter items containing this value.\n            Add % after the search value to filter items starting with this value.\n            Add % before the search value to filter items ending with this value.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "The type of the communication profile. Possible values : CLIENT,\n            SERVER.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "protocol",
          "in" : "query",
          "description" : "The protocol of the communication profile. Possible values :\n            PESIT, FTP, SFTP, HTTP.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "_brief",
          "in" : "query",
          "description" : "Retrieve full properties.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "fipsEnabled",
          "in" : "query",
          "description" : "Fips is enabled.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "sslTls",
          "in" : "query",
          "description" : "The SSL/TLS option (for PESIT/FTP/HTTP). Possible values : None,\n            Client_Optional, Server_Only, Mutual_Authentication.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "networkProtocol",
          "in" : "query",
          "description" : "The network protocol (for Pesit : TCP, pTCP or UDT). Possible\n            values : TCP, pTCP, UDT.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "securityMode",
          "in" : "query",
          "description" : "The security mode (for FTP). Possible values : Explicit, Implicit.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "connectionMode",
          "in" : "query",
          "description" : "The connection mode (for FTP). Possible values : Passive, Active.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "httpMethodToCheck",
          "in" : "query",
          "description" : "The network protocol method (for HTTP). Possible values : PUT,\n            POST, GET.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "clientAuthentication",
          "in" : "query",
          "description" : "The client authentication option (for SFTP). Possible values :\n            PUBLIC_KEY, PASSWORD, PASSWORD_OR_PUBLIC_KEY.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "description",
          "in" : "query",
          "description" : "the description of the ComProfile.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "tags",
          "in" : "query",
          "description" : "The tags of the communication profiles. You can select multiple\n            items.",
          "required" : false,
          "schema" : {
            "items" : {
              "type" : "string"
            },
            "type" : "array"
          }
        }, {
          "name" : "customAttributeFilter",
          "in" : "query",
          "description" : "Search for comprofiles having this custom attribute filter. Sample\n            filter: customAttrName1=value1&customAttrName2=value2",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "X-EncryptionKey",
          "in" : "header",
          "description" : "header X-EncryptionKey encryption key used for private key in\n            base64 format.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Body contains the list of filtered communication profiles\n \t            for the given partner.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "items" : {
                    "$ref" : "#/components/schemas/RComProfile"
                  },
                  "type" : "array"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid arguments."
          },
          "404" : {
            "description" : "Resource not found."
          }
        },
        "summary" : "Retrieves communication profiles from the given partner.",
        "description" : "\n\n <p>\n For more information about partner communication profiles check GET /partners\n </p><br><b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Partner</b>, action is <b>View</b>)",
        "tags" : [ "partners" ]
      },
      "post" : {
        "operationId" : "createPartnerComprofile",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The business id of the partner.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "_body",
          "in" : "query",
          "description" : "Controls if the body of the created object is returned in the\n            response. Default value is <code>true</code>.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "X-EncryptionKey",
          "in" : "header",
          "description" : "header X-EncryptionKey encryption key used for private key in\n            base64 format. If not present the password will not be returned.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "The partner com profile was successfully created.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RComProfile"
                }
              }
            }
          },
          "400" : {
            "description" : "The communication profile fields are not valid."
          },
          "403" : {
            "description" : "The user does no have rights to create partners\n              communication profiles (Resource=Partner, Action=Modify)."
          },
          "404" : {
            "description" : "Resource not found."
          },
          "409" : {
            "description" : "A communication profile with the same name already exists."
          }
        },
        "summary" : "Adds a new communication profile to the given partner.",
        "description" : "\n\n <p>\n Creates a server or client communication profile for the partner. <br>\n For more information about client/server communication profiles, see GET\n /partners and PUT /partners/{businessId}/communicationprofiles/{cpid}.\n </p><br><b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Partner</b>, action is <b>Modify</b>)",
        "tags" : [ "partners" ],
        "requestBody" : {
          "description" : "The communication profile to create.",
          "required" : true,
          "content" : {
            "application/json" : {
              "examples" : {
                "ftpClientComprofileSSLDisabled" : {
                  "summary" : "ftpClientComprofileSSLDisabled",
                  "value" : {
                    "connectionModes" : [ "PASSIVE" ],
                    "enableSSL" : false,
                    "enabled" : true,
                    "fipsEnabled" : false,
                    "login" : "login_ccp1",
                    "name" : "ftp_ccp_noone",
                    "password" : "password_ccp1",
                    "protocol" : "FTP",
                    "serverCertificateVerified" : false,
                    "type" : "CLIENT"
                  }
                },
                "ftpClientComprofileSSLEnabledCertificate" : {
                  "summary" : "ftpClientComprofileSSLEnabledCertificate",
                  "value" : {
                    "certificateAlias" : "certificate2.crt",
                    "connectionModes" : [ "PASSIVE" ],
                    "enableSSL" : true,
                    "enabled" : true,
                    "fipsEnabled" : false,
                    "isPrivateCertificate" : false,
                    "login" : "ccp3_login",
                    "name" : "ftp_with_login_and_certificate",
                    "password" : "password_ccp3",
                    "protocol" : "FTP",
                    "securityModes" : [ "EXPLICIT" ],
                    "serverCertificateVerified" : true,
                    "type" : "CLIENT"
                  }
                },
                "ftpClientComprofileSSLEnabledClientOptional" : {
                  "summary" : "ftpClientComprofileSSLEnabledClientOptional",
                  "value" : {
                    "connectionModes" : [ "PASSIVE" ],
                    "enableSSL" : true,
                    "enabled" : true,
                    "fipsEnabled" : false,
                    "login" : "login_ccp2",
                    "name" : "ftp_with_login",
                    "password" : "password_ccp2",
                    "protocol" : "FTP",
                    "securityModes" : [ "EXPLICIT" ],
                    "serverCertificateVerified" : true,
                    "type" : "CLIENT"
                  }
                },
                "ftpServerComprofileSSLDisabled" : {
                  "summary" : "ftpServerComprofileSSLDisabled",
                  "value" : {
                    "clientAuthenticationRequired" : "Yes",
                    "connectionModes" : [ "PASSIVE" ],
                    "enableSSL" : false,
                    "enabled" : true,
                    "fipsEnabled" : false,
                    "hosts" : [ "h6" ],
                    "name" : "ftp_scp_none",
                    "port" : 6,
                    "portRange" : {
                      "from" : 1024,
                      "to" : 65535
                    },
                    "protocol" : "FTP",
                    "securityModes" : [ "EXPLICIT" ],
                    "type" : "SERVER"
                  }
                },
                "ftpServerComprofileSSLEnabled" : {
                  "summary" : "ftpServerComprofileSSLEnabled",
                  "value" : {
                    "certificateAlias" : "certificate2.crt",
                    "clientAuthenticationRequired" : "Optional",
                    "connectionModes" : [ "PASSIVE" ],
                    "enableSSL" : true,
                    "enabled" : true,
                    "fipsEnabled" : false,
                    "hosts" : [ "h2" ],
                    "isPrivateCertificate" : false,
                    "name" : "ftp_scp_optional",
                    "port" : 2,
                    "portRange" : {
                      "from" : 1024,
                      "to" : 65535
                    },
                    "protocol" : "FTP",
                    "securityModes" : [ "EXPLICIT" ],
                    "type" : "SERVER"
                  }
                },
                "pesitClientComprofileCertificate" : {
                  "summary" : "pesitClientComprofileCertificate",
                  "value" : {
                    "certificateAlias" : "certificate2.crt",
                    "enableSSL" : true,
                    "enabled" : true,
                    "fipsEnabled" : false,
                    "isPrivateCertificate" : false,
                    "name" : "pesit_with_login_and_certificate",
                    "networkProtocol" : "TCP",
                    "pesitLogin" : "loginG",
                    "pesitPassword" : "G",
                    "protocol" : "PESIT",
                    "serverCertificateVerified" : true,
                    "type" : "CLIENT"
                  }
                },
                "pesitClientComprofileClientOptional" : {
                  "summary" : "pesitClientComprofileClientOptional",
                  "value" : {
                    "enableSSL" : true,
                    "enabled" : true,
                    "fipsEnabled" : false,
                    "name" : "pesit_with_login",
                    "networkProtocol" : "TCP",
                    "pesitLogin" : "loginT",
                    "pesitPassword" : "T",
                    "protocol" : "PESIT",
                    "serverCertificateVerified" : true,
                    "type" : "CLIENT"
                  }
                },
                "pesitClientComprofileSSLDisabled" : {
                  "summary" : "pesitClientComprofileSSLDisabled",
                  "value" : {
                    "enableSSL" : false,
                    "enabled" : true,
                    "fipsEnabled" : false,
                    "name" : "pesit_none",
                    "networkProtocol" : "TCP",
                    "pesitLogin" : "login4",
                    "pesitPassword" : "4",
                    "protocol" : "PESIT",
                    "serverCertificateVerified" : false,
                    "type" : "CLIENT"
                  }
                },
                "pesitServerComprofileSSLDisabled" : {
                  "summary" : "pesitServerComprofileSSLDisabled",
                  "value" : {
                    "clientAuthenticationRequired" : "Yes",
                    "enableSSL" : false,
                    "enabled" : true,
                    "fipsEnabled" : false,
                    "hosts" : [ "h2" ],
                    "name" : "pesit_none",
                    "networkProtocol" : "TCP",
                    "pesitLogin" : "loginA",
                    "pesitPassword" : "A",
                    "port" : 2,
                    "protocol" : "PESIT",
                    "type" : "SERVER"
                  }
                },
                "pesitServerComprofileSSLEnabled" : {
                  "summary" : "pesitServerComprofileSSLEnabled",
                  "value" : {
                    "certificateAlias" : "certificate2.crt",
                    "clientAuthenticationRequired" : "Yes",
                    "enableSSL" : true,
                    "enabled" : true,
                    "fipsEnabled" : false,
                    "hosts" : [ "h3" ],
                    "isPrivateCertificate" : false,
                    "name" : "pesit_SSL",
                    "networkProtocol" : "TCP",
                    "pesitLogin" : "loginB",
                    "pesitPassword" : "B",
                    "port" : 3,
                    "protocol" : "PESIT",
                    "type" : "SERVER"
                  }
                },
                "sftpClientComprofilePasswdAuth" : {
                  "summary" : "sftpClientComprofilePasswdAuth",
                  "value" : {
                    "clientAuthentication" : "PASSWORD",
                    "enabled" : true,
                    "fingerPrintVerified" : false,
                    "fipsEnabled" : false,
                    "login" : "ccp_partner_login",
                    "name" : "ccp_part",
                    "password" : "23",
                    "protocol" : "SFTP",
                    "type" : "CLIENT"
                  }
                },
                "sftpClientComprofilePublicKey" : {
                  "summary" : "sftpClientComprofilePublicKey",
                  "value" : {
                    "clientAuthentication" : "PUBLIC_KEY",
                    "enabled" : true,
                    "fingerPrintVerified" : false,
                    "fipsEnabled" : false,
                    "keyAlias" : "keySFTP1.pem",
                    "login" : "ccp_public_key_login",
                    "name" : "ccp_public_key",
                    "password" : "passwd1",
                    "protocol" : "SFTP",
                    "type" : "CLIENT"
                  }
                },
                "sftpServerComprofilePasswdAuth" : {
                  "summary" : "sftpServerComprofilePasswdAuth",
                  "value" : {
                    "clientAuthentication" : "PASSWORD",
                    "enabled" : true,
                    "fipsEnabled" : false,
                    "hosts" : [ "h2" ],
                    "keyAlias" : "public_key1.pub.p8",
                    "name" : "prt1_sftp_password_or_public_key",
                    "port" : 22,
                    "protocol" : "SFTP",
                    "type" : "SERVER"
                  }
                },
                "sftpServerComprofilePasswdPublicKey" : {
                  "summary" : "sftpServerComprofilePasswdPublicKey",
                  "value" : {
                    "clientAuthentication" : "PASSWORD_OR_PUBLIC_KEY",
                    "enabled" : true,
                    "fipsEnabled" : false,
                    "hosts" : [ "h2" ],
                    "keyAlias" : "public_key1.pub.p8",
                    "name" : "prt1_sftp_password_or_public_key",
                    "port" : 22,
                    "protocol" : "SFTP",
                    "type" : "SERVER"
                  }
                },
                "sftpServerComprofilePublicKey" : {
                  "summary" : "sftpServerComprofilePublicKey",
                  "value" : {
                    "clientAuthentication" : "PUBLIC_KEY",
                    "enabled" : true,
                    "fipsEnabled" : false,
                    "hosts" : [ "h2" ],
                    "keyAlias" : "public_key1.pub.p8",
                    "name" : "part1_sftp_public_key",
                    "port" : 22,
                    "protocol" : "SFTP",
                    "type" : "SERVER"
                  }
                }
              },
              "schema" : {
                "$ref" : "#/components/schemas/RComProfile"
              }
            }
          }
        }
      }
    },
    "/v2/partners/{businessId}/communicationprofiles/{cpid}" : {
      "delete" : {
        "operationId" : "deletePartnerComprofileById",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The partner business id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "cpid",
          "in" : "path",
          "description" : "The communication profile business id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "_forced",
          "in" : "query",
          "description" : "To force deleting the partner communication profile and apply the\n            impacts on flows.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid arguments."
          },
          "404" : {
            "description" : "Communication profile with the given business id does not\n              exist."
          },
          "412" : {
            "description" : "The delete of the partner communication profile has an\n              impact on flows. To perform the operation regardless of its\n              impact, set the _forced parameter to true."
          }
        },
        "summary" : "Deletes a communication profile from the given partner.",
        "description" : "<b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Partner</b>, action is <b>Modify</b>)",
        "tags" : [ "partners" ]
      },
      "get" : {
        "operationId" : "getPartnerComprofileById",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The business id of the partner.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "cpid",
          "in" : "path",
          "description" : "The business id of the communication profile.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "_brief",
          "in" : "query",
          "description" : "",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "X-EncryptionKey",
          "in" : "header",
          "description" : "header X-EncryptionKey encryption key used for private key in\n            base64 format. If not present the password will not be returned.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The partner communication profile with the given id is\n              found and it is returned in response body.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RComProfile"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid arguments."
          },
          "404" : {
            "description" : "The partner or communication profile does not exist."
          }
        },
        "summary" : "Retrieves a communication profile from the given partner.",
        "description" : "<b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Partner</b>, action is <b>View</b>)",
        "tags" : [ "partners" ]
      },
      "put" : {
        "operationId" : "updatePartnerComprofileById",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The partner business id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "cpid",
          "in" : "path",
          "description" : "The communication profile business id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "_body",
          "in" : "query",
          "description" : "",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "_forced",
          "in" : "query",
          "description" : "To force updating the partner and apply the impacts on flows.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "X-EncryptionKey",
          "in" : "header",
          "description" : "header X-EncryptionKey encryption key used for private key in\n            base64 format. If not present the password will not be returned.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The communication profile is successfully updated.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RComProfile"
                }
              }
            }
          },
          "400" : {
            "description" : "The communication profile fields are not valid."
          },
          "404" : {
            "description" : "The communication profile with the given businessId doesn't\n              exist."
          },
          "412" : {
            "description" : "The communication profile update has has an impact on\n              flows. To perform the operation regardless of its impact, set\n              the _forced parameter to true."
          }
        },
        "summary" : "Updates a partner communication profile.",
        "description" : "\n\n <p>\n The partner communication profile update should follow these rules:\n <ul>\n <li>If the update body does not contain all the mandatory fields, the\n operation is rejected.</li>\n <li>If the update body contains the mandatory fields, but does not contain\n some of the non-mandatory fields, these fields take the default values from\n GUI.</li>\n <li>If the partner already contains a communication profile, and the API\n partner update body does not contain it, the communication profile is\n deleted.</li>\n <li>If enableSSL=true, a certificate should be provided. The certificate is\n included in the body of the API, encoded in base64 in the parameter\n certificateContent.</li>\n <li>The certificateAlias should be unique in the partner.</li>\n </ul>\n The mandatory fields for each protocol are:\n <ul>\n <li>PESIT: host, port, PESIT login</li>\n <li>FTP: host, port</li>\n <li>HTTP: URLs or (host and port)</li>\n <li>SFTP: host, port</li>\n </ul>\n For more information, see GET /partners.\n </p><br><b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Partner</b>, action is <b>Modify</b>)",
        "tags" : [ "partners" ],
        "requestBody" : {
          "description" : "The communication profile to update.",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RComProfile"
              }
            }
          }
        }
      }
    },
    "/v2/partners/{businessId}/pgpkeys" : {
      "delete" : {
        "operationId" : "deletePartnerPgpKeyByNameOrIds",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The business id of the partner.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "name",
          "in" : "query",
          "description" : "The PGP key name. Two PGP keys cannot have the same name.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "businessId",
          "in" : "query",
          "description" : "The business id of the pgp keys to delete. Can delete multiple items.",
          "required" : false,
          "schema" : {
            "items" : {
              "type" : "string"
            },
            "type" : "array"
          }
        }, {
          "name" : "_forced",
          "in" : "query",
          "description" : "To force deleting the pgp key and apply the impacts.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The partner exists and PGP key is removed."
          },
          "400" : {
            "description" : "Use at least one filter."
          },
          "404" : {
            "description" : "The partner does not exist or the PGP key with the given\n              name does not exist on partner."
          }
        },
        "summary" : "Remove a PGP key by name or business ids for a given partner.",
        "description" : "<b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Partner</b>, action is <b>Modify</b>)",
        "tags" : [ "partners" ]
      },
      "get" : {
        "operationId" : "getPartnerPgpKeys",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The business id of the partner.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "name",
          "in" : "query",
          "description" : "Search for the PGP key having this name. Two PGP keys cannot have\n            the same name.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The partner exists and the list of PGP keys will be\n              returned.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "items" : {
                    "$ref" : "#/components/schemas/RPgpKeyCredential"
                  },
                  "type" : "array"
                }
              }
            }
          },
          "400" : {
            "description" : "Illegal arguments."
          },
          "404" : {
            "description" : "The partner does not exist."
          }
        },
        "summary" : "Retrieves a list of PGP keys for a given partner.",
        "description" : "<b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Partner</b>, action is <b>View</b>)",
        "tags" : [ "partners" ]
      },
      "post" : {
        "operationId" : "createPartnerPgpKey",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The id of the partner that will contain the PGP Key.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "_body",
          "in" : "query",
          "description" : "Controls if the body of the created object is returned in the\n            response. Default value is <code>true</code>.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "The PGP Key was successfully created.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RPgpKeyCredential"
                }
              }
            }
          },
          "400" : {
            "description" : "The PGP Key fields are not valid."
          },
          "403" : {
            "description" : "The user does no have right to create the pgpKey"
          },
          "404" : {
            "description" : "The partner identified by partnerID does not exist."
          },
          "500" : {
            "description" : "Internal server error."
          }
        },
        "summary" : "Creates a new PGP Key for a partner.",
        "description" : "<b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Partner</b>, action is <b>Modify</b>)",
        "tags" : [ "partners" ],
        "requestBody" : {
          "description" : "The PGP Key to create.",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RPgpKeyCredential"
              }
            }
          }
        }
      }
    },
    "/v2/partners/{businessId}/pgpkeys/{keyId}" : {
      "delete" : {
        "operationId" : "deletePartnerPgpKeyById",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The business id of the partner.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "keyId",
          "in" : "path",
          "description" : "The key id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "_forced",
          "in" : "query",
          "description" : "To force deleting the pgp key and apply the impacts.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The partner exists and PGP key is removed"
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "404" : {
            "description" : "The partner does not exist or the PGP key with the given\n              name does not exist on partner."
          }
        },
        "summary" : "Remove a PGP key by id for a given partner.",
        "description" : "<b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Partner</b>, action is <b>Modify</b>)",
        "tags" : [ "partners" ]
      },
      "get" : {
        "operationId" : "getPartnerPgpKeyById",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The business id of the partner.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "keyId",
          "in" : "path",
          "description" : "The key id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "X-EncryptionKey",
          "in" : "header",
          "description" : "encryption key used for private key in base64 format",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The partner and the certificate exist.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RPgpKeyCredential"
                }
              }
            }
          },
          "400" : {
            "description" : "Illegal arguments."
          },
          "404" : {
            "description" : "The partner does not exist or the key with the given id\n              does not exists."
          }
        },
        "summary" : "Retrieves the PGP key with given id for a given partner.",
        "description" : " In order to retrieve\n the private key, you need to put the encryption key encoded in base64 in the\n header X-EncryptionKey<br><b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Partner</b>, action is <b>View</b>)",
        "tags" : [ "partners" ]
      },
      "put" : {
        "operationId" : "updatePartnerPgpKeyById",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The id of the partner that contains the PGP key.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "keyId",
          "in" : "path",
          "description" : "The key id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "_forced",
          "in" : "query",
          "description" : "To force updating the partner key and apply the impacts on flows.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "_body",
          "in" : "query",
          "description" : "Controls if the body of the created object is returned in the\n            response. Default value is <code>true</code>.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The key was successfully updated.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RPgpKeyCredential"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "403" : {
            "description" : "The user does no have right to update the key"
          },
          "404" : {
            "description" : "The partner identified by appID does not exist or the key\n              identified by keyId does not exists."
          },
          "412" : {
            "description" : "The update of the partner key has an impact on flows. To\n              perform the operation regardless of its impact, set the _forced\n              parameter to true."
          },
          "500" : {
            "description" : "Internal server error."
          }
        },
        "summary" : "Updates an existing PGP key for a partner.",
        "description" : "<b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Partner</b>, action is <b>Modify</b>)",
        "tags" : [ "partners" ],
        "requestBody" : {
          "description" : "The PGP key to be updated.",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RPgpKeyCredential"
              }
            }
          }
        }
      }
    },
    "/v2/partners/{businessId}/sshkeys" : {
      "delete" : {
        "operationId" : "deletePartnerSshKeyByNameOrIds",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The business id of the partner.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "name",
          "in" : "query",
          "description" : "The key name. Two ssh keys cannot have the same name.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "businessId",
          "in" : "query",
          "description" : "The business id of the ssh keys to delete. Can delete multiple items.",
          "required" : false,
          "schema" : {
            "items" : {
              "type" : "string"
            },
            "type" : "array"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The partner exists and key is removed."
          },
          "400" : {
            "description" : "Invalid arguments."
          },
          "404" : {
            "description" : "The partner does not exist or the key with the given name\n              does not exists."
          }
        },
        "summary" : "Remove a ssh key for a given partner.",
        "description" : "<b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Partner</b>, action is <b>Modify</b>)",
        "tags" : [ "partners" ]
      },
      "get" : {
        "operationId" : "getPartnerSshKeys",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The business id of the partner.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "name",
          "in" : "query",
          "description" : "Search for the SSH key having this name. Two SSH keys cannot have\n            the same alias.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The partner exists and the list of SSH keys will be\n              returned.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "items" : {
                    "$ref" : "#/components/schemas/RKeyCredential"
                  },
                  "type" : "array"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid arguments."
          },
          "404" : {
            "description" : "The partner does not exist."
          }
        },
        "summary" : "Retrieves a list of SSh keys for a given partner.",
        "description" : "<b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Partner</b>, action is <b>View</b>)",
        "tags" : [ "partners" ]
      },
      "post" : {
        "operationId" : "createPartnerSshKey",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The id of the partner that will contain the SSH Key.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "_body",
          "in" : "query",
          "description" : "Controls if the body of the created object is returned in the\n            response. Default value is <code>true</code>.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "The SSH Key was successfully created.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RKeyCredential"
                }
              }
            }
          },
          "400" : {
            "description" : "The SSH Key fields are not valid."
          },
          "403" : {
            "description" : "The user does no have right to create the sshKey"
          },
          "404" : {
            "description" : "The partner identified by partnerID does not exist."
          },
          "500" : {
            "description" : "Internal server error."
          }
        },
        "summary" : "Creates a new SSH Key for a partner.",
        "description" : "<b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Partner</b>, action is <b>Modify</b>)",
        "tags" : [ "partners" ],
        "requestBody" : {
          "description" : "The SSH Key to create.",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RKeyCredential"
              }
            }
          }
        }
      }
    },
    "/v2/partners/{businessId}/sshkeys/{keyId}" : {
      "delete" : {
        "operationId" : "deletePartnerSshKeyById",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The business id of the partner.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "keyId",
          "in" : "path",
          "description" : "The key id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The partner exists and the key is removed"
          },
          "400" : {
            "description" : "Invalid arguments."
          },
          "404" : {
            "description" : "The partner does not exist."
          }
        },
        "summary" : "Remove key given by id for a given partner.",
        "description" : "<b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Partner</b>, action is <b>Modify</b>)",
        "tags" : [ "partners" ]
      },
      "get" : {
        "operationId" : "getPartnerSshKeyById",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The business id of the partner.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "keyId",
          "in" : "path",
          "description" : "The key id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The partner exists and the certificate exists."
          },
          "400" : {
            "description" : "Invalid arguments."
          },
          "404" : {
            "description" : "The partner does not exist."
          }
        },
        "summary" : "Retrieves key given by id for a given partner.",
        "description" : "<b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Partner</b>, action is <b>View</b>)",
        "tags" : [ "partners" ]
      },
      "put" : {
        "operationId" : "updatePartnerSshKeyById",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The id of the partner that contains the SSH key.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "keyId",
          "in" : "path",
          "description" : "The key id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "_forced",
          "in" : "query",
          "description" : "To force updating the partner key and apply the impacts on flows.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "_body",
          "in" : "query",
          "description" : "Controls if the body of the created object is returned in the\n            response. Default value is <code>true</code>.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The key was successfully updated.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RKeyCredential"
                }
              }
            }
          },
          "400" : {
            "description" : "The key fields are not valid."
          },
          "403" : {
            "description" : "The user does no have right to update the key"
          },
          "404" : {
            "description" : "The partner identified by partnerId does not exist or the\n              key identified by keyId does not exists."
          },
          "412" : {
            "description" : "The update of the partner key has an impact on flows. To\n              perform the operation regardless of its impact, set the _forced\n              parameter to true."
          },
          "500" : {
            "description" : "Internal server error."
          }
        },
        "summary" : "Updates an existing key credential for a partner.",
        "description" : "<b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Partner</b>, action is <b>Modify</b>)",
        "tags" : [ "partners" ],
        "requestBody" : {
          "description" : "The SSH key to be updated.",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RKeyCredential"
              }
            }
          }
        }
      }
    },
    "/v2/pki" : {
      "get" : {
        "operationId" : "getCertificates",
        "parameters" : [ {
          "name" : "daysUntilExpiration",
          "in" : "query",
          "description" : "The maximum days until the certificate will expires. If 0, all certificate are returned.",
          "required" : false,
          "schema" : {
            "format" : "int64",
            "type" : "integer"
          }
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "entity",
          "in" : "query",
          "description" : "The entity name or id for certificates",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Get items starting from the specified offset in the list of records returned by the database. If not set, offset defaults to 0.",
          "required" : false,
          "schema" : {
            "format" : "int64",
            "type" : "integer"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of items returned per request",
          "required" : false,
          "schema" : {
            "format" : "int64",
            "type" : "integer"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "Sort certificates using expiration date. Use in conjunction with 'ascending' parameter. Valid values are: expiration",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ascending",
          "in" : "query",
          "description" : "Use in conjunction with 'sort' parameter. Defaults to 'false' - descending order.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "showChain",
          "in" : "query",
          "description" : "View the certificate chain. Defaults to 'false'",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "search",
          "in" : "query",
          "description" : "The alias of the certificate or key",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The list of certificates will be returned.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "items" : {
                    "$ref" : "#/components/schemas/RPkiObject"
                  },
                  "type" : "array"
                }
              }
            }
          },
          "403" : {
            "description" : "The user is not authorized to view certificates."
          }
        },
        "summary" : "Retrieves a list of certificates ordered by expiration date.",
        "description" : "<b>Since: </b>FM v2.0<br>Access enforcement <b>always performed</b> (resource is <b>Product</b>, action is <b>View_Credential</b>)<br>Access enforcement <b>always performed</b> (resource is <b>Partner</b>, action is <b>View</b>)<br>Access enforcement <b>always performed</b> (resource is <b>Application</b>, action is <b>View</b>)<br>",
        "tags" : [ "certificates, keys, pgp keys" ]
      }
    },
    "/v2/productplugins" : {
      "delete" : {
        "operationId" : "deleteProductPluginByFilter",
        "parameters" : [ {
          "name" : "name",
          "in" : "query",
          "description" : "Search for product plugins having this name.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "shortName",
          "in" : "query",
          "description" : "Search for product plugins having this short name.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "productType",
          "in" : "query",
          "description" : "Search for product plugins having this product type.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "businessId",
          "in" : "query",
          "description" : "The business id of the product plugins to delete. Can delete multiple items. If no parameter is given, all product plugins are removed.\n \t\t\t\t\tUse parameters to narrow the list of product plugins to be deleted.",
          "required" : false,
          "schema" : {
            "items" : {
              "type" : "string"
            },
            "type" : "array"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Product plugins are successfully deleted.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid arguments. Use at least one filter or use either filter by businessIds, or a filter based on name and product type."
          },
          "412" : {
            "description" : "Precondition failed."
          }
        },
        "summary" : "Deletes a list of product plugins.",
        "description" : "<b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Product_Plugin</b>, action is <b>Delete</b>)",
        "tags" : [ "productplugins" ]
      },
      "get" : {
        "operationId" : "listProductPlugins",
        "parameters" : [ {
          "name" : "name",
          "in" : "query",
          "description" : "Search for product plugins having this name. Enclose the search value in special character % to filter items containing this value.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "shortName",
          "in" : "query",
          "description" : "Search for product plugins having this short name. Enclose the search value in special character % to filter items containing this value.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "productType",
          "in" : "query",
          "description" : "Search for product plugins having this product type.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "_brief",
          "in" : "query",
          "description" : "Flag indicating that all the properties of the product plugin must be returned or just selected properties.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Body contains the list of filtered product plugins.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "items" : {
                    "$ref" : "#/components/schemas/RProductPlugin"
                  },
                  "type" : "array"
                }
              }
            }
          }
        },
        "summary" : "Retrieves a list of product plugins.",
        "description" : "<b>Since: </b>FM v1.0<br>Access enforcement <b>never performed</b>...",
        "tags" : [ "productplugins" ]
      },
      "post" : {
        "operationId" : "createProductPlugin",
        "parameters" : [ {
          "name" : "_body",
          "in" : "query",
          "description" : "Controls if the body of the created object is returned in the response. Default value is <code>true</code>.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "The product plugin was successfully created.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RProductPlugin"
                }
              }
            }
          },
          "400" : {
            "description" : "The product plugin fields are not valid."
          },
          "403" : {
            "description" : "The user does no have right to create product plugins (Resource=Product_Plugin, Action=Create)."
          },
          "409" : {
            "description" : "A product plugin with the same product type already exists."
          }
        },
        "summary" : "Creates a new product plugin.",
        "description" : "\n\n <p>\n     For the JSON syntax see GET /productplugins\n </p><br><b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Product_Plugin</b>, action is <b>Create</b>)",
        "tags" : [ "productplugins" ],
        "requestBody" : {
          "description" : "The product plugin to create.",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RProductPlugin"
              }
            }
          }
        }
      }
    },
    "/v2/productplugins/{businessIdOrProductType}" : {
      "delete" : {
        "operationId" : "deleteProductPluginById",
        "parameters" : [ {
          "name" : "businessIdOrProductType",
          "in" : "path",
          "description" : "The business id or the product type of the product plugin.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The product plugin was deleted.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid businessId."
          },
          "403" : {
            "description" : "The user does no have right to delete the product plugin."
          },
          "404" : {
            "description" : "Product plugin with the given businessId doesn't exist."
          },
          "412" : {
            "description" : "Precondition failed."
          }
        },
        "summary" : "Deletes a product plugin.",
        "description" : "<b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Product_Plugin</b>, action is <b>Delete</b>)",
        "tags" : [ "productplugins" ]
      },
      "get" : {
        "operationId" : "getProductPluginByIdOrProductType",
        "parameters" : [ {
          "name" : "businessIdOrProductType",
          "in" : "path",
          "description" : "The business id or the product type of the product plugin.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The product plugin exists.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RProductPlugin"
                }
              }
            }
          },
          "404" : {
            "description" : "The product plugin does not exist."
          }
        },
        "summary" : "Retrieves a given product plugin.",
        "description" : "<b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Product_Plugin</b>, action is <b>View</b>)",
        "tags" : [ "productplugins" ]
      },
      "head" : {
        "operationId" : "productPluginExists",
        "parameters" : [ {
          "name" : "businessIdOrProductType",
          "in" : "path",
          "description" : "The business id or the product type of the product plugin.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The product plugin with given id exists.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          },
          "404" : {
            "description" : "The product plugin with given id doesn't exist."
          }
        },
        "summary" : "Checks if the given product plugin exists.",
        "description" : "<b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Product_Plugin</b>, action is <b>View</b>)",
        "tags" : [ "productplugins" ]
      },
      "put" : {
        "operationId" : "updateProductPluginById",
        "parameters" : [ {
          "name" : "businessIdOrProductType",
          "in" : "path",
          "description" : "The business id or the product type of the product plugin.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "_body",
          "in" : "query",
          "description" : "If the update should return the updated object.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The product plugin is successfully updated.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RProductPlugin"
                }
              }
            }
          },
          "400" : {
            "description" : "The product plugin fields are not valid."
          },
          "404" : {
            "description" : "The product plugin with the given businessId doesn't exist."
          }
        },
        "summary" : "Updates a product plugin.",
        "description" : "\n\n <p>\n PUT is idempotent, so PUT requests you MUST send all the available properties/values\n , not just the ones you want to change.\n <br>It is a good practice to query for a product plugin, modify what needed\n and then resend the whole product plugin.\n </p><br><b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Product_Plugin</b>, action is <b>Modify</b>)",
        "tags" : [ "productplugins" ],
        "requestBody" : {
          "description" : "The product plugin to update.",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RProductPlugin"
              }
            }
          }
        }
      }
    },
    "/v2/products" : {
      "delete" : {
        "operationId" : "deleteProductByFilter",
        "parameters" : [ {
          "name" : "name",
          "in" : "query",
          "description" : "Search for products having this name. Enclose the search\n            value in special character % to filter items containing this\n            value. Add % after the search value to filter items starting with this value.\n            Add % before the search value to filter items ending with this value.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "Search for products having this type. Possible values are:\n            Transfer CFT, SecureTransport, Gateway",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "businessId",
          "in" : "query",
          "description" : "The business id of the product to delete. Can delete multiple\n            items. If no parameter is given, all products are removed. Use\n            parameters to narrow the list of products to be deleted.",
          "required" : false,
          "schema" : {
            "items" : {
              "type" : "string"
            },
            "type" : "array"
          }
        }, {
          "name" : "_forced",
          "in" : "query",
          "description" : "To force deletion of product and apply the impacts on flows.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Products are successfully deleted.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          },
          "400" : {
            "description" : "Use at least one filter."
          },
          "412" : {
            "description" : "Deleting the products has an impact on flows. To perform\n              the operation regardless of its impact, set the _forced\n              parameter to true."
          }
        },
        "summary" : "Deletes a list of products.",
        "description" : "<b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Product</b>, action is <b>Delete</b>)<br>",
        "tags" : [ "products" ]
      },
      "get" : {
        "operationId" : "listProducts",
        "parameters" : [ {
          "name" : "search",
          "in" : "query",
          "description" : "Search for products containing this value in 'name', 'host', 'tags', product 'version' or 'os'.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "name",
          "in" : "query",
          "description" : "Search for products having this name. Enclose the search value in\n            special character % to filter items containing this value.\n            Add % after the search value to filter items starting with this value.\n            Add % before the search value to filter items ending with this value.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "Search for products having this type. Some possible values are:\n            Transfer CFT, SecureTransport",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "OS",
          "in" : "query",
          "description" : "Search for products having this OS.\n            Enclose the search value in special character % to filter items containing this value.\n \t          Add % after the search value to filter items starting with this value.\n \t          Add % before the search value to filter items ending with this value.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "version",
          "in" : "query",
          "description" : "Search for products having this version.\n            Enclose the search value in special character % to filter items containing this value.\n            Add % after the search value to filter items starting with this value.\n \t          Add % before the search value to filter items ending with this value.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "host",
          "in" : "query",
          "description" : "Search for products having this host. Enclose the search value in\n            special character % to filter items containing this value.\n            Add % after the search value to filter items starting with this value.\n            Add % before the search value to filter items ending with this value.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "tags",
          "in" : "query",
          "description" : "Search for products having this tag. Enclose the search value in\n            special character % to filter items containing this value.\n            Add % after the search value to filter items starting with this value.\n            Add % before the search value to filter items ending with this value.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "status",
          "in" : "query",
          "description" : "Search for products having this status. Possible values are: Completed, Crashed, Deployed_In_Error, \n            ForceStopped, InError, Initializing, InProgress, Not_available, PartiallyStarted, ReadyToRegister, Registered, \n            RegisteredInError, Registering, Removed, Started, StartedInError, Starting, StartingInError, Stopped, \n            StoppedInError, Stopping, Unknown, Unreachable.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "productId",
          "in" : "query",
          "description" : "Search for product with the product technical id. Useful for searching cft products.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Get products starting from the specified offset in the list of records returned by the database.\n            If not set, offset defaults to 0. Legal values: 0 <= offset <= 2147483647",
          "required" : false,
          "schema" : {
            "format" : "int64",
            "type" : "integer"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of items returned per request.",
          "required" : false,
          "schema" : {
            "format" : "int64",
            "type" : "integer"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "Sort products using a specific field from result record.\n            Use in conjunction with 'ascending' parameter.\n            Valid values are: name, type, OS, version.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ascending",
          "in" : "query",
          "description" : "Use in conjunction with 'sort' parameter.\n            Defaults to 'false' - descending order.\n            (if none of 'sort' or 'ascending' are set,\n            results are returned in the order they are in the database).",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "_brief",
          "in" : "query",
          "description" : "Flag indicating that all the properties of the product must be\n            returned or just selected properties.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "X-EncryptionKey",
          "in" : "header",
          "description" : "header X-EncryptionKey encryption key used for private key in\n            base64 format. If not present the password will not be returned.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Body contains the list of filtered products.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "items" : {
                    "$ref" : "#/components/schemas/RProduct"
                  },
                  "type" : "array"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid offset, limit, sort criteria or status to search for.\n             See swagger documentation for available options."
          }
        },
        "summary" : "Retrieves a list of products.",
        "description" : "<b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Product</b>, action is <b>View</b>)",
        "tags" : [ "products" ]
      },
      "post" : {
        "operationId" : "createProduct",
        "parameters" : [ {
          "name" : "_body",
          "in" : "query",
          "description" : "Controls if the body of the created object is returned in the response. Default value is <code>true</code>.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "X-EncryptionKey",
          "in" : "header",
          "description" : "",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "The product was successfully created.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RProduct"
                }
              }
            }
          },
          "400" : {
            "description" : "The product fields are not valid or the feature is not active."
          },
          "403" : {
            "description" : "The user does no have right to create products (Resource=Product, Action=Modify)."
          },
          "409" : {
            "description" : "A product with the same name already exists."
          }
        },
        "summary" : "Creates a new product.",
        "description" : "\n\n <p>\n     For the JSON syntax see GET /products\n </p><br><b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Product</b>, action is <b>Modify</b>)",
        "tags" : [ "products" ],
        "requestBody" : {
          "description" : "The product to create.",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RProduct"
              }
            }
          }
        }
      }
    },
    "/v2/products/operations" : {
      "post" : {
        "operationId" : "executeOperationOnProducts",
        "parameters" : [ ],
        "responses" : {
          "202" : {
            "description" : "The operation was triggered asynchronously."
          },
          "404" : {
            "description" : "The product or product plugin does not exist."
          },
          "default" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RAuthorizationReport"
                }
              }
            }
          }
        },
        "summary" : "Executes the given operation on the given products.",
        "description" : "Access enforcement <b>always performed</b> (resource is <b>Product</b>, action is <b>View</b>)",
        "tags" : [ "products" ],
        "requestBody" : {
          "description" : "The operation to execute on the products.",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RProductOperation"
              }
            }
          }
        }
      }
    },
    "/v2/products/{businessId}" : {
      "delete" : {
        "operationId" : "deleteProductById",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The business id of the product to delete. Can delete multiple\n            items.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "_forced",
          "in" : "query",
          "description" : "To force deleting the product and apply the impacts on flows.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The product was deleted.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid argument.."
          },
          "403" : {
            "description" : "The user does no have right to delete the product."
          },
          "404" : {
            "description" : "Product with the given businessId doesn't exist."
          },
          "412" : {
            "description" : "If deleting the product has an impact on flows. To perform\n              the operation regardless of its impact, set the _forced\n              parameter to true."
          }
        },
        "summary" : "Deletes a product.",
        "description" : "<b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Product</b>, action is <b>Delete</b>)<br>",
        "tags" : [ "products" ]
      },
      "get" : {
        "operationId" : "getProductById",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The business id of the product.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "X-EncryptionKey",
          "in" : "header",
          "description" : "header X-EncryptionKey encryption key used for private key in\n            base64 format. *",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "includeComProfiles",
          "in" : "query",
          "description" : "Flag indicating that com profiles should be returned or not",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The product exists.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RProduct"
                }
              }
            }
          },
          "404" : {
            "description" : "The product does not exist."
          }
        },
        "summary" : "Retrieves a given product.",
        "description" : "\n\n <p>\n Retrieves general information related to products as well as their client and\n server communication profiles. <br>\n When a product is registered, client and server communication profiles are\n created corresponding to the ones existing on the actual product\n configuration. These communication profiles can be selected when the product\n is set to act as client or server in a flow. For Transfer CFT, the client and\n server communication profiles are set automatically in a flow when the\n protocol is defined.\n </p><br><b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Product</b>, action is <b>View</b>)",
        "tags" : [ "products" ]
      },
      "put" : {
        "operationId" : "updateProductById",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The product business id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "_body",
          "in" : "query",
          "description" : "If the update should return the updated object.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "X-EncryptionKey",
          "in" : "header",
          "description" : "",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The product is successfully updated.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RProductPlugin"
                }
              }
            }
          },
          "400" : {
            "description" : "The product fields are not valid or the feature is not active."
          },
          "404" : {
            "description" : "The product with the given businessId doesn't exist."
          }
        },
        "summary" : "Updates a product.",
        "description" : "\n\n <p>\n PUT is idempotent, so PUT requests you MUST send all the available properties/values\n , not just the ones you want to change.\n <br>It is a good practice to query for a product, modify what needed\n and then resend the whole product.\n </p><br><b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Product</b>, action is <b>Modify</b>)",
        "tags" : [ "products" ],
        "requestBody" : {
          "description" : "The product to update.",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RProduct"
              }
            }
          }
        }
      }
    },
    "/v2/products/{businessId}/approveregistration" : {
      "post" : {
        "operationId" : "v2_productsbusinessId_approveregistration_approveRegistration",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The business id of the product to approve",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Registration approved",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          },
          "400" : {
            "description" : "The business id is not valid"
          },
          "403" : {
            "description" : "The user does not have the right to approve the registration for this product"
          },
          "404" : {
            "description" : "The product was not found"
          },
          "406" : {
            "description" : "The business id is not for a product which state is in the ones for registering"
          },
          "412" : {
            "description" : "Precondition Failed"
          }
        },
        "summary" : "Approve product registration",
        "description" : "Access enforcement <b>always performed</b> (resource is <b>Product</b>, action is <b>Modify</b>)",
        "tags" : [ "products" ]
      }
    },
    "/v2/products/{businessId}/certificates" : {
      "delete" : {
        "operationId" : "deleteProductCertificateByNameOrIds",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The business id of the product.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "name",
          "in" : "query",
          "description" : "The certificate name. Two certificates cannot have the same name.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "businessId",
          "in" : "query",
          "description" : "The business id of the certificates to delete. Can delete multiple items.",
          "required" : false,
          "schema" : {
            "items" : {
              "type" : "string"
            },
            "type" : "array"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The product exists and certificates is removed"
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "The user is not authorized to delete certificates."
          },
          "404" : {
            "description" : "The product does not exist or the certificate with the\n              given name or business id does not exists."
          },
          "412" : {
            "description" : "Some of the certificates are used in communication profiles and cannot be deleted"
          }
        },
        "summary" : "Removes the certificate with given name or business ids for a given product.",
        "description" : "<b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Product</b>, action is <b>Delete_Credential</b>)",
        "tags" : [ "products" ]
      },
      "get" : {
        "operationId" : "getProductCertificates",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The business id of the product.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "name",
          "in" : "query",
          "description" : "Search for the certificate with this name. Two certificates cannot\n            have the same name.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "X-EncryptionKey",
          "in" : "header",
          "description" : "header X-EncryptionKey encryption key used for private key in\n            base64 format.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The product exists and the list of certificates will be\n              returned.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "items" : {
                    "$ref" : "#/components/schemas/RCertificateCredential"
                  },
                  "type" : "array"
                }
              }
            }
          },
          "400" : {
            "description" : "The businessId of the product is invalid."
          },
          "401" : {
            "description" : "The user is not authorized to view certificates."
          },
          "404" : {
            "description" : "The product does not exist."
          }
        },
        "summary" : "Retrieves a list of certificates for a given product.",
        "description" : " In order to retrieve\n the private key, you need to put the encryption key encoded in base64 in the\n header X-EncryptionKey.<br><b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Product</b>, action is <b>View_Credential</b>)",
        "tags" : [ "products" ]
      },
      "post" : {
        "operationId" : "createProductCertificate",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The id of the product that will contain the certificate.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "_body",
          "in" : "query",
          "description" : "Controls if the body of the created object is returned in the\n            response. Default value is <code>true</code>.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "The certificate was successfully created.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RCertificateCredential"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "The user is not authorized to create the certificate."
          },
          "403" : {
            "description" : "The user does no have right to create the certificate"
          },
          "404" : {
            "description" : "The product identified by productID does not exist."
          },
          "500" : {
            "description" : "Internal server error."
          }
        },
        "summary" : "Creates a new certificate for a product.",
        "description" : "<b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Product</b>, action is <b>Create_Credential</b>)",
        "tags" : [ "products" ],
        "requestBody" : {
          "description" : "The Certificate to create.",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RCertificateCredential"
              }
            }
          }
        }
      }
    },
    "/v2/products/{businessId}/certificates/{certificateId}" : {
      "delete" : {
        "operationId" : "deleteProductCertificateById",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The business id of the product.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "certificateId",
          "in" : "path",
          "description" : "The certificate id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The product exists and certificate is removed"
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "The user is not authorized to delete the certificate."
          },
          "404" : {
            "description" : "The product does not exist or the certificate with the\n              given id does not exists."
          },
          "412" : {
            "description" : "The certificates is used in communication profiles and cannot be deleted"
          }
        },
        "summary" : "Removes the certificate with given id for a given product.",
        "description" : "<b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Product</b>, action is <b>Delete_Credential</b>)",
        "tags" : [ "products" ]
      },
      "get" : {
        "operationId" : "getProductCertificateById",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The business id of the product.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "certificateId",
          "in" : "path",
          "description" : "The certificate id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "X-EncryptionKey",
          "in" : "header",
          "description" : "encryption key used for private key in base64 format",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The product and the certificate exist"
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "The user is not authorized to view the certificate."
          },
          "404" : {
            "description" : "The product does not exist or the certificate with the\n              given id does not exists."
          }
        },
        "summary" : "Retrives the certificate with given id for a given product.",
        "description" : " In order to\n retrieve the private key, you need to put the encryption key encoded in\n base64 in the header X-EncryptionKey.<br><b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Product</b>, action is <b>View_Credential</b>)",
        "tags" : [ "products" ]
      },
      "put" : {
        "operationId" : "updateProductCertificate",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The id of the product that contains the certificate.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "certificateId",
          "in" : "path",
          "description" : "certificateId The certificate id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "_forced",
          "in" : "query",
          "description" : "To force updating product certificate and apply the impacts on\n            flows.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "_body",
          "in" : "query",
          "description" : "Controls if the body of the updated object is returned in the\n            response. Default value is <code>true</code>.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The certificate was successfully updated.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RCertificateCredential"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "The user is not authorized to update the certificate content."
          },
          "403" : {
            "description" : "The user does no have right to update the certificate\n              content"
          },
          "404" : {
            "description" : "The product identified by productID does not exist or the\n              certificate identified by certificateId does not exists."
          },
          "412" : {
            "description" : "The update of the product certificate has an impact on\n              flows, subscriptions or templates. To perform the operation regardless of its impact, set\n              the _forced parameter to true."
          },
          "500" : {
            "description" : "Internal server error."
          }
        },
        "summary" : "Updates an existing certificate credential for a product.",
        "description" : "<b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Product</b>, action is <b>Modify_Credential</b>)",
        "tags" : [ "products" ],
        "requestBody" : {
          "description" : "The Certificate to be updated.",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RCertificateCredential"
              }
            }
          }
        }
      }
    },
    "/v2/products/{businessId}/communicationprofiles" : {
      "delete" : {
        "operationId" : "deleteProductComprofileByFilter",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The product business id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "businessId",
          "in" : "query",
          "description" : "The business id of the comprofile to delete. Can delete multiple items.",
          "required" : false,
          "schema" : {
            "items" : {
              "type" : "string"
            },
            "type" : "array"
          }
        }, {
          "name" : "name",
          "in" : "query",
          "description" : "The communication profile name. Enclose the search value in\n            special character % to filter items containing this value.\n            Add % after the search value to filter items starting with this value.\n            Add % before the search value to filter items ending with this value.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "The type of the communication profile: CLIENT or SERVER.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "protocol",
          "in" : "query",
          "description" : "The protocol of the communication profile.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "_forced",
          "in" : "query",
          "description" : "To force deleting the product communication profile and apply the\n            impacts on flows.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Product communication profiles are successfully deleted.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          },
          "400" : {
            "description" : "Use at least one filter or invalid arguments."
          },
          "404" : {
            "description" : "Communication profile with a given business id doesn't\n              exist."
          },
          "412" : {
            "description" : "Deleting product's communication profiles has an impact on flows. To perform\n              the operation regardless of its impact, set the _forced\n              parameter to true."
          }
        },
        "summary" : "Deletes a list of product communication profiles.",
        "description" : "<b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Product</b>, action is <b>Delete_Profile</b>)<br>",
        "tags" : [ "products" ]
      },
      "get" : {
        "operationId" : "listProductComprofiles",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The product business id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "name",
          "in" : "query",
          "description" : "The name of the communication profile. Enclose the search value in\n            special character % to filter items containing this value.\n            Add % after the search value to filter items starting with this value.\n            Add % before the search value to filter items ending with this value.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "The type of the communication profile. Possible values : CLIENT,\n            SERVER.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "protocol",
          "in" : "query",
          "description" : "The protocol of the communication profile. Possible values :\n            PESIT, FTP, SFTP, HTTP.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "_brief",
          "in" : "query",
          "description" : "Retrieve full properties.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "fipsEnabled",
          "in" : "query",
          "description" : "Fips is enabled.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "sslTls",
          "in" : "query",
          "description" : "The SSL/TLS option (for PESIT/FTP/HTTP). Possible values : None,\n            Client_Optional, Server_Only, Mutual_Authentication.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "networkProtocol",
          "in" : "query",
          "description" : "The network protocol (for Pesit : TCP, pTCP or UDT). Possible\n            values : TCP, pTCP, UDT.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "securityMode",
          "in" : "query",
          "description" : "The security mode (for FTP). Possible values : Explicit, Implicit.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "connectionMode",
          "in" : "query",
          "description" : "The connection mode (for FTP). Possible values : Passive, Active.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "httpMethodToCheck",
          "in" : "query",
          "description" : "The network protocol method (for HTTP). Possible values : PUT,\n            POST, GET.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "clientAuthentication",
          "in" : "query",
          "description" : "The client authentication option (for SFTP). Possible values :\n            PUBLIC_KEY, PASSWORD, PASSWORD_OR_PUBLIC_KEY.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "description",
          "in" : "query",
          "description" : "the description of the ComProfile.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "tags",
          "in" : "query",
          "description" : "The tags of the communication profiles. You can select multiple\n            items.",
          "required" : false,
          "schema" : {
            "items" : {
              "type" : "string"
            },
            "type" : "array"
          }
        }, {
          "name" : "customAttributeFilter",
          "in" : "query",
          "description" : "Search for comprofiles having this custom attribute filter. Sample\n            filter: customAttrName1=value1&customAttrName2=value2",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "X-EncryptionKey",
          "in" : "header",
          "description" : "header X-EncryptionKey encryption key used for private key in\n            base64 format.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Body contains the list of filtered communication profiles\n              for the given product.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "items" : {
                    "$ref" : "#/components/schemas/RComProfile"
                  },
                  "type" : "array"
                }
              }
            }
          },
          "400" : {
            "description" : "The product businessId is invalid."
          },
          "401" : {
            "description" : "The user is not authorized to view communication profiles."
          },
          "404" : {
            "description" : "The product businessId doesn't exist."
          }
        },
        "summary" : "Retrieves communication profiles from the given product.",
        "description" : "\n\n <p>\n For more information, see GET /products\n </p><br><b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Product</b>, action is <b>View_Profile</b>)",
        "tags" : [ "products" ]
      },
      "post" : {
        "operationId" : "createProductComprofile",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The business id of the product.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "_body",
          "in" : "query",
          "description" : "Controls if the body of the created object is returned in the\n            response. Default value is <code>true</code>.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "X-EncryptionKey",
          "in" : "header",
          "description" : "header X-EncryptionKey encryption key used for private key in\n            base64 format.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "The product com profile was successfully created.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RComProfile"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "The user is not authorized to create product\n \t\t\t\tcommunication profiles (Resource=Product, Action=Create)."
          },
          "403" : {
            "description" : "The user does no have rights to create product\n              communication profiles (Resource=Product, Action=Modify)."
          },
          "409" : {
            "description" : "A communication profile with the same name already exists."
          }
        },
        "summary" : "Adds a new communication profile to the given product.",
        "description" : "\n\n <p>\n Creates a server or client communication profile for the product. <br>\n For more information about client/server communication profiles, see GET\n /products and PUT /products/{businessId}/communicationprofiles/{cpid}.\n </p><br><b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Product</b>, action is <b>Create_Profile</b>)",
        "tags" : [ "products" ],
        "requestBody" : {
          "description" : "The communication profile to create.",
          "required" : true,
          "content" : {
            "application/json" : {
              "examples" : {
                "ftpClientComprofileMutualAuth" : {
                  "summary" : "ftpClientComprofileMutualAuth",
                  "value" : {
                    "certificateAlias" : "admind",
                    "connectionModes" : [ "PASSIVE" ],
                    "enableSSL" : true,
                    "enabled" : true,
                    "fipsEnabled" : false,
                    "isPrivateCertificate" : false,
                    "login" : "login2",
                    "name" : "ftp_ccp_optional",
                    "networkZone" : "Private",
                    "password" : "password1",
                    "protocol" : "FTP",
                    "securityModes" : [ "EXPLICIT" ],
                    "serverCertificateVerified" : true,
                    "type" : "CLIENT"
                  }
                },
                "ftpClientComprofileSSLDisabled" : {
                  "summary" : "ftpClientComprofileSSLDisabled",
                  "value" : {
                    "connectionModes" : [ "PASSIVE" ],
                    "enableSSL" : false,
                    "enabled" : true,
                    "fipsEnabled" : false,
                    "login" : "login1",
                    "name" : "ftp_ccp_none",
                    "networkZone" : "Private",
                    "password" : "password1",
                    "protocol" : "FTP",
                    "serverCertificateVerified" : false,
                    "type" : "CLIENT"
                  }
                },
                "ftpClientComprofileSSLEnabled" : {
                  "summary" : "ftpClientComprofileSSLEnabled",
                  "value" : {
                    "connectionModes" : [ "PASSIVE" ],
                    "enableSSL" : true,
                    "enabled" : true,
                    "fipsEnabled" : false,
                    "login" : "login2",
                    "name" : "ftp_ccp_server_only",
                    "networkZone" : "Private",
                    "password" : "password2",
                    "protocol" : "FTP",
                    "serverCertificateVerified" : false,
                    "type" : "CLIENT"
                  }
                },
                "ftpServerComprofileSSLDisabled" : {
                  "summary" : "ftpServerComprofileSSLDisabled",
                  "value" : {
                    "clientAuthenticationRequired" : "No",
                    "connectionModes" : [ "ACTIVE", "PASSIVE" ],
                    "description" : "FTP over Plain Socket",
                    "enableSSL" : false,
                    "enabled" : true,
                    "fipsEnabled" : false,
                    "hosts" : [ "10.133.66.83" ],
                    "name" : "ftp_scp_none",
                    "networkZone" : "Private",
                    "port" : 8321,
                    "portRange" : {
                      "from" : 1024,
                      "to" : 65535
                    },
                    "protocol" : "FTP",
                    "type" : "SERVER"
                  }
                },
                "ftpServerComprofileSSLEnabled" : {
                  "summary" : "ftpServerComprofileSSLEnabled",
                  "value" : {
                    "certificateAlias" : "admind",
                    "clientAuthenticationRequired" : "No",
                    "connectionModes" : [ "ACTIVE", "PASSIVE" ],
                    "enableSSL" : true,
                    "enabled" : true,
                    "fipsEnabled" : false,
                    "hosts" : [ "10.133.66.83" ],
                    "isPrivateCertificate" : false,
                    "name" : "ftp_scp_server_only",
                    "networkZone" : "Private",
                    "port" : 55,
                    "portRange" : {
                      "from" : 1024,
                      "to" : 65535
                    },
                    "protocol" : "FTP",
                    "securityModes" : [ "EXPLICIT" ],
                    "type" : "SERVER"
                  }
                },
                "pesitCFTClientComprofileSSLDisabled" : {
                  "summary" : "pesitCFTClientComprofileSSLDisabled",
                  "value" : {
                    "enableSSL" : false,
                    "enabled" : true,
                    "fipsEnabled" : false,
                    "name" : "TCP1_PESIT_none",
                    "networkProtocol" : "TCP",
                    "pesitLogin" : "CFTDPG-TEMPLATE-08",
                    "pesitPassword" : "08",
                    "properties" : {
                      "CNXIN" : "64",
                      "CNXINOUT" : "64",
                      "CNXOUT" : "64",
                      "NET_CLASS" : "1",
                      "NET_TYPE" : "TCP",
                      "PROT_ID" : "TCP1_PESIT1"
                    },
                    "protocol" : "PESIT",
                    "serverCertificateVerified" : false,
                    "type" : "CLIENT"
                  }
                },
                "pesitCFTClientComprofileSSLEnabled" : {
                  "summary" : "pesitCFTClientComprofileSSLEnabled",
                  "value" : {
                    "certificateAlias" : "CFTdpg-template-08",
                    "clientAuthenticationRequired" : "Yes",
                    "enableSSL" : true,
                    "enabled" : false,
                    "fipsEnabled" : false,
                    "hosts" : [ "dpg-templatecft8" ],
                    "isPrivateCertificate" : false,
                    "name" : "PESIT_mutual",
                    "networkProtocol" : "TCP",
                    "pesitLogin" : "CFTDPG-TEMPLATE-08",
                    "pesitPassword" : "CFTDPG-08",
                    "port" : 12977,
                    "properties" : {
                      "ALIAS" : "CFTdpg-template-08",
                      "CNXIN" : "2",
                      "CNXINOUT" : "4",
                      "CNXOUT" : "2",
                      "NET_CLASS" : "1",
                      "NET_TYPE" : "TCP",
                      "PROT_ID" : "prot5",
                      "SSL_ID" : "SSL_DEFAULT",
                      "SSL_PARM" : "",
                      "SSL_ROOTCID" : ""
                    },
                    "protocol" : "PESIT",
                    "type" : "SERVER"
                  }
                },
                "pesitCFTServerComprofileSSLDisabled" : {
                  "summary" : "pesitCFTServerComprofileSSLDisabled",
                  "value" : {
                    "clientAuthenticationRequired" : "Yes",
                    "enableSSL" : false,
                    "enabled" : true,
                    "fipsEnabled" : false,
                    "hosts" : [ "dpg-templatecft8" ],
                    "name" : "cft_pesit_none",
                    "networkProtocol" : "TCP",
                    "pesitLogin" : "CFTDPG-TEMPLATE-08",
                    "pesitPassword" : "08",
                    "port" : 1866,
                    "properties" : {
                      "CNXIN" : "64",
                      "CNXINOUT" : "64",
                      "CNXOUT" : "64",
                      "NET_CLASS" : "1",
                      "NET_TYPE" : "TCP",
                      "PROT_ID" : "TCP1_PESIT1"
                    },
                    "protocol" : "PESIT",
                    "type" : "SERVER"
                  }
                },
                "pesitCFTServerComprofileSSLEnabled" : {
                  "summary" : "pesitCFTServerComprofileSSLEnabled",
                  "value" : {
                    "certificateAlias" : "CFTdpg-template-08",
                    "clientAuthenticationRequired" : "Yes",
                    "enableSSL" : true,
                    "enabled" : false,
                    "fipsEnabled" : false,
                    "hosts" : [ "dpg-templatecft8" ],
                    "isPrivateCertificate" : false,
                    "name" : "cft_pesit_mutual",
                    "networkProtocol" : "TCP",
                    "pesitLogin" : "CFTDPG-TEMPLATE-08",
                    "pesitPassword" : "CFTDPG-08",
                    "port" : 12977,
                    "properties" : {
                      "ALIAS" : "CFTdpg-template-08",
                      "CNXIN" : "2",
                      "CNXINOUT" : "4",
                      "CNXOUT" : "2",
                      "NET_CLASS" : "1",
                      "NET_TYPE" : "TCP",
                      "PROT_ID" : "prot5",
                      "SSL_ID" : "SSL_DEFAULT",
                      "SSL_PARM" : "",
                      "SSL_ROOTCID" : ""
                    },
                    "protocol" : "PESIT",
                    "type" : "SERVER"
                  }
                },
                "pesitSTClientComprofileMutualAuth" : {
                  "summary" : "pesitSTClientComprofileMutualAuth",
                  "value" : {
                    "certificateAlias" : "admind",
                    "enableSSL" : true,
                    "enabled" : true,
                    "fipsEnabled" : false,
                    "isPrivateCertificate" : false,
                    "name" : "pesit_mutual",
                    "networkProtocol" : "TCP",
                    "networkZone" : "Private",
                    "pesitLogin" : "LOGIN_MUTUAL",
                    "pesitPassword" : "2",
                    "protocol" : "PESIT",
                    "serverCertificateVerified" : true,
                    "type" : "CLIENT"
                  }
                },
                "pesitSTClientComprofileSSLDisabled" : {
                  "summary" : "pesitSTClientComprofileSSLDisabled",
                  "value" : {
                    "enableSSL" : false,
                    "enabled" : true,
                    "fipsEnabled" : false,
                    "name" : "PESIT_ST_none",
                    "networkProtocol" : "TCP",
                    "networkZone" : "Private",
                    "pesitLogin" : "PESIT_ST1",
                    "pesitPassword" : "1",
                    "protocol" : "PESIT",
                    "serverCertificateVerified" : false,
                    "type" : "CLIENT"
                  }
                },
                "pesitSTClientComprofileServerOnly" : {
                  "summary" : "pesitSTClientComprofileServerOnly",
                  "value" : {
                    "enableSSL" : true,
                    "enabled" : true,
                    "fipsEnabled" : false,
                    "name" : "pesit_server_only",
                    "networkProtocol" : "TCP",
                    "networkZone" : "Private",
                    "pesitLogin" : "LOGIN3",
                    "pesitPassword" : "3",
                    "protocol" : "PESIT",
                    "serverCertificateVerified" : true,
                    "type" : "CLIENT"
                  }
                },
                "pesitSTServerComprofileSSLDisabled" : {
                  "summary" : "pesitSTServerComprofileSSLDisabled",
                  "value" : {
                    "clientAuthenticationRequired" : "No",
                    "description" : "PeSIT over Plain Socket",
                    "enableSSL" : false,
                    "enabled" : true,
                    "fipsEnabled" : false,
                    "hosts" : [ "10.133.66.83" ],
                    "name" : "ST_pesit_none",
                    "networkProtocol" : "TCP",
                    "networkZone" : "Private",
                    "pesitLogin" : "ST_DPG",
                    "pesitPassword" : "ST_DPG1",
                    "port" : 17617,
                    "protocol" : "PESIT",
                    "type" : "SERVER"
                  }
                },
                "pesitSTServerComprofileSSLEnabledClientOptional" : {
                  "summary" : "pesitSTServerComprofileSSLEnabledClientOptional",
                  "value" : {
                    "certificateAlias" : "admind",
                    "clientAuthenticationRequired" : "Yes",
                    "description" : "PeSIT over Secured Socket",
                    "enableSSL" : true,
                    "enabled" : true,
                    "fipsEnabled" : false,
                    "hosts" : [ "10.133.66.83" ],
                    "isPrivateCertificate" : false,
                    "name" : "ST_pesit_mutual",
                    "networkProtocol" : "TCP",
                    "networkZone" : "Private",
                    "pesitLogin" : "ST_DPG",
                    "pesitPassword" : "ST_DPG2",
                    "port" : 17627,
                    "protocol" : "PESIT",
                    "type" : "SERVER"
                  }
                },
                "sftpClientComprofilePublicKey" : {
                  "summary" : "sftpClientComprofilePublicKey",
                  "value" : {
                    "clientAuthentication" : "Public_key",
                    "fingerPrintVerified" : false,
                    "fipsEnabled" : false,
                    "keyAlias" : "my_ssh_key",
                    "login" : "relay",
                    "name" : "relayCCP",
                    "networkZone" : "Private",
                    "protocol" : "SFTP",
                    "type" : "CLIENT"
                  }
                },
                "sftpServerComprofile" : {
                  "summary" : "sftpServerComprofile",
                  "value" : {
                    "clientAuthentication" : "PUBLIC_KEY",
                    "enabled" : true,
                    "fipsEnabled" : false,
                    "hasPrivateKey" : true,
                    "hosts" : [ "10.133.65.83" ],
                    "keyAlias" : "sftp1.priv.p8",
                    "name" : "sftp1",
                    "networkZone" : "Private",
                    "port" : 43,
                    "protocol" : "SFTP",
                    "type" : "SERVER"
                  }
                }
              },
              "schema" : {
                "$ref" : "#/components/schemas/RComProfile"
              }
            }
          }
        }
      }
    },
    "/v2/products/{businessId}/communicationprofiles/synchronizeserverprofiles" : {
      "post" : {
        "operationId" : "synchronizeServerProfiles",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The product business id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "_forced",
          "in" : "query",
          "description" : "To force updating the product and apply the differences on profiles.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The communication profiles are identical in both places.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RSynchronizeResults"
                }
              }
            }
          },
          "400" : {
            "description" : "The product plugin had an error getting the server communication profiles from the product."
          },
          "401" : {
            "description" : "The user is not authorized to update product communication profiles."
          },
          "404" : {
            "description" : "The product with the given businessId doesn't exist."
          },
          "412" : {
            "description" : "The communication profiles are different. To perform the operation and apply the differences, set the _forced parameter to true."
          }
        },
        "summary" : "Synchronizes server communication profiles definition with what exists on the product.",
        "description" : "\n If there is a difference in profiles a report is returned.Access enforcement <b>always performed</b> (resource is <b>Product</b>, action is <b>Synchronize_Profile</b>)",
        "tags" : [ "products" ]
      }
    },
    "/v2/products/{businessId}/communicationprofiles/{cpid}" : {
      "delete" : {
        "operationId" : "deleteProductComprofileById",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The product business id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "cpid",
          "in" : "path",
          "description" : "The communication profile business id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "_forced",
          "in" : "query",
          "description" : "To force deleting the product communication profile and apply the\n            impacts on flows.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "The user is not authorized to delete product communication profiles."
          },
          "404" : {
            "description" : "Communication profile with the given business id does or\n              product with the given id not exist."
          },
          "412" : {
            "description" : "The delete of the product communication profile has an\n              impact on flows. To perform the operation regardless of its\n              impact, set the _forced parameter to true."
          }
        },
        "summary" : "Deletes a communication profile from the given product.",
        "description" : "<b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Product</b>, action is <b>Delete_Profile</b>)",
        "tags" : [ "products" ]
      },
      "get" : {
        "operationId" : "getProductComprofileById",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The product business id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "cpid",
          "in" : "path",
          "description" : "The communication profile business id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "_brief",
          "in" : "query",
          "description" : "Return the full product communication profile.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "X-EncryptionKey",
          "in" : "header",
          "description" : "header X-EncryptionKey encryption key used for private key in\n            base64 format.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The product communication profile with the given id is\n              found and it is returned in response body.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RComProfile"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "The user is not authorized to view the communication profile."
          },
          "404" : {
            "description" : "The product communication profile or the product does not\n              exist."
          }
        },
        "summary" : "Retrieves a communication profile from the given product.",
        "description" : "<b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Product</b>, action is <b>View_Profile</b>)",
        "tags" : [ "products" ]
      },
      "put" : {
        "operationId" : "updateProductComprofile",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The product business id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "cpid",
          "in" : "path",
          "description" : "The communication profile business id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "_body",
          "in" : "query",
          "description" : "",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "_forced",
          "in" : "query",
          "description" : "To force updating the product and apply the impacts on flows.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "X-EncryptionKey",
          "in" : "header",
          "description" : "header X-EncryptionKey encryption key used for private key in\n            base64 format.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The communication profile is successfully updated.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RComProfile"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "The user is not authorized to update product communication profiles."
          },
          "404" : {
            "description" : "The communication profile with the given businessId doesn't\n              exist."
          },
          "412" : {
            "description" : "The communication profile update has has an impact on\n              flows. To perform the operation regardless of its impact, set\n              the _forced parameter to true."
          }
        },
        "summary" : "Updates a product communication profile.",
        "description" : "\n\n <p>\n The product communication profile update should follow these rules:\n <ul>\n <li>If the update body does not contain all the mandatory fields, the\n operation is rejected.</li>\n <li>If the update body contains the mandatory fields, but does not contain\n some of the non-mandatory fields, these fields take the default values from\n GUI.</li>\n <li>If the product already contains a communication profile, and the API\n product update body does not contain it, the communication profile is\n deleted.</li>\n <li>If enableSSL=true, a certificate should be provided. The certificate is\n included in the body of the API, encoded in base64 in the parameter\n certificateContent.</li>\n <li>The certificateAlias should be unique in the product.</li>\n </ul>\n The mandatory fields for each protocol are:\n <ul>\n <li>PESIT: host, port, PESIT login</li>\n <li>FTP: host, port</li>\n <li>HTTP: URLs or (host and port)</li>\n <li>SFTP: host, port</li>\n </ul>\n For more information, see GET /products.\n </p><br><b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Product</b>, action is <b>Modify_Profile</b>)",
        "tags" : [ "products" ],
        "requestBody" : {
          "description" : "The communication profile to update.",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RComProfile"
              }
            }
          }
        }
      }
    },
    "/v2/products/{businessId}/pgpkeys" : {
      "delete" : {
        "operationId" : "deleteProductPgpKeyByName",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The business id of the product.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "name",
          "in" : "query",
          "description" : "The PGP key name. Two PGP keys cannot have the same name.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "businessId",
          "in" : "query",
          "description" : "The business ids of the pgp keys to delete. Can delete multiple items.",
          "required" : false,
          "schema" : {
            "items" : {
              "type" : "string"
            },
            "type" : "array"
          }
        }, {
          "name" : "_forced",
          "in" : "query",
          "description" : "To force deleting the pgp key and apply the impacts.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The product exists and PGP key is removed"
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "The user is not authorized to delete the pgp key."
          },
          "404" : {
            "description" : "The product does not exist or the PGP key with the given\n              name or business id does not exist on product."
          }
        },
        "summary" : "Remove a PGP key by name or business ids for a given product.",
        "description" : "<b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Product</b>, action is <b>Delete_Credential</b>)",
        "tags" : [ "products" ]
      },
      "get" : {
        "operationId" : "getProductPgpKeys",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The business id of the product.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "name",
          "in" : "query",
          "description" : "Search for the PGP key having this name. Two PGP keys cannot have\n            the same name.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "X-EncryptionKey",
          "in" : "header",
          "description" : "header X-EncryptionKey encryption key used for private key in\n            base64 format.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The product exists and the list of PGP keys will be\n              returned.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "items" : {
                    "$ref" : "#/components/schemas/RPgpKeyCredential"
                  },
                  "type" : "array"
                }
              }
            }
          },
          "400" : {
            "description" : "The businessId of the product is invalid."
          },
          "401" : {
            "description" : "The user does no have rights view the pgpKeys of this product."
          },
          "404" : {
            "description" : "The product does not exist."
          }
        },
        "summary" : "Retrieves a list of PGP keys for a given product.",
        "description" : "<b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Product</b>, action is <b>View_Credential</b>)",
        "tags" : [ "products" ]
      },
      "post" : {
        "operationId" : "createProductPgpKey",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The id of the product that will contain the PGP Key.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "_body",
          "in" : "query",
          "description" : "Controls if the body of the created object is returned in the\n            response. Default value is <code>true</code>.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "The PGP Key was successfully created.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RPgpKeyCredential"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "The user does no have right to create the pgpKey"
          },
          "404" : {
            "description" : "The product identified by productID does not exist."
          },
          "500" : {
            "description" : "Internal server error."
          }
        },
        "summary" : "Creates a new PGP Key for a product.",
        "description" : "Access enforcement <b>always performed</b> (resource is <b>Product</b>, action is <b>Create_Credential</b>)",
        "tags" : [ "products" ],
        "requestBody" : {
          "description" : "The PGP Key to create.",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RPgpKeyCredential"
              }
            }
          }
        }
      }
    },
    "/v2/products/{businessId}/pgpkeys/{keyId}" : {
      "delete" : {
        "operationId" : "deleteProductPgpKeyById",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The business id of the product.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "keyId",
          "in" : "path",
          "description" : "The key id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "_forced",
          "in" : "query",
          "description" : "To force deleting the pgp key and apply the impacts.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The product exists and PGP key is removed"
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "The user is not authorized to delete the pgp key."
          },
          "404" : {
            "description" : "The product does not exist or the PGP key with the given\n              name does not exist on product."
          }
        },
        "summary" : "Remove a PGP key by id for a given product.",
        "description" : "<b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Product</b>, action is <b>Delete_Credential</b>)",
        "tags" : [ "products" ]
      },
      "get" : {
        "operationId" : "getProductPgpKeyById",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The business id of the product.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "keyId",
          "in" : "path",
          "description" : "The key id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "X-EncryptionKey",
          "in" : "header",
          "description" : "encryption key used for private key in base64 format",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The product and the certificate exist"
          },
          "400" : {
            "description" : "Invalid arguments."
          },
          "401" : {
            "description" : "The user is not authorized to view the pgp key."
          },
          "404" : {
            "description" : "The product does not exist or the key with the given id\n              does not exists."
          }
        },
        "summary" : "Retrieves the PGP key with given id for a given product.",
        "description" : " In order to retrieve\n the private key, you need to put the encryption key encoded in base64 in the\n header X-EncryptionKey<br><b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Product</b>, action is <b>View_Credential</b>)",
        "tags" : [ "products" ]
      },
      "put" : {
        "operationId" : "updateProductPgpKey",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The id of the product that contains the PGP key.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "keyId",
          "in" : "path",
          "description" : "The key id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "_forced",
          "in" : "query",
          "description" : "To force updating the product key and apply the impacts on flows.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "_body",
          "in" : "query",
          "description" : "Controls if the body of the created object is returned in the\n            response. Default value is <code>true</code>.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The key was successfully updated.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RPgpKeyCredential"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "The user does no have right to update the key"
          },
          "404" : {
            "description" : "The product identified by productID does not exist or the\n              key identified by keyId does not exists."
          },
          "412" : {
            "description" : "The update of the product key has an impact on flows. To\n              perform the operation regardless of its impact, set the _forced\n              parameter to true."
          },
          "500" : {
            "description" : "Internal server error."
          }
        },
        "summary" : "Updates an existing PGP key for a product.",
        "description" : "<b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Product</b>, action is <b>Modify_Credential</b>)",
        "tags" : [ "products" ],
        "requestBody" : {
          "description" : "The PGP key to be updated.",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RPgpKeyCredential"
              }
            }
          }
        }
      }
    },
    "/v2/products/{businessId}/productplugin" : {
      "get" : {
        "operationId" : "getProductPluginForProductId",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The business id of the product.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The product plugin exists.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RProductPlugin"
                }
              }
            }
          },
          "404" : {
            "description" : "The product or product plugin does not exist."
          }
        },
        "summary" : "Retrieves the product plugin for given product.",
        "description" : "Access enforcement <b>always performed</b> (resource is <b>Product_Plugin</b>, action is <b>View</b>)",
        "tags" : [ "products" ]
      }
    },
    "/v2/products/{businessId}/sshkeys" : {
      "delete" : {
        "operationId" : "deleteProductSshKeyByNameOrIds",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The business id of the product.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "name",
          "in" : "query",
          "description" : "The key name. Two ssh keys cannot have the same name.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "businessId",
          "in" : "query",
          "description" : "The business id of the ssh keys to delete. Can delete multiple items.",
          "required" : false,
          "schema" : {
            "items" : {
              "type" : "string"
            },
            "type" : "array"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The product exists and key is removed"
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "The user is not authorized to delete the sshKey."
          },
          "404" : {
            "description" : "The product does not exist or the key with the given name\n              does not exist on product."
          },
          "412" : {
            "description" : "Some of the ssh keys are used in communication profiles and cannot be deleted"
          }
        },
        "summary" : "Remove a key by name or business ids for a given product.",
        "description" : "<b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Product</b>, action is <b>Delete_Credential</b>)",
        "tags" : [ "products" ]
      },
      "get" : {
        "operationId" : "getProductSshKeys",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The business id of the product.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "name",
          "in" : "query",
          "description" : "Search for the SSh key having this name. Two SSH keys cannot have\n            the same alias.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "X-EncryptionKey",
          "in" : "header",
          "description" : "header X-EncryptionKey encryption key used for private key in\n            base64 format.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The product exists and the list of SSH keys will be\n              returned.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "items" : {
                    "$ref" : "#/components/schemas/RKeyCredential"
                  },
                  "type" : "array"
                }
              }
            }
          },
          "400" : {
            "description" : "The product businessId is invalid."
          },
          "404" : {
            "description" : "The product does not exist."
          }
        },
        "summary" : "Retrieves a list of ssh keys for a given product.",
        "description" : " In order to retrieve the\n private key, you need to put the encryption key encoded in base64 in the\n header X-EncryptionKey.<br><b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Product</b>, action is <b>View_Credential</b>)",
        "tags" : [ "products" ]
      },
      "post" : {
        "operationId" : "createProductSshKey",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The id of the product that will contain the SSH Key.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "_body",
          "in" : "query",
          "description" : "Controls if the body of the created object is returned in the\n            response. Default value is <code>true</code>.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "The SSH Key was successfully created.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RKeyCredential"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "The user is not authorized to create the sshKey"
          },
          "403" : {
            "description" : "The user does no have right to create the sshKey"
          },
          "404" : {
            "description" : "The product identified by productID does not exist."
          },
          "500" : {
            "description" : "Internal server error."
          }
        },
        "summary" : "Creates a new SSH Key for a product.",
        "description" : "<b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Product</b>, action is <b>Create_Credential</b>)",
        "tags" : [ "products" ],
        "requestBody" : {
          "description" : "The SSH Key to create.99",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RKeyCredential"
              }
            }
          }
        }
      }
    },
    "/v2/products/{businessId}/sshkeys/{keyId}" : {
      "delete" : {
        "operationId" : "deleteProductSshKeyById",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The business id of the product.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "keyId",
          "in" : "path",
          "description" : "The key id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The product exists and key is removed"
          },
          "400" : {
            "description" : "The user is not authorized to delete the sshKey."
          },
          "404" : {
            "description" : "The product does not exist or the key with the given id\n              does not exists."
          },
          "412" : {
            "description" : "The ssh key is used in communication profiles and cannot be deleted"
          }
        },
        "summary" : "Removes the key with given id for a given product.",
        "description" : "<b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Product</b>, action is <b>Delete_Credential</b>)",
        "tags" : [ "products" ]
      },
      "get" : {
        "operationId" : "getProductSshKeyById",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The business id of the product.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "keyId",
          "in" : "path",
          "description" : "The key id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "X-EncryptionKey",
          "in" : "header",
          "description" : "encryption key used for private key in base64 format",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The product and the key exist"
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "The user is not authorized to view the sshKey."
          },
          "404" : {
            "description" : "The product does not exist or the key with the given id\n              does not exists."
          }
        },
        "summary" : "Retrieves the ssh key with given id for a given product.",
        "description" : " In order to retrieve\n the private key, you need to put the encryption key encoded in base64 in the\n header X-EncryptionKey<br><b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Product</b>, action is <b>View_Credential</b>)",
        "tags" : [ "products" ]
      },
      "put" : {
        "operationId" : "updateProductSshKey",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The id of the product that contains the SSH key.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "keyId",
          "in" : "path",
          "description" : "The key id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "_forced",
          "in" : "query",
          "description" : "To force updating the product key and apply the impacts on flows.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "_body",
          "in" : "query",
          "description" : "Controls if the body of the created object is returned in the\n            response. Default value is <code>true</code>.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The key was successfully updated.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RKeyCredential"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "401" : {
            "description" : "The user is not authorized to delete the sshKey."
          },
          "403" : {
            "description" : "The user does no have right to update the key"
          },
          "404" : {
            "description" : "The product identified by productID does not exist or the\n              key identified by keyId does not exists."
          },
          "412" : {
            "description" : "The update of the product key has an impact on flows. To\n              perform the operation regardless of its impact, set the _forced\n              parameter to true."
          },
          "500" : {
            "description" : "Internal server error."
          }
        },
        "summary" : "Updates an existing key credential for a product.",
        "description" : "<b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Product</b>, action is <b>Modify_Credential</b>)",
        "tags" : [ "products" ],
        "requestBody" : {
          "description" : "The SSH key to be updated.",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RKeyCredential"
              }
            }
          }
        }
      }
    },
    "/v2/products/{businessId}/synchronizebox" : {
      "post" : {
        "operationId" : "syncProductsWithBackup",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The business id of the product to synchronize",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The backup products were synchronized.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RSynchronizationResult"
                }
              }
            }
          },
          "400" : {
            "description" : "The business id is not valid"
          },
          "404" : {
            "description" : "The master product was not found"
          },
          "500" : {
            "description" : "Internal server error"
          }
        },
        "summary" : "Synchronizes a product with it's backup products",
        "description" : "\n\n <p>\n Communication profiles and credentials of the master product are copied on\n each backup product. Identical communication profiles and credentials are\n kept if they already exists on the backup\n </p><br><b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Product</b>, action is <b>Modify</b>)<br>",
        "tags" : [ "products" ]
      }
    },
    "/v2/protocols" : {
      "get" : {
        "operationId" : "listProtocols",
        "parameters" : [ {
          "name" : "name",
          "in" : "query",
          "description" : "Search for protocols having this name. Enclose the search value in special character % to filter items containing this value.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "pluginName",
          "in" : "query",
          "description" : "Search for protocols exposed by this plugin. Enclose the search value in special character % to filter items containing this value.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "_brief",
          "in" : "query",
          "description" : "Flag indicating that all the properties of the protocol must be returned or just selected properties.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Body contains the list of filtered protocols.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "items" : {
                    "$ref" : "#/components/schemas/RProtocol"
                  },
                  "type" : "array"
                }
              }
            }
          }
        },
        "summary" : "Retrieves a list of protocols.",
        "description" : "<b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Protocol</b>, action is <b>View</b>)",
        "tags" : [ "protocols" ]
      }
    },
    "/v2/protocols/{businessId}" : {
      "get" : {
        "operationId" : "getProtocolById",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The business id of the protocol.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The protocol exists.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RProtocol"
                }
              }
            }
          },
          "404" : {
            "description" : "The protocol does not exist."
          }
        },
        "summary" : "Retrieves a given protocol.",
        "description" : "<b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Protocol</b>, action is <b>View</b>)",
        "tags" : [ "protocols" ]
      },
      "head" : {
        "operationId" : "protocolExists",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The business id of the protocol.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The protocol with given id exists.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          },
          "404" : {
            "description" : "The protocol with given id doesn't exist."
          }
        },
        "summary" : "Checks if the given protocol exists.",
        "description" : "<b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Protocol</b>, action is <b>View</b>)",
        "tags" : [ "protocols" ]
      }
    },
    "/v2/protocols/{name}/{type}/{parentType}" : {
      "get" : {
        "operationId" : "getSchemaForProtocol",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "The name of the protocol.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "type",
          "in" : "path",
          "description" : "The type of the communication profile, which can be CLIENT or SERVER.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "parentType",
          "in" : "path",
          "description" : "The type of the parent on which the communication profile will be created.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The protocol exists.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Map"
                }
              }
            }
          },
          "404" : {
            "description" : "The protocol does not exist."
          }
        },
        "summary" : "Retrieves the schema for creating a communication profile for a protocol.",
        "description" : "<b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Protocol</b>, action is <b>View</b>)",
        "tags" : [ "protocols" ]
      }
    },
    "/v2/st/register" : {
      "post" : {
        "operationId" : "registerST",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "The product registration process is completed.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RPartner"
                }
              }
            }
          },
          "400" : {
            "description" : "The ST product configuration fields are not valid."
          },
          "403" : {
            "description" : "The user does no have right to register products\n              (Resource=Product, Action=View)."
          }
        },
        "summary" : "Register a ST Product.",
        "description" : "<b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Product</b>, action is <b>Create</b>)",
        "tags" : [ "st" ],
        "requestBody" : {
          "description" : "The ST product configuration",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RSTProductConfiguration"
              }
            }
          }
        }
      }
    },
    "/v2/st/{businessId}/adminca" : {
      "put" : {
        "operationId" : "updateSTCACertificate",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The bussinessId of the middleware.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The ST admin CA Certificate of the product updated successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          },
          "400" : {
            "description" : "The business id is not valid"
          },
          "403" : {
            "description" : "The user does not have the right to update the ST admin CA Certificate"
          },
          "404" : {
            "description" : "The product for which the admin CA Certificate is to be modified was not found"
          }
        },
        "summary" : "Update the Certificate of a ST Product.",
        "description" : "Access enforcement <b>always performed</b> (resource is <b>Product</b>, action is <b>Modify</b>)",
        "tags" : [ "st" ],
        "requestBody" : {
          "description" : "The new CA as string",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "string"
              }
            }
          }
        }
      }
    },
    "/v2/subscriptions" : {
      "delete" : {
        "operationId" : "deleteSubscriptionsById",
        "parameters" : [ {
          "name" : "templateName",
          "in" : "query",
          "description" : "Search for subscriptions having this template name. Enclose the search value in\n            special character % to filter items containing this value.\n            Add % after the search value to filter items starting with this value.\n            Add % before the search value to filter items ending with this value.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "participantName",
          "in" : "query",
          "description" : "Search for subscriptions having this participant name. Enclose the search value in\n            special character % to filter items containing this value.\n            Add % after the search value to filter items starting with this value.\n            Add % before the search value to filter items ending with this value.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "businessId",
          "in" : "query",
          "description" : "The business id of the subscription to delete. Can delete multiple items.",
          "required" : false,
          "schema" : {
            "items" : {
              "type" : "string"
            },
            "type" : "array"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Subscriptions were deleted, see return body to see how many.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          },
          "400" : {
            "description" : "No filter selected. Use at least one."
          }
        },
        "summary" : "Deletes a list of subscriptions.",
        "description" : "<b>Since: </b>FM v2.0<br>Access enforcement <b>always performed</b> (resource is <b>Subscription</b>, action is <b>Delete</b>)",
        "tags" : [ "subscriptions" ]
      },
      "get" : {
        "operationId" : "listSubscriptions",
        "parameters" : [ {
          "name" : "search",
          "in" : "query",
          "description" : "Search for subscriptions containing this value in 'name', 'patternName',\n            'templateName', 'flowName', 'status.code' or in 'tags'.\n            When searching for statuses, keep in mind that composed values,\n            such as DEPLOYED_IN_ERROR, REMOVED_IN_ERROR or SAVED_NOT_DEPLOYED,\n            contain underscores as separators.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "name",
          "in" : "query",
          "description" : "Search for subscriptions having this name. Enclose the search value in\n            special character % to filter items containing this value.\n            Add % after the search value to filter items starting with this value.\n            Add % before the search value to filter items ending with this value.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "tags",
          "in" : "query",
          "description" : "Search for subscriptions having this tag. Enclose the search value in\n            special character % to filter items containing this value.\n            Add % after the search value to filter items starting with this value.\n            Add % before the search value to filter items ending with this value",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "patternName",
          "in" : "query",
          "description" : "Search for subscriptions having this pattern name. Enclose the search\n            value in special character % to filter items containing this value.\n            Add % after the search value to filter items starting with this value.\n            Add % before the search value to filter items ending with this value.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "templateName",
          "in" : "query",
          "description" : "Search for subscriptions having this template name. Enclose the search value in\n            special character % to filter items containing this value.\n            Add % after the search value to filter items starting with this value.\n            Add % before the search value to filter items ending with this value.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "flowName",
          "in" : "query",
          "description" : "Search for subscriptions having this flow name. Enclose the search value in\n            special character % to filter items containing this value.\n            Add % after the search value to filter items starting with this value.\n            Add % before the search value to filter items ending with this value.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "participantName",
          "in" : "query",
          "description" : "Search for subscriptions having this participant name. Enclose the search value in\n            special character % to filter items containing this value.\n            Add % after the search value to filter items starting with this value.\n            Add % before the search value to filter items ending with this value.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "participantType",
          "in" : "query",
          "description" : "Search for subscriptions having this type for subscriber participant.\n            Type can be one of APPLICATION, PARTNER.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "participantPosition",
          "in" : "query",
          "description" : "Search for subscriptions with the subscriber participant on the indicated position.\n            Position can be one of: 'source', 'target'.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "status",
          "in" : "query",
          "description" : "Search for subscriptions having this status. Possible values are:\n            SAVED, SAVED_NOT_DEPLOYED, DEPLOYING, DEPLOYING_IN_ERROR, DEPLOYED,\n            DEPLOYED_IN_ERROR, REMOVED, REMOVED_IN_ERROR, REMOVING, WAITING_FOR_APPROVAL,\n            APPROVED, REJECTED.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "flowId",
          "in" : "query",
          "description" : "Search for subscriptions having this flowId.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "pesitIDF",
          "in" : "query",
          "description" : "Search for subscriptions having this PeSIT IDF.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "updatedSince",
          "in" : "query",
          "description" : "Search for subscriptions updated in the specified period.\n            Allowed values are: 1hour, 1day, 1week, 1month. If startTime is also set,\n            the startTime value will be used for filtering.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "startTime",
          "in" : "query",
          "description" : "Search for subscriptions after a specific time. Use unix epoch time in milliseconds.",
          "required" : false,
          "schema" : {
            "format" : "int64",
            "type" : "integer"
          }
        }, {
          "name" : "endTime",
          "in" : "query",
          "description" : "Search for subscriptions before a specific time. Use unix epoch time in milliseconds.",
          "required" : false,
          "schema" : {
            "format" : "int64",
            "type" : "integer"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Get subscriptions starting from the specified offset\n            in the list of records returned by the database.\n            If not set, offset defaults to 0. Legal values: 0 <= offset <= 2147483647\"",
          "required" : false,
          "schema" : {
            "format" : "int64",
            "type" : "integer"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of items returned per request.",
          "required" : false,
          "schema" : {
            "format" : "int64",
            "type" : "integer"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "Sort subscriptions using a specific field from result record.\n            Use in conjunction with 'ascending' parameter.\n            Valid values are: name, status, patternName, templateName, flowName,\n            changeDate, statusChangeDate, templateVersion.\n            It defaults to 'changeDate'.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ascending",
          "in" : "query",
          "description" : "Use in conjunction with 'sort' parameter.\n            Defaults to 'false' - descending order.\n            Sort defaults to 'changeDate' - (if none of 'sort' or 'ascending'\n            are set, the latest modified subscriptions will be returned first).",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "_brief",
          "in" : "query",
          "description" : "Flag indicating that all the properties of the subscription must be\n            returned or just selected properties.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "X-EncryptionKey",
          "in" : "header",
          "description" : "header X-EncryptionKey encryption key used for private key in\n            base64 format. If not present the password will not be returned.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Body contains the list of filtered subscriptions.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "items" : {
                    "$ref" : "#/components/schemas/RSubscription"
                  },
                  "type" : "array"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid startTime, endTime, offset, limit, sort criteria or invalid status\n              to search for. See swagger documentation for available options."
          }
        },
        "summary" : "Retrieves a list of subscriptions.",
        "description" : "<b>Since: </b>FM v2.0<br>Access enforcement <b>always performed</b> (resource is <b>Subscription</b>, action is <b>View</b>)",
        "tags" : [ "subscriptions" ]
      },
      "post" : {
        "operationId" : "createSubscription",
        "parameters" : [ {
          "name" : "_body",
          "in" : "query",
          "description" : "Controls if the body of the created object is returned in the\n            response. Default value is <code>true</code>.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "X-EncryptionKey",
          "in" : "header",
          "description" : "header X-EncryptionKey encryption key used for private key in\n            base64 format. If not present the password will not be returned.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "_forced",
          "in" : "query",
          "description" : "To force creating the subscription and apply the impacts on flows. Default value is <code>false</code>.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "deploy",
          "in" : "query",
          "description" : "True if the subscription should also be deployed. Default value is <code>false</code>.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "The subscription was successfully created.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RSubscription"
                }
              }
            }
          },
          "400" : {
            "description" : "The subscription fields are not valid."
          },
          "403" : {
            "description" : "The user does no have right to create subscriptions\n              (Resource=Subscription, Action=Create)."
          },
          "404" : {
            "description" : "A referenced object does not exist."
          },
          "409" : {
            "description" : "A subscription with the same name already exists."
          },
          "412" : {
            "description" : "The creation of the subscription has an impact on flows. To perform the operation regardless of its impact, set the _forced parameter to true."
          }
        },
        "summary" : "Creates a new subscription.",
        "description" : "\n\n <p>\n  For the JSON syntax see GET /subscriptions for more information.\n </p><br><b>Since: </b>FM v2.0<br>Access enforcement <b>always performed</b> (resource is <b>Subscription</b>, action is <b>Create</b>)",
        "tags" : [ "subscriptions" ],
        "requestBody" : {
          "description" : "The subscription to create.",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RSubscription"
              }
            }
          }
        }
      }
    },
    "/v2/subscriptions/deploybox" : {
      "post" : {
        "operationId" : "deploySubscriptions",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "The deploy request has been completed.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RBulkActionResult"
                }
              }
            }
          },
          "400" : {
            "description" : "Business ids is empty or invalid."
          }
        },
        "summary" : "Deploys a list of subscriptions based on their business ids.",
        "description" : "Access enforcement <b>always performed</b> (resource is <b>Subscription</b>, action is <b>Deploy</b>)",
        "tags" : [ "subscriptions" ],
        "requestBody" : {
          "description" : "A list of subscription business ids to deploy.",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "items" : {
                  "type" : "string"
                },
                "type" : "array"
              }
            }
          }
        }
      }
    },
    "/v2/subscriptions/forcedeletebox" : {
      "delete" : {
        "operationId" : "forceDeleteSubscriptions",
        "parameters" : [ {
          "name" : "templateName",
          "in" : "query",
          "description" : "Search for subscriptions having this template name. Enclose the search value in\n            special character % to filter items containing this value.\n            Add % after the search value to filter items starting with this value.\n            Add % before the search value to filter items ending with this value.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "participantName",
          "in" : "query",
          "description" : "Search for subscriptions having this participant name. Enclose the search value in\n            special character % to filter items containing this value.\n            Add % after the search value to filter items starting with this value.\n            Add % before the search value to filter items ending with this value.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "businessId",
          "in" : "query",
          "description" : "The business id of the subscription to delete. Can delete multiple items.",
          "required" : false,
          "schema" : {
            "items" : {
              "type" : "string"
            },
            "type" : "array"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Subscriptions were deleted, see return body to see how many.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          },
          "400" : {
            "description" : "No template name provided."
          }
        },
        "summary" : "Force delete a list of subscriptions.",
        "description" : "<b>Since: </b>FM v2.0<br>Access enforcement <b>always performed</b> (resource is <b>Subscription</b>, action is <b>Force_Delete</b>)",
        "tags" : [ "subscriptions" ]
      }
    },
    "/v2/subscriptions/{businessId}" : {
      "delete" : {
        "operationId" : "deleteSubscriptionById",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The subscription's business id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "_forced",
          "in" : "query",
          "description" : "",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Subscription with the given business id was deleted.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          },
          "404" : {
            "description" : "Subscription with the given businessId doesn't exist."
          },
          "412" : {
            "description" : "Deleting the subscription has an impact. To perform the\n              operation regardless of its impact, set the _forced parameter to\n              true."
          }
        },
        "summary" : "Deletes a subscription.",
        "description" : "<b>Since: </b>FM v2.0<br>Access enforcement <b>always performed</b> (resource is <b>Subscription</b>, action is <b>Delete</b>)",
        "tags" : [ "subscriptions" ]
      },
      "get" : {
        "operationId" : "getSubscriptionById",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The business id of the subscription.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "X-EncryptionKey",
          "in" : "header",
          "description" : "header X-EncryptionKey encryption key used for private key in\n            base64 format. If not present the password will not be returned.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "_promote",
          "in" : "query",
          "description" : "True if the template is for promotion, false if the template is not for promotion. Default value is false.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The subscription exists.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RSubscription"
                }
              }
            }
          },
          "404" : {
            "description" : "The subscription does not exist."
          }
        },
        "summary" : "Retrieves a given subscription.",
        "description" : "\n\n <p>\n For more information about subscriptions, see GET /subscriptions.\n </p><br><b>Since: </b>FM v2.0<br>Access enforcement <b>always performed</b> (resource is <b>Subscription</b>, action is <b>View</b>)",
        "tags" : [ "subscriptions" ]
      },
      "head" : {
        "operationId" : "checkSubscriptionExistsById",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The subscription business id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The subscription with given id exists.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          },
          "404" : {
            "description" : "The subscription with given id doesn't exist."
          }
        },
        "summary" : "Checks if the given subscription exists.",
        "description" : "<b>Since: </b>FM v2.0<br>Access enforcement <b>always performed</b> (resource is <b>Subscription</b>, action is <b>View</b>)",
        "tags" : [ "subscriptions" ]
      },
      "put" : {
        "operationId" : "updateSubscription",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The subscription business id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "_body",
          "in" : "query",
          "description" : "Controls if the body of the created object is returned in the\n            response. Default value is <code>true</code>.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "X-EncryptionKey",
          "in" : "header",
          "description" : "",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "deploy",
          "in" : "query",
          "description" : "True if the subscription should also be deployed. Default value is <code>false</code>.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The subscription is successfully updated.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RSubscription"
                }
              }
            }
          },
          "400" : {
            "description" : "The subscription fields are not valid."
          },
          "404" : {
            "description" : "The subscription with the given businessId doesn't exist."
          }
        },
        "summary" : "Updates a subscription.",
        "description" : "\n\n <p>\n PUT is idempotent, so PUT requests you MUST send all the available\n properties/values, not just the ones you want to change. <br>\n It is a good practice to query for a subscription, modify what needed\n and then resend the whole subscription.\n </p>Access enforcement <b>always performed</b> (resource is <b>Subscription</b>, action is <b>Modify</b>)",
        "tags" : [ "subscriptions" ],
        "requestBody" : {
          "description" : "The subscription to update.",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RSubscription"
              }
            }
          }
        }
      }
    },
    "/v2/subscriptions/{businessId}/approvalbox" : {
      "post" : {
        "operationId" : "updateApprovalStatus",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The subscription business id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "The action was executed successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          },
          "400" : {
            "description" : "The fields are not valid or the subscription does not support approval actions."
          },
          "403" : {
            "description" : "The user does not have rights to execute the specified action on the subscription state (Resource=Subscription, Action=Request_Approval, Approve or Reject)."
          },
          "404" : {
            "description" : "The subscription with the given business id does not exist."
          },
          "409" : {
            "description" : "The operation cannot be performed due to the current subscription status."
          }
        },
        "summary" : "Request approval, approve or reject a subscription",
        "description" : "Access enforcement <b>always performed</b> (resource is <b>None</b>, action is <b>None</b>)",
        "tags" : [ "subscriptions" ],
        "requestBody" : {
          "description" : "Object that contains the approval action and its corresponding message.",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RSubscriptionApproval"
              }
            }
          }
        }
      }
    },
    "/v2/tags" : {
      "put" : {
        "operationId" : "updateTags",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "The resources are successfully updated.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RTags"
                }
              }
            }
          },
          "400" : {
            "description" : "The rtag fields are not valid."
          },
          "404" : {
            "description" : "The user has no rights to make an update on the given\n              resources."
          }
        },
        "summary" : "Updates the list of tags for some given ids.",
        "description" : "\n\n <p>\n Type can be ApplicationsGroups, Applications, Flows, Partners, Products,\n UnmanagedProducts. <br>\n Tags is a string with the list of tags that is updated on all entities.\n </p><br><b>Since: </b>FM v1.0<br>Access enforcement <b>never performed</b>...",
        "tags" : [ "tags" ],
        "requestBody" : {
          "description" : "The resource that contains the list of the resource Ids that must\n            be updated and the list of tags",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RTags"
              }
            }
          }
        }
      }
    },
    "/v2/users/me" : {
      "get" : {
        "operationId" : "v2_users_me_getWhoami",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "The current user was found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RUserInfo"
                }
              }
            }
          },
          "401" : {
            "description" : "The current user is not authenticated properly"
          },
          "404" : {
            "description" : "The current user is internal and was removed by an administrator"
          }
        },
        "summary" : "Retrieves the current user basic information",
        "description" : "<b>Since: </b>FM v1.0<br>Access enforcement <b>never performed</b>...",
        "tags" : [ "users" ]
      }
    },
    "/autz/privileges" : {
      "delete" : {
        "operationId" : "deletePrivilegeByFilter",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "query",
          "description" : "The business id of the privilege to delete. Can delete multiple items. If no parameter is given, all privileges are removed.\n \t\t\t\t\tUse parameters to narrow the list of privileges to be deleted.",
          "required" : false,
          "schema" : {
            "items" : {
              "type" : "string"
            },
            "type" : "array"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "privileges are successfully deleted.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          },
          "403" : {
            "description" : "The user doesn't have right to delete the privilege."
          },
          "412" : {
            "description" : "Deleting the privilege has an impact on flows.\n \t\t To perform the operation regardless of its impact, set the _forced parameter to true."
          }
        },
        "summary" : "Deletes a list of privileges.",
        "description" : "Access enforcement <b>always performed</b> (resource is <b>Authorization_management</b>, action is <b>Delete</b>)",
        "tags" : [ "privileges" ]
      },
      "get" : {
        "operationId" : "listPrivileges",
        "parameters" : [ {
          "name" : "search",
          "in" : "query",
          "description" : "Search for privileges containing this value in 'name', 'description' or 'resource'.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "name",
          "in" : "query",
          "description" : "Search for privileges having this name. Enclose the search value in special character % to filter items containing this value.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "predefined",
          "in" : "query",
          "description" : "Search for predefined privileges (true) or custom, user-created privileges (false). If no value is set, then no filtering is done on the privilege type.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "resource",
          "in" : "query",
          "description" : "Search for privileges corresponding to either 'Default' product, 'TransferCFT' or 'Sentinel' (use only the quoted values in the this search box).",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "product",
          "in" : "query",
          "description" : "Search for resources having this product. Enclose the search value in special character % to filter items containing this value.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Get privileges starting from the specified offset in the list of records returned by the database. If not set, offset defaults to 0. Legal values: 0 <= offset <= 2147483647",
          "required" : false,
          "schema" : {
            "format" : "int64",
            "type" : "integer"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of items returned per request.",
          "required" : false,
          "schema" : {
            "format" : "int64",
            "type" : "integer"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "Sort privileges using a specific field from result record. Valid values are : name, product, resource, predefined.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ascending",
          "in" : "query",
          "description" : "Sort privileges in ascending order if sortingCriteria is not empty and ascending is true.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "_brief",
          "in" : "query",
          "description" : "Flag indicating that all the properties of the privilege must be returned or just selected properties.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Body contains the list of filtered privileges.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "items" : {
                    "$ref" : "#/components/schemas/RPrivilege"
                  },
                  "type" : "array"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid offset, limit, sort criteria or invalid product value. See swagger documentation for available options."
          }
        },
        "summary" : "Retrieves a list of privileges.",
        "description" : "Access enforcement <b>always performed</b> (resource is <b>Authorization_management</b>, action is <b>View</b>)",
        "tags" : [ "privileges" ]
      },
      "head" : {
        "operationId" : "checkPrivilegeExists",
        "parameters" : [ {
          "name" : "name",
          "in" : "query",
          "description" : "The privilege's name",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The privilege with given name exists.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          },
          "404" : {
            "description" : "The privilege with given name doesn't exist."
          }
        },
        "summary" : "Checks if the given privilege exists.",
        "description" : "Access enforcement <b>always performed</b> (resource is <b>Authorization_management</b>, action is <b>View</b>)",
        "tags" : [ "privileges" ]
      },
      "post" : {
        "operationId" : "createPrivilege",
        "parameters" : [ {
          "name" : "_body",
          "in" : "query",
          "description" : "",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "The privilege was successfully created.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RPrivilege"
                }
              }
            }
          },
          "400" : {
            "description" : "The privilege fields are not valid."
          },
          "403" : {
            "description" : "The user does no have right to create privilege"
          },
          "409" : {
            "description" : "A privilege with the same name already exists."
          },
          "500" : {
            "description" : "Internal server error."
          }
        },
        "summary" : "Creates a new privilege.",
        "description" : "\n\n  <p>\n\tThe body has the same syntax as GET/privileges.\n\t<br>\n\tThe name of the privilege is mandatory.\n\t<br>\n\tThe name cannot contain the special characters * ; , or '\n\t<br>\n\tA privilege is identified by its name.\n </p><br><b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Authorization_management</b>, action is <b>Create</b>)",
        "tags" : [ "privileges" ],
        "requestBody" : {
          "description" : "The privilege to create.",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RPrivilege"
              }
            }
          }
        }
      }
    },
    "/autz/privileges/{businessId}" : {
      "delete" : {
        "operationId" : "deletePrivilegeById",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The privileges business id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The privilege was deleted.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid arguments."
          },
          "403" : {
            "description" : "The user doesn't have right to delete the privilege."
          },
          "404" : {
            "description" : "privilege with the given businessId doesn't exist."
          },
          "412" : {
            "description" : "If deleting the privilege has an impact on roles"
          }
        },
        "summary" : "Deletes a privilege.",
        "description" : "Access enforcement <b>always performed</b> (resource is <b>Authorization_management</b>, action is <b>Delete</b>)",
        "tags" : [ "privileges" ]
      },
      "get" : {
        "operationId" : "getPrivilegeById",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The privilege's business id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The privilege with given id is found and it is returned in response body.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RPrivilege"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid arguments."
          },
          "404" : {
            "description" : "The privilege with given id doesn't exist or the user has no rights to retrieve it due to FGAC settings."
          }
        },
        "summary" : "Retrieves a given privilege.",
        "description" : "Access enforcement <b>always performed</b> (resource is <b>Authorization_management</b>, action is <b>View</b>)",
        "tags" : [ "privileges" ]
      },
      "put" : {
        "operationId" : "updatePrivilegeById",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The business id of the privilege to update.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "_body",
          "in" : "query",
          "description" : "",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The privilege is successfully updated.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RPrivilege"
                }
              }
            }
          },
          "400" : {
            "description" : "The privilege fields are not valid."
          },
          "403" : {
            "description" : "The user doesn't have right to update privilege."
          },
          "404" : {
            "description" : "The privilege with the given businessId doesn't exist."
          },
          "500" : {
            "description" : "Internal server error."
          }
        },
        "summary" : "Updates a privilege.",
        "description" : "\n\n <p>\n PUT is idempotent so PUT requests you MUST send all the available properties/values, not just the ones you want to change.\n </p>Access enforcement <b>always performed</b> (resource is <b>Authorization_management</b>, action is <b>Modify</b>)",
        "tags" : [ "privileges" ],
        "requestBody" : {
          "description" : "The privilege to update.",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RPrivilege"
              }
            }
          }
        }
      }
    },
    "/autz/privileges/{businessId}/roles" : {
      "get" : {
        "operationId" : "getRoles",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The business id of the privilege",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Body contains the list of filtered roles.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "items" : {
                    "$ref" : "#/components/schemas/RRole"
                  },
                  "type" : "array"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid arguments."
          },
          "404" : {
            "description" : "The privilege with the given businessId doesn't exist."
          }
        },
        "summary" : "Get the list of roles that have assigned the privilege identified by businessId",
        "description" : "Access enforcement <b>always performed</b> (resource is <b>Authorization_management</b>, action is <b>View</b>)",
        "tags" : [ "privileges" ]
      }
    },
    "/autz/privileges/{businessId}/roles/{roleBusinessId}" : {
      "delete" : {
        "operationId" : "removeAssignment",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The business id of the privilege",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "roleBusinessId",
          "in" : "path",
          "description" : "The business id of the role",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The role was deleted.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid arguments."
          },
          "403" : {
            "description" : "The user does no have right to delete the role."
          },
          "404" : {
            "description" : "The role with the given businessId doesn't exist."
          }
        },
        "summary" : "Delete an assignment between a privilege and a role",
        "description" : "Access enforcement <b>always performed</b> (resource is <b>Authorization_management</b>, action is <b>View</b>)",
        "tags" : [ "privileges" ]
      },
      "head" : {
        "operationId" : "checkPrivilegeIsAssignedById",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The business id of the privilege",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "roleBusinessId",
          "in" : "path",
          "description" : "The business id of the role",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          },
          "400" : {
            "description" : "Illegal arguments."
          },
          "404" : {
            "description" : "The role or privilege does not exist. The privilege is not assigned to the role.\n              group."
          }
        },
        "summary" : "Checks if the privilege with businessId is assigned to role with roleBusinessId",
        "description" : "Access enforcement <b>always performed</b> (resource is <b>Authorization_management</b>, action is <b>View</b>)",
        "tags" : [ "privileges" ]
      },
      "post" : {
        "operationId" : "autz_privileges_businessId_rolesroleBusinessId_assignPrivilege",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The business id of the privilege",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "roleBusinessId",
          "in" : "path",
          "description" : "The business id of the role",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "privilege is successfully assigned to role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid arguments."
          }
        },
        "summary" : "Assign a privilege to a role",
        "description" : "Access enforcement <b>always performed</b> (resource is <b>Authorization_management</b>, action is <b>View</b>)",
        "tags" : [ "privileges" ]
      }
    },
    "/autz/resources" : {
      "get" : {
        "operationId" : "listResources",
        "parameters" : [ {
          "name" : "name",
          "in" : "query",
          "description" : "Search for resources having this name. Enclose the search value in special character % to filter items containing this value.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "product",
          "in" : "query",
          "description" : "Search for resources having this product. Enclose the search value in special character % to filter items containing this value.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Get resources starting from the specified offset in the list of records returned by the database. If not set, offset defaults to 0. Legal values: 0 <= offset <= 2147483647",
          "required" : false,
          "schema" : {
            "format" : "int64",
            "type" : "integer"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of items returned per request.",
          "required" : false,
          "schema" : {
            "format" : "int64",
            "type" : "integer"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "Sort resources using a specific field from result record. Valid values are : name, product, predefined.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ascending",
          "in" : "query",
          "description" : "Sort resources in ascending order if sortingCriteria is not empty and ascending is true.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "_brief",
          "in" : "query",
          "description" : "Flag indicating that all the properties of the resource must be returned or just selected properties.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Body contains the list of filtered resources.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "items" : {
                    "$ref" : "#/components/schemas/RResource"
                  },
                  "type" : "array"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid offset, limit, sort criteria or invalid product value. See swagger documentation for available options."
          }
        },
        "summary" : "Retrieves a list of resources.",
        "description" : "Access enforcement <b>always performed</b> (resource is <b>Authorization_management</b>, action is <b>View</b>)",
        "tags" : [ "resources" ]
      }
    },
    "/autz/resources/{businessId}" : {
      "get" : {
        "operationId" : "autz_resourcesbusinessId_get",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The resource's business id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The resource with given id is found and it is returned in response body.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RResource"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid arguments."
          },
          "404" : {
            "description" : "The resource with given id doesn't exist or the user has no rights to retrieve it due to FGAC settings."
          }
        },
        "summary" : "Retrieves a given resource.",
        "description" : "Access enforcement <b>always performed</b> (resource is <b>Authorization_management</b>, action is <b>View</b>)",
        "tags" : [ "resources" ]
      }
    },
    "/autz/roles" : {
      "delete" : {
        "operationId" : "deleteRoleByFilter",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "query",
          "description" : "The business id of the role to delete. Can delete multiple items. If no parameter is given, all roles are removed.\n \t\t\t\t\tUse parameters to narrow the list of roles to be deleted.",
          "required" : false,
          "schema" : {
            "items" : {
              "type" : "string"
            },
            "type" : "array"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "roles are successfully deleted.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          },
          "403" : {
            "description" : "The user doesn't have right to delete the role."
          },
          "412" : {
            "description" : "Deleting the role has an impact on flows.\n \t\t To perform the operation regardless of its impact, set the _forced parameter to true."
          }
        },
        "summary" : "Deletes a list of roles.",
        "description" : "Access enforcement <b>always performed</b> (resource is <b>Authorization_management</b>, action is <b>Delete</b>)",
        "tags" : [ "roles" ]
      },
      "get" : {
        "operationId" : "listRoles",
        "parameters" : [ {
          "name" : "search",
          "in" : "query",
          "description" : "Search for roles containing this value in 'name' or 'description'",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "name",
          "in" : "query",
          "description" : "Search for roles having this name. Enclose the search value in special character % to filter items containing this value.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "predefined",
          "in" : "query",
          "description" : "Search for predefined roles (true) or custom, user-created roles (false). If no value is set, then no filtering is done on the role type.\"",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Get roles starting from the specified offset in the list of records returned by the database. If not set, offset defaults to 0. Legal values: 0 <= offset <= 2147483647",
          "required" : false,
          "schema" : {
            "format" : "int64",
            "type" : "integer"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of items returned per request.",
          "required" : false,
          "schema" : {
            "format" : "int64",
            "type" : "integer"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "Sort roles using a specific field from result record. Valid values are : name, predefined.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ascending",
          "in" : "query",
          "description" : "Sort roles in ascending order if sortingCriteria is not empty and ascending is true.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "_brief",
          "in" : "query",
          "description" : "Flag indicating that all the properties of the role must be returned or just selected properties.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Body contains the list of filtered roles.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "items" : {
                    "$ref" : "#/components/schemas/RRole"
                  },
                  "type" : "array"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid offset, limit or sort criteria value. See swagger documentation for available options."
          }
        },
        "summary" : "Retrieves a list of roles.",
        "description" : "Access enforcement <b>always performed</b> (resource is <b>Authorization_management</b>, action is <b>View</b>)",
        "tags" : [ "roles" ]
      },
      "head" : {
        "operationId" : "checkIfRoleExists",
        "parameters" : [ {
          "name" : "name",
          "in" : "query",
          "description" : "The role's name",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The role with given name exists.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          },
          "404" : {
            "description" : "The role with given name doesn't exist."
          }
        },
        "summary" : "Checks if the given role exists.",
        "description" : "Access enforcement <b>always performed</b> (resource is <b>Authorization_management</b>, action is <b>View</b>)",
        "tags" : [ "roles" ]
      },
      "post" : {
        "operationId" : "createRole",
        "parameters" : [ {
          "name" : "_body",
          "in" : "query",
          "description" : "",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "The role was successfully created.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RRole"
                }
              }
            }
          },
          "400" : {
            "description" : "The role fields are not valid."
          },
          "403" : {
            "description" : "The user does no have right to create role"
          },
          "409" : {
            "description" : "A role with the same name already exists."
          },
          "500" : {
            "description" : "Internal server error."
          }
        },
        "summary" : "Creates a new role.",
        "description" : "\n\n  <p>\n\tThe body has the same syntax as GET/roles.\n\t<br>\n\tThe name of the role is mandatory.\n\t<br>\n\tThe name cannot contain the special characters * ; , or '\n\t<br>\n\tA role is identified by its name.\n </p><br><b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Authorization_management</b>, action is <b>Create</b>)",
        "tags" : [ "roles" ],
        "requestBody" : {
          "description" : "The role to create.",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RRole"
              }
            }
          }
        }
      }
    },
    "/autz/roles/{businessId}" : {
      "delete" : {
        "operationId" : "deleteRoleById",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The roles business id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The role was deleted.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid businessId."
          },
          "403" : {
            "description" : "The user doesn't have right to delete the role."
          },
          "404" : {
            "description" : "Role with the given businessId doesn't exist."
          },
          "412" : {
            "description" : "If deleting the role has an impact on roles"
          }
        },
        "summary" : "Deletes a role.",
        "description" : "Access enforcement <b>always performed</b> (resource is <b>Authorization_management</b>, action is <b>Delete</b>)",
        "tags" : [ "roles" ]
      },
      "get" : {
        "operationId" : "autz_rolesbusinessId_get",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The role's business id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The role with given id is found and it is returned in response body.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RRole"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid businessId."
          },
          "404" : {
            "description" : "The role with given id doesn't exist or the user has no rights to retrieve it due to FGAC settings."
          }
        },
        "summary" : "Retrieves a given role.",
        "description" : "Access enforcement <b>always performed</b> (resource is <b>Authorization_management</b>, action is <b>View</b>)",
        "tags" : [ "roles" ]
      },
      "put" : {
        "operationId" : "updateRoleById",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The business id of the role to update.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "_body",
          "in" : "query",
          "description" : "",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The role is successfully updated.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RRole"
                }
              }
            }
          },
          "400" : {
            "description" : "The role fields are not valid."
          },
          "403" : {
            "description" : "The user doesn't have right to update role."
          },
          "404" : {
            "description" : "The role with the given businessId doesn't exist."
          },
          "500" : {
            "description" : "Internal server error."
          }
        },
        "summary" : "Updates a role.",
        "description" : "\n\n <p>\n PUT is idempotent so PUT requests you MUST send all the available properties/values, not just the ones you want to change.\n </p>Access enforcement <b>always performed</b> (resource is <b>Authorization_management</b>, action is <b>Modify</b>)",
        "tags" : [ "roles" ],
        "requestBody" : {
          "description" : "The role to update.",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RRole"
              }
            }
          }
        }
      }
    },
    "/authentication" : {
      "post" : {
        "operationId" : "authenticateUser",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "The user has been successfully authenticated, response contains the list with logged user roles.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "items" : {
                    "type" : "string"
                  },
                  "type" : "array"
                }
              }
            }
          },
          "401" : {
            "description" : "The user or password is invalid or password needs to be initialized."
          }
        },
        "summary" : "Authenticate a user in the product",
        "description" : "Access enforcement <b>never performed</b>...",
        "tags" : [ "authentication" ],
        "requestBody" : {
          "description" : "authentication Request object",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AuthenticationRequest"
              }
            }
          }
        }
      },
      "put" : {
        "operationId" : "changePassword",
        "parameters" : [ {
          "name" : "X-password",
          "in" : "header",
          "description" : "header X-password old password encoded in base64",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "202" : {
            "description" : "The simulated password is valid"
          },
          "400" : {
            "description" : "The new password doesn't meet security requirements"
          },
          "401" : {
            "description" : "The change password failed. See log for details."
          },
          "default" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          }
        },
        "summary" : "Change password for an existing user",
        "description" : "Access enforcement <b>never performed</b>...",
        "tags" : [ "authentication" ],
        "requestBody" : {
          "description" : "authentication Request object",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AuthenticationRequest"
              }
            }
          }
        }
      }
    },
    "/authentication/reinitialization" : {
      "post" : {
        "operationId" : "reinitializeCredentials",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "The password was reinitialized to the default one or regenerated and send by email.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid arguments."
          },
          "401" : {
            "description" : "Any exception in processing the request. For security reason the real issue is not sent to the caller. Ask administrator for checking the logs."
          }
        },
        "summary" : "Reset password for an existing user",
        "description" : "Access enforcement <b>never performed</b>...",
        "tags" : [ "authentication" ],
        "requestBody" : {
          "description" : "user login, organization and email for which we want to reset the password",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ResetPasswordRequest"
              }
            }
          }
        }
      }
    },
    "/v2/identitystores" : {
      "delete" : {
        "operationId" : "deleteIdentityStoresByFilter",
        "parameters" : [ {
          "name" : "name",
          "in" : "query",
          "description" : "",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "businessId",
          "in" : "query",
          "description" : "The business id of the identity store to delete. Can delete multiple items.",
          "required" : false,
          "schema" : {
            "items" : {
              "type" : "string"
            },
            "type" : "array"
          }
        }, {
          "name" : "_forced",
          "in" : "query",
          "description" : "To force deleting the identity stores linked to organizations.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Identity stores are successfully deleted.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          },
          "400" : {
            "description" : "At least one filter is mandatory to complete the request."
          },
          "412" : {
            "description" : "Identity stores are used by organizations. Set _forced to 'true' to delete them."
          }
        },
        "summary" : "Deletes a list of identity stores.",
        "description" : "<b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Identity_Store</b>, action is <b>Delete</b>)",
        "tags" : [ "identitystores" ]
      },
      "get" : {
        "operationId" : "listIdentityStores",
        "parameters" : [ {
          "name" : "host",
          "in" : "query",
          "description" : "Search for the identity store having this hostname",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "name",
          "in" : "query",
          "description" : "Search for identity store having this name. Enclose the search value in\n            special character % to filter items containing this value",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "search",
          "in" : "query",
          "description" : "Search for identity stores containing this value in name or organization or userId or role names.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Identity store list offset based on total number of records returned from the database. If not set, offset defaults to 0. Legal values: 0 <= offset <= 2147483647",
          "required" : false,
          "schema" : {
            "format" : "int64",
            "type" : "integer"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of items returned per request.",
          "required" : false,
          "schema" : {
            "format" : "int64",
            "type" : "integer"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "Sort identity stores using a specific field from result record. Valid values are : name, description, serverHosts (after first server host).",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ascending",
          "in" : "query",
          "description" : "Sort identity stores using given sort criteria, if any, in ascending order if ascending is true or descending if ascending parameter is false. Default value is false.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "X-EncryptionKey",
          "in" : "header",
          "description" : "header X-EncryptionKey encryption key used for private key in\n            base64 format. If not present the password will not be returned.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "brief",
          "in" : "query",
          "description" : "If true, it will return only the id, name, description and connection details.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The list was successfully obtained.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "items" : {
                    "$ref" : "#/components/schemas/RIdentityStore"
                  },
                  "type" : "array"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid offset, limit or sort criteria. See swagger documentation for available options."
          },
          "404" : {
            "description" : "The list retrieval encountered an error."
          }
        },
        "summary" : "Retrieves a list of identity stores.",
        "description" : "\n\n <p>\n Only the businessId, name, and status are retrieved when _brief=true. <br>\n </p><br><b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Identity_Store</b>, action is <b>View</b>)",
        "tags" : [ "identitystores" ]
      },
      "post" : {
        "operationId" : "createIdentityStore",
        "parameters" : [ {
          "name" : "X-EncryptionKey",
          "in" : "header",
          "description" : "header X-EncryptionKey encryption key used for private key in\n            base64 format. If not present the password will not be returned.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "_body",
          "in" : "query",
          "description" : "Controls if the body of the created object is returned in the\n            response. Default value is <code>true</code>.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "The identity store was successfully created and the body contains the\n              created identity store.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RIdentityStore"
                }
              }
            }
          },
          "400" : {
            "description" : "The identity store fields are not valid."
          },
          "403" : {
            "description" : "The user does no have right to create identity store (Resource=Identity_Store,Action=Create)."
          },
          "409" : {
            "description" : "A identity store with the same name already exists."
          },
          "500" : {
            "description" : "Internal server error."
          }
        },
        "summary" : "Creates an Identity Store.",
        "description" : "\n\n <p>\n The created identity store must adhere to certain rules that are valid in the GUI. All\n the rules below that apply to sources, also apply to targets.\n <ul>\n <li>The name is mandatory.</li>\n </ul>\n </p><br><b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Identity_Store</b>, action is <b>Create</b>)",
        "tags" : [ "identitystores" ],
        "requestBody" : {
          "description" : "The identity store to create.",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RIdentityStore"
              }
            }
          }
        }
      }
    },
    "/v2/identitystores/testconnectionbox" : {
      "post" : {
        "operationId" : "checkValidGivenIdentityStoreById",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "query",
          "description" : "The identity store's businessId. It is empty for a new identity.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The connection is valid.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid arguments."
          },
          "422" : {
            "description" : "The connection is not valid."
          }
        },
        "summary" : "Check connection based on configuration described in identity store connection.",
        "description" : "<b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Identity_Store</b>, action is <b>View</b>)",
        "tags" : [ "identitystores" ],
        "requestBody" : {
          "description" : "The identity store's connection.",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RISConnection"
              }
            }
          }
        }
      }
    },
    "/v2/identitystores/{businessId}" : {
      "delete" : {
        "operationId" : "deleteIdentityStoreById",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The identity store business id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "recursive",
          "in" : "query",
          "description" : "It will unlink the organizations",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Identity store was deleted successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          },
          "400" : {
            "description" : "Identity store is used by an organization."
          },
          "404" : {
            "description" : "Identity store with the given businessId doesn't exist."
          }
        },
        "summary" : "Deletes an identity store.",
        "description" : "<b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Identity_Store</b>, action is <b>Delete</b>)",
        "tags" : [ "identitystores" ]
      },
      "get" : {
        "operationId" : "getIdentityStoreById",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The identity store business id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "X-EncryptionKey",
          "in" : "header",
          "description" : "",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Identity store was provided successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid arguments."
          },
          "404" : {
            "description" : "Identity store with the given businessId doesn't exist."
          }
        },
        "summary" : "Gets an identity store.",
        "description" : "<b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Identity_Store</b>, action is <b>View</b>)",
        "tags" : [ "identitystores" ]
      },
      "put" : {
        "operationId" : "updateIdentityStoreById",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The identity store's business id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "X-EncryptionKey",
          "in" : "header",
          "description" : "",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "_body",
          "in" : "query",
          "description" : "If the update should return the updated object.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The identity store is successfully updated.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RIdentityStore"
                }
              }
            }
          },
          "400" : {
            "description" : "The identity store fields are not valid."
          },
          "404" : {
            "description" : "The identity store with the given businessId doesn't exist."
          }
        },
        "summary" : "Updates an identity store.",
        "description" : "\n\n <p>\n PUT is idempotent so PUT requests you MUST send all the available\n properties/values , not just the ones you want to change. It is a good\n practice to query for an identity store, modify what needed and then resend the whole\n identity store.\n </p><br><b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Identity_Store</b>, action is <b>Modify</b>)",
        "tags" : [ "identitystores" ],
        "requestBody" : {
          "description" : "The identity store to update.",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RIdentityStore"
              }
            }
          }
        }
      }
    },
    "/v2/identitystores/{businessId}/ldap-roles" : {
      "get" : {
        "operationId" : "listLdapRolesByIdentityStoreId",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The identity store's business id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The LDAP roles can be returned.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          },
          "404" : {
            "description" : "The businessId for identity store is not valid."
          },
          "422" : {
            "description" : "The connection is not valid."
          }
        },
        "summary" : "The list of roles from the LDAP server described in identity store.",
        "description" : "<b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Identity_Store</b>, action is <b>View</b>)",
        "tags" : [ "identitystores" ]
      }
    },
    "/v2/identitystores/{businessId}/valid-connection" : {
      "head" : {
        "operationId" : "checkValidExistingIdentityStoreById",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The identity store's business id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The connection is valid.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          },
          "404" : {
            "description" : "The businessId for identity store is not valid."
          },
          "422" : {
            "description" : "The connection is not valid."
          }
        },
        "summary" : "Validate connection based on configuration described in identity store.",
        "description" : "<b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Identity_Store</b>, action is <b>View</b>)",
        "tags" : [ "identitystores" ]
      }
    },
    "/v2/organizations" : {
      "delete" : {
        "operationId" : "deleteOrganizationByFilter",
        "parameters" : [ {
          "name" : "name",
          "in" : "query",
          "description" : "",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "businessId",
          "in" : "query",
          "description" : "The business id of the organizations to delete. Can delete multiple\n            items. If no parameter is given, all organizations are removed. Use\n            parameters to narrow the list of organizations to be deleted.",
          "required" : false,
          "schema" : {
            "items" : {
              "type" : "string"
            },
            "type" : "array"
          }
        }, {
          "name" : "_forced",
          "in" : "query",
          "description" : "To force deleting the organizations.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Organizations are successfully deleted.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          },
          "400" : {
            "description" : "Criteria missing from request. Set _forced to 'true' to delete all organizations."
          },
          "412" : {
            "description" : "Precondition failed."
          }
        },
        "summary" : "Deletes a list of organizations and users belonging to that organizations.",
        "description" : "<b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Organization</b>, action is <b>Delete</b>)<br>Access enforcement <b>always performed</b> (resource is <b>User</b>, action is <b>Delete</b>)<br>",
        "tags" : [ "organizations" ]
      },
      "get" : {
        "operationId" : "listOrganizations",
        "parameters" : [ {
          "name" : "name",
          "in" : "query",
          "description" : "Search for organization having this name. Enclose the search value in\n            special character % to filter items containing this value",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "Search only for internal organizations or only for external (ldap) organizations. If assigned could have only one from the following values : INTERNAL, EXTERNAL",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "brief",
          "in" : "query",
          "description" : "If true, it will return only the id, name,description, identity store (if exists) and number of users.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "search",
          "in" : "query",
          "description" : "Free search for name or identity store name",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Organizations list offset based on total number of records returned from the database. If not set, offset defaults to 0. Legal values: 0 <= offset <= 2147483647",
          "required" : false,
          "schema" : {
            "format" : "int64",
            "type" : "integer"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of items returned per request.",
          "required" : false,
          "schema" : {
            "format" : "int64",
            "type" : "integer"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "Sort using a specific field from result record. Valid values are : name, identityStore.name, isDefault",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ascending",
          "in" : "query",
          "description" : "Sort organization in ascending order if sortingCriteria is not empty and ascending is true.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The list was successfully obtained.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "items" : {
                    "$ref" : "#/components/schemas/ROrganization"
                  },
                  "type" : "array"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid offset, limit, sort criteria or invalid type value. See swagger documentation for available options."
          },
          "403" : {
            "description" : "The current  user has no rights to view organizations"
          },
          "500" : {
            "description" : "The list retrieval encountered an error."
          }
        },
        "summary" : "Retrieves a list of organizations.",
        "description" : "\n\n <p>\n Only the businessId, name, and status are retrieved when _brief=true. <br>\n </p><br><b>Since: </b>FM v1.0<br>Access enforcement <b>never performed</b>...",
        "tags" : [ "organizations" ]
      },
      "post" : {
        "operationId" : "createOrganization",
        "parameters" : [ {
          "name" : "_body",
          "in" : "query",
          "description" : "Controls if the body of the created object is returned in the\n            response. Default value is <code>true</code>.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "The organization was successfully created and the body contains the\n              created organization.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ROrganization"
                }
              }
            }
          },
          "400" : {
            "description" : "The organization fields are not valid."
          },
          "403" : {
            "description" : "The user does no have right to create organization (Resource=Organization,Action=Create)."
          },
          "409" : {
            "description" : "A organization with the same name already exists."
          },
          "500" : {
            "description" : "Internal server error."
          }
        },
        "summary" : "Creates an organization.",
        "description" : "\n\n <p>\n The created organization must adhere to certain rules that are valid in the GUI. All\n the rules below that apply to sources, also apply to targets.\n <ul>\n <li>The name is mandatory.</li>\n </ul>\n </p><br><b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Organization</b>, action is <b>Create</b>)",
        "tags" : [ "organizations" ],
        "requestBody" : {
          "description" : "The organization to create.",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ROrganization"
              }
            }
          }
        }
      }
    },
    "/v2/organizations/{businessId}" : {
      "delete" : {
        "operationId" : "deleteOrganizationById",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The organization business id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "_forced",
          "in" : "query",
          "description" : "It will unlink the organizations",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Organization was deleted successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          },
          "400" : {
            "description" : "Organization has users."
          },
          "403" : {
            "description" : "Current user cannot delete its own organization"
          },
          "404" : {
            "description" : "Organization with the given businessId doesn't exist."
          }
        },
        "summary" : "Deletes an organization and and users belonging to that organization",
        "description" : "<b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Organization</b>, action is <b>Delete</b>)<br>Access enforcement <b>always performed</b> (resource is <b>User</b>, action is <b>Delete</b>)<br>",
        "tags" : [ "organizations" ]
      },
      "get" : {
        "operationId" : "getOrganizationById",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The organization business id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Organization was provided successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid business id.."
          },
          "404" : {
            "description" : "Organization with the given businessId doesn't exist."
          }
        },
        "summary" : "Gets an organization.",
        "description" : "<b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Organization</b>, action is <b>View</b>)",
        "tags" : [ "organizations" ]
      },
      "put" : {
        "operationId" : "updateOrganizationById",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The organization's business id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "_body",
          "in" : "query",
          "description" : "If the update should return the updated object.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The organization is successfully updated.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ROrganization"
                }
              }
            }
          },
          "400" : {
            "description" : "The organization fields are not valid."
          },
          "404" : {
            "description" : "The organization with the given businessId doesn't exist."
          }
        },
        "summary" : "Updates an organization.",
        "description" : "\n\n <p>\n PUT is idempotent so PUT requests you MUST send all the available\n properties/values , not just the ones you want to change. It is a good\n practice to query for an organization, modify what needed and then resend the whole\n organization.\n </p><br><b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Organization</b>, action is <b>Modify</b>)",
        "tags" : [ "organizations" ],
        "requestBody" : {
          "description" : "The organization to update.",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ROrganization"
              }
            }
          }
        }
      }
    },
    "/v2/organizations/{businessId}/role-mappings" : {
      "get" : {
        "operationId" : "listRoleMappingsByOrganizationId",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The organizations's business id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The mappings can be returned.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid arguments."
          },
          "404" : {
            "description" : "The businessId for identity store is not valid."
          }
        },
        "summary" : "The list of role mappings for an organization.",
        "description" : "<b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Organization</b>, action is <b>View</b>)",
        "tags" : [ "organizations" ]
      },
      "post" : {
        "operationId" : "createRoleMappingByOrganizationId",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "_body",
          "in" : "query",
          "description" : "Controls if the body of the created object is returned in the\n            response. Default value is <code>true</code>.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "The role mapping was successfully created and the body contains the\n              created organization.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ROrganization"
                }
              }
            }
          },
          "400" : {
            "description" : "The role mapping fields are not valid."
          },
          "403" : {
            "description" : "The user does no have right to create organization (Resource=Organization,Action=Create)."
          },
          "409" : {
            "description" : "A role mapping with the same id already exists."
          },
          "500" : {
            "description" : "Internal server error."
          }
        },
        "summary" : "Creates a role mapping.",
        "description" : "<b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Organization</b>, action is <b>Modify</b>)",
        "tags" : [ "organizations" ],
        "requestBody" : {
          "description" : "The organization to create.",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RRoleMapping"
              }
            }
          }
        }
      }
    },
    "/v2/organizations/{businessId}/role-mappings/bulk" : {
      "post" : {
        "operationId" : "createOrUpdateRoleMappingsByOrganizationId",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The organizations's business id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Operation was processed. See result body on details.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          },
          "400" : {
            "description" : "The businessId for organization is not valid or the body is missing."
          }
        },
        "summary" : "Creates or updates a list of role mappings for an organization.",
        "description" : "<b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Organization</b>, action is <b>Modify</b>)",
        "tags" : [ "organizations" ],
        "requestBody" : {
          "description" : "The role mappings to create or update.",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "items" : {
                  "$ref" : "#/components/schemas/RRoleMapping"
                },
                "type" : "array"
              }
            }
          }
        }
      }
    },
    "/v2/organizations/{businessId}/role-mappings/{roleId}" : {
      "delete" : {
        "operationId" : "deleteRoleMappingByOrganizationAndRoleId",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The organizations's business id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "roleId",
          "in" : "path",
          "description" : "The role's business id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Role mapping was deleted successfully from the organization.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid argument."
          },
          "404" : {
            "description" : "The businessId or role id is not valid."
          }
        },
        "summary" : "Delete the role mapping for an organization.",
        "description" : "<b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Organization</b>, action is <b>Delete</b>)",
        "tags" : [ "organizations" ]
      },
      "get" : {
        "operationId" : "getRoleMappingByOrganizationAndRoleId",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The organizations's business id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "roleId",
          "in" : "path",
          "description" : "The role's business id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The mapping can be returned.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid business id."
          },
          "404" : {
            "description" : "The businessId or role id is not valid."
          }
        },
        "summary" : "Get the role mapping for an organization.",
        "description" : "<b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Organization</b>, action is <b>View</b>)",
        "tags" : [ "organizations" ]
      },
      "put" : {
        "operationId" : "updateRoleMappingByOrganizationAndRoleId",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The organization's business id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "roleId",
          "in" : "path",
          "description" : "The role id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "_body",
          "in" : "query",
          "description" : "If the update should return the updated object.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The organization is successfully updated.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ROrganization"
                }
              }
            }
          },
          "400" : {
            "description" : "The organization fields are not valid."
          },
          "404" : {
            "description" : "The organization with the given businessId doesn't exist."
          }
        },
        "summary" : "Updates a role mapping inside an organization.",
        "description" : "\n\n <p>\n PUT is idempotent so PUT requests you MUST send all the available\n properties/values , not just the ones you want to change. It is a good\n practice to query for an organization, modify what needed and then resend the whole\n organization.\n </p><br><b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Organization</b>, action is <b>Modify</b>)",
        "tags" : [ "organizations" ],
        "requestBody" : {
          "description" : "The list of LDAP roles.",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RRoleMapping"
              }
            }
          }
        }
      }
    },
    "/v2/organizations/{businessId}/setdefault" : {
      "post" : {
        "operationId" : "setDefaultOrganizationById",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The business id of the organization to update.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The organization is successfully set as default.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          },
          "404" : {
            "description" : "The organization with the given businessId doesn't exist."
          },
          "500" : {
            "description" : "Internal server error"
          }
        },
        "summary" : "Sets an organization as default.",
        "description" : "Access enforcement <b>always performed</b> (resource is <b>Organization</b>, action is <b>Modify</b>)",
        "tags" : [ "organizations" ]
      }
    },
    "/v2/users" : {
      "delete" : {
        "operationId" : "deleteUsersByIds",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "query",
          "description" : "The business id of the user to delete. Can delete multiple\n            items. Use parameters to narrow the list of users to be deleted.",
          "required" : false,
          "schema" : {
            "items" : {
              "type" : "string"
            },
            "type" : "array"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Users are successfully deleted.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid arguments."
          },
          "403" : {
            "description" : "The user does no have right to delete users (Resource=User, Action=Delete) or it trued to delete himself."
          },
          "412" : {
            "description" : "The user cannot delete itself."
          },
          "500" : {
            "description" : "Internal server error."
          }
        },
        "summary" : "Deletes a list of users.",
        "description" : "<b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>User</b>, action is <b>Delete</b>)",
        "tags" : [ "users" ]
      },
      "get" : {
        "operationId" : "searchUers",
        "parameters" : [ {
          "name" : "userId",
          "in" : "query",
          "description" : "Search for users having this user id.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "firstName",
          "in" : "query",
          "description" : "Search for users having this first name.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "lastName",
          "in" : "query",
          "description" : "Search for users having this last name.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "locked",
          "in" : "query",
          "description" : "Search for locked/unlocked users.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "organization",
          "in" : "query",
          "description" : "Search for users under this organization.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "role",
          "in" : "query",
          "description" : "Search for users having this role assignment.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "search",
          "in" : "query",
          "description" : "Search for user containing this value in name or organization or userId or role names.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "User list offset based on total number of records returned from the database. If not set, offset defaults to 0. Legal values: 0 <= offset <= 2147483647",
          "required" : false,
          "schema" : {
            "format" : "int64",
            "type" : "integer"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of items returned per request.",
          "required" : false,
          "schema" : {
            "format" : "int64",
            "type" : "integer"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "Sort users using a specific field from result record. Valid values are : userId, organization, locked, firstName, lastName.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ascending",
          "in" : "query",
          "description" : "Sort users using given sort criteria, if any, in ascending order if ascending is true or descending if ascending parameter is false. Default value is false.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "brief",
          "in" : "query",
          "description" : "If true, the following fields will be returned only: business id, user id, first name, last name, organization.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The list was successfully obtained.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "items" : {
                    "$ref" : "#/components/schemas/RUser"
                  },
                  "type" : "array"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid offset, limit or sort criteria. See swagger documentation for available options."
          },
          "404" : {
            "description" : "The list retrieval encountered an error."
          }
        },
        "summary" : "Retrieves a list of users.",
        "description" : "\n\n <p>\n If brief=true, the following fields will be returned only: business id, user id, first name, last name, organization.<br>\n </p><br><b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>User</b>, action is <b>View</b>)",
        "tags" : [ "users" ]
      },
      "post" : {
        "operationId" : "createUser",
        "parameters" : [ {
          "name" : "_body",
          "in" : "query",
          "description" : "Controls if the body of the created object is returned in the\n            response. Default value is <code>true</code>.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "The user was successfully created.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RUser"
                }
              }
            }
          },
          "400" : {
            "description" : "The user fields are not valid."
          },
          "403" : {
            "description" : "The user does no have right to create users (Resource=User,Action=Create)."
          },
          "409" : {
            "description" : "A user with the same name under the same organization already exists."
          },
          "500" : {
            "description" : "Internal server error."
          }
        },
        "summary" : "Creates an User.",
        "description" : "\n\n <p>\n The created user must adhere to certain rules that are valid in the GUI.\n <ul>\n <li>The name is mandatory.</li>\n </ul>\n </p><br><b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>User</b>, action is <b>Create</b>)",
        "tags" : [ "users" ],
        "requestBody" : {
          "description" : "The user to create.",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RUser"
              }
            }
          }
        }
      }
    },
    "/v2/users/unlockbox" : {
      "post" : {
        "operationId" : "v2_usersunlockbox_unlockUsers",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "The user was successfully unlocked.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid arguments."
          },
          "403" : {
            "description" : "The user does no have right to unlock users."
          },
          "404" : {
            "description" : "User with the given businessId doesn't exist."
          },
          "500" : {
            "description" : "Internal server error."
          }
        },
        "summary" : "Unlock the Users with the specific business ids.",
        "description" : "<b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>User</b>, action is <b>Unlock</b>)",
        "tags" : [ "users" ],
        "requestBody" : {
          "description" : "An array of user business id to unlock sent in the body of the\n             request",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "items" : {
                  "type" : "string"
                },
                "type" : "array"
              }
            }
          }
        }
      }
    },
    "/v2/users/{businessId}" : {
      "delete" : {
        "operationId" : "deleteUserById",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The user business id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The user has been deleted.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid businessId."
          },
          "403" : {
            "description" : "The user does no have right to delete users."
          },
          "404" : {
            "description" : "User with the given businessId doesn't exist."
          },
          "500" : {
            "description" : "Internal server error."
          }
        },
        "summary" : "Deletes a user.",
        "description" : "<b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>User</b>, action is <b>Delete</b>)",
        "tags" : [ "users" ]
      },
      "get" : {
        "operationId" : "getUserById",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The user was found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RUser"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid businessId."
          },
          "404" : {
            "description" : "User with the given businessId does not exist."
          }
        },
        "summary" : "Retrieves the user with given business id.",
        "description" : "<b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>User</b>, action is <b>View</b>)",
        "tags" : [ "users" ]
      },
      "put" : {
        "operationId" : "updateUserById",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "_body",
          "in" : "query",
          "description" : "Controls if the body of the created object is returned in the\n            response. Default value is <code>true</code>.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The user was successfully updated.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RUser"
                }
              }
            }
          },
          "400" : {
            "description" : "The user fields are not valid."
          },
          "403" : {
            "description" : "The user does no have right to update users (Resource=Users,Action=Modify)."
          },
          "404" : {
            "description" : "User with the given businessId does not exist."
          },
          "409" : {
            "description" : "A user with the same name already exists."
          },
          "500" : {
            "description" : "Internal server error."
          }
        },
        "summary" : "Updates an User.",
        "description" : "\n\n <p>\n Updating using PUT requires the entire resource configuration to be sent.\n </p><br><b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>User</b>, action is <b>Modify</b>)",
        "tags" : [ "users" ],
        "requestBody" : {
          "description" : "The user to create.",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RUser"
              }
            }
          }
        }
      }
    },
    "/v2/users/{businessId}/roles" : {
      "get" : {
        "operationId" : "getUserRolesByUserId",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The user's business id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The list was successfully obtained.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid businessId."
          },
          "404" : {
            "description" : "User with the given businessId doesn't exist."
          },
          "500" : {
            "description" : "Internal server error."
          }
        },
        "summary" : "Retrieves all role assignments for a given user.",
        "description" : "<b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>User</b>, action is <b>View</b>)",
        "tags" : [ "users" ]
      },
      "put" : {
        "operationId" : "createUserRole",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The user's business id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "All role assignments were successfully created.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          },
          "400" : {
            "description" : "The role fields are not valid."
          },
          "403" : {
            "description" : "The user does no have right to modify users."
          },
          "404" : {
            "description" : "User or role with the given businessId doesn't exist."
          },
          "500" : {
            "description" : "Internal server error."
          }
        },
        "summary" : "Creates role assignments for a given user",
        "description" : "<b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>User</b>, action is <b>Modify</b>)",
        "tags" : [ "users" ],
        "requestBody" : {
          "description" : "Role assignments.",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "items" : {
                  "$ref" : "#/components/schemas/IdAndName"
                },
                "type" : "array"
              }
            }
          }
        }
      }
    },
    "/v2/users/{businessId}/roles/{roleId}" : {
      "delete" : {
        "operationId" : "deleteUserRoleByUserId",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The user's business id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "roleId",
          "in" : "path",
          "description" : "The role's business id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The role assignment was successfully deleted.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid businessId."
          },
          "403" : {
            "description" : "The user does not have rights to update users."
          },
          "404" : {
            "description" : "User or role with the given businessId doesn't exist."
          },
          "500" : {
            "description" : "Internal server error."
          }
        },
        "summary" : "Deletes a role assignment for a given user.",
        "description" : "<b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>User</b>, action is <b>Modify</b>)",
        "tags" : [ "users" ]
      }
    },
    "/v2/st/{businessId}/backupproducts" : {
      "delete" : {
        "operationId" : "v2_st_businessId_backupproducts_delete",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The business id of the product.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "backupProductBusinessId",
          "in" : "query",
          "description" : "The business id of the backup product.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "backupProductName",
          "in" : "query",
          "description" : "The name of the backup product.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "The request succeeded."
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "403" : {
            "description" : "The user does no have right to delete the backup product."
          },
          "404" : {
            "description" : "The product does not exist."
          }
        },
        "summary" : "Delegates a DELETE request for backup products.",
        "description" : "Access enforcement <b>always performed</b> (resource is <b>Product</b>, action is <b>Modify</b>)<br>",
        "tags" : [ "st" ]
      },
      "get" : {
        "operationId" : "v2_st_businessId_backupproducts_get",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The business id of the product.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The product exists.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RBackupProduct"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "403" : {
            "description" : "The user does no have right to view the backup product."
          },
          "404" : {
            "description" : "The product does not exist."
          }
        },
        "summary" : "Delegates a GET request for backup products.",
        "description" : "Access enforcement <b>always performed</b> (resource is <b>Product</b>, action is <b>View</b>)",
        "tags" : [ "st" ]
      },
      "post" : {
        "operationId" : "v2_st_businessId_backupproducts_post",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The business id of the product.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "_body",
          "in" : "query",
          "description" : "Controls if the body of the created object is returned in the\n            response. Default value is <code>true</code>.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "_forced",
          "in" : "query",
          "description" : "To force updating the product backup products and apply the\n            impacts on flows. Default value is <code>false</code>.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "The backup product was successfully created.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RBackupProduct"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "403" : {
            "description" : "The user does no have right to add the backup product."
          },
          "404" : {
            "description" : "The product does not exist."
          }
        },
        "summary" : "Delegates a POST request for backup products.",
        "description" : "Access enforcement <b>always performed</b> (resource is <b>Product</b>, action is <b>Modify</b>)",
        "tags" : [ "st" ],
        "requestBody" : {
          "description" : "",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RBackupProduct"
              }
            }
          }
        }
      }
    },
    "/v2/st/{businessId}/backupproducts/bulk" : {
      "post" : {
        "operationId" : "v2_st_businessId_backupproductsbulk_updateBackupProducts",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The business id of the product.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "_body",
          "in" : "query",
          "description" : "Controls if the body of the updated backup products are returned in the\n            response. Default value is <code>true</code>.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "_forced",
          "in" : "query",
          "description" : "To force updating the product backup products and apply the\n            impacts on flows. Default value is <code>false</code>.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "The backup product was successfully updated.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "items" : {
                    "$ref" : "#/components/schemas/RBackupProduct"
                  },
                  "type" : "array"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is invalid."
          },
          "403" : {
            "description" : "The user does no have right to update the backup product list."
          },
          "404" : {
            "description" : "The product does not exist."
          }
        },
        "summary" : "Updates the list of backup products of the given product to the given list.",
        "description" : "Access enforcement <b>always performed</b> (resource is <b>Product</b>, action is <b>Modify</b>)",
        "tags" : [ "st" ],
        "requestBody" : {
          "description" : "The list of backup products for the product.",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "items" : {
                  "$ref" : "#/components/schemas/RBackupProduct"
                },
                "type" : "array"
              }
            }
          }
        }
      }
    },
    "/v2/st/{businessId}/connectivity" : {
      "get" : {
        "operationId" : "v2_st_businessId_connectivity_getConnectivityConfiguration",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "the product business id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The product connectivity configuration is retrieved.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RSTConfiguration"
                }
              }
            }
          },
          "400" : {
            "description" : "The product does not exist."
          },
          "403" : {
            "description" : "The user does no have right to register products (Resource=Product, Action=View)."
          },
          "404" : {
            "description" : "The product does not exist."
          }
        },
        "summary" : "Retrieve the connectivity configuration of a ST Product.",
        "description" : "Access enforcement <b>always performed</b> (resource is <b>Product</b>, action is <b>View</b>)",
        "tags" : [ "st" ]
      },
      "put" : {
        "operationId" : "v2_st_businessId_connectivity_updateConnectivityConfiguration",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "the product business id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The product connectivity configuration is updated.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          },
          "400" : {
            "description" : "The product does not exist."
          },
          "403" : {
            "description" : "The user does no have right to modify products (Resource=Product, Action=View)."
          },
          "404" : {
            "description" : "The product does not exist."
          }
        },
        "summary" : "Updates the connectivity configuration of a ST Product.",
        "description" : "Access enforcement <b>always performed</b> (resource is <b>Product</b>, action is <b>Modify</b>)",
        "tags" : [ "st" ],
        "requestBody" : {
          "description" : "",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RSTConfiguration"
              }
            }
          }
        }
      }
    },
    "/v2/st/{businessId}/networkzones" : {
      "delete" : {
        "operationId" : "v2_st_businessId_networkzones_deleteNetworkZoneByName",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The business id of the SecureTransport product.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "name",
          "in" : "query",
          "description" : "The network zone name to delete. Can delete multiple items.",
          "required" : false,
          "schema" : {
            "items" : {
              "type" : "string"
            },
            "type" : "array"
          }
        }, {
          "name" : "_forced",
          "in" : "query",
          "description" : "",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The SecureTransport exists and network zone was successfully removed"
          },
          "400" : {
            "description" : "Invalid request"
          },
          "404" : {
            "description" : "The SecureTransport identified by businessId does not exist or\n               network zone does not exist on SecureTransport product"
          },
          "412" : {
            "description" : "The remove of the network zone has an impact on flows. To perform the operation regardless of its impact, set the _forced parameter to true."
          },
          "500" : {
            "description" : "Internal server error"
          }
        },
        "summary" : "Remove a network zone with a given name for a given SecureTransport product.",
        "description" : "<b>Since: </b>FM v2.0<br>Access enforcement <b>always performed</b> (resource is <b>Product</b>, action is <b>Modify</b>)",
        "tags" : [ "st" ]
      },
      "get" : {
        "operationId" : "v2_st_businessId_networkzones_getNetworkZones",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "the SecureTransport product business idv",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The SecureTransport product exists and the list of network zones will be\n              returned.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "items" : {
                    "$ref" : "#/components/schemas/RNetworkZone"
                  },
                  "type" : "array"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid arguments."
          },
          "404" : {
            "description" : "The SecureTransport product does not exist."
          }
        },
        "summary" : "Retrieve a list of network zones of a SecureTransport product.",
        "description" : "<b>Since: </b>FM v2.0<br>Access enforcement <b>always performed</b> (resource is <b>Product</b>, action is <b>View</b>)",
        "tags" : [ "st" ]
      },
      "post" : {
        "operationId" : "v2_st_businessId_networkzones_createNetworkZone",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The business id of the SecureTransport product.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "_body",
          "in" : "query",
          "description" : "Controls if the body of the created object is returned in the\n            response. Default value is <code>true</code>.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The network zone was successfully created.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RNetworkZone"
                }
              }
            }
          },
          "400" : {
            "description" : "The network zone fields are not valid."
          },
          "403" : {
            "description" : "The user does no have right to update the network zone"
          },
          "404" : {
            "description" : "The SecureTransport identified by businessId does not exist."
          },
          "500" : {
            "description" : "Internal server error."
          }
        },
        "summary" : "Creates a new Network zone for a SecureTransport product.",
        "description" : "<b>Since: </b>FM v2.0<br>Access enforcement <b>always performed</b> (resource is <b>Product</b>, action is <b>Modify</b>)",
        "tags" : [ "st" ],
        "requestBody" : {
          "description" : "The Network zone to be created.",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RNetworkZone"
              }
            }
          }
        }
      }
    },
    "/v2/st/{businessId}/networkzones/{name}" : {
      "delete" : {
        "operationId" : "v2_st_businessId_networkzonesname_deleteNetworkZone",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The business id of the SecureTransport product.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "name",
          "in" : "path",
          "description" : "The network zone name. Two network zones cannot have the same name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "_forced",
          "in" : "query",
          "description" : "",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The SecureTransport exists and network zone was successfully removed"
          },
          "400" : {
            "description" : "Invalid arguments"
          },
          "404" : {
            "description" : "The SecureTransport identified by businessId does not exist or\n               network zone does not exist on SecureTransport product"
          },
          "412" : {
            "description" : "The remove of the network zone has an impact on flows. To perform the operation regardless of its impact, set the _forced parameter to true."
          },
          "500" : {
            "description" : "Internal server error"
          }
        },
        "summary" : "Remove a network zone given by name for a given SecureTransport product.",
        "description" : "<b>Since: </b>FM v2.0<br>Access enforcement <b>always performed</b> (resource is <b>Product</b>, action is <b>Modify</b>)",
        "tags" : [ "st" ]
      },
      "get" : {
        "operationId" : "v2_st_businessId_networkzonesname_getNetworkZone",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "the SecureTransport product business id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "name",
          "in" : "path",
          "description" : "the network zone name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The SecureTransport product exists and the list of network zones will be\n              returned.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "items" : {
                    "$ref" : "#/components/schemas/RNetworkZone"
                  },
                  "type" : "array"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid arguments."
          },
          "404" : {
            "description" : "The SecureTransport product does not exist."
          }
        },
        "summary" : "Retrieve a network zone of a SecureTransport product.",
        "description" : "<b>Since: </b>FM v2.0<br>Access enforcement <b>always performed</b> (resource is <b>Product</b>, action is <b>View</b>)",
        "tags" : [ "st" ]
      },
      "put" : {
        "operationId" : "v2_st_businessId_networkzonesname_updateNetworkZone",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The business id of the SecureTransport product.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "name",
          "in" : "path",
          "description" : "The name of the network zone.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "_forced",
          "in" : "query",
          "description" : "To force updating the partner certificate and apply the impacts on\n            flows.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "_body",
          "in" : "query",
          "description" : "Controls if the body of the created object is returned in the\n            response. Default value is <code>true</code>.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The network zone was successfully updated.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RNetworkZone"
                }
              }
            }
          },
          "400" : {
            "description" : "The network zone fields are not valid."
          },
          "403" : {
            "description" : "The user does no have right to update the network zone"
          },
          "404" : {
            "description" : "The SecureTransport identified by businessId does not exist or the\n              network zone identified by name does not exists."
          },
          "500" : {
            "description" : "Internal server error."
          }
        },
        "summary" : "Updates an existing network zone for a SecureTransport product.",
        "description" : "<b>Since: </b>FM v2.0<br>Access enforcement <b>always performed</b> (resource is <b>Product</b>, action is <b>Modify</b>)",
        "tags" : [ "st" ],
        "requestBody" : {
          "description" : "The Network zone to be updated.",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RNetworkZone"
              }
            }
          }
        }
      }
    },
    "/v2/st/{businessId}/synchronizebox" : {
      "post" : {
        "operationId" : "v2_st_businessId_synchronizebox_synchronizeBackupProducts",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The business id of the product to synchronize",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The backup products were synchronized.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RSynchronizationResult"
                }
              }
            }
          },
          "400" : {
            "description" : "The business id is not valid."
          },
          "404" : {
            "description" : "The master product was not found."
          },
          "500" : {
            "description" : "Internal server error."
          }
        },
        "summary" : "Synchronizes a product with it's backup products",
        "description" : "\n\n <p>\n Communication profiles and credentials of the master product are copied on\n each backup product. Identical communication profiles and credentials are\n kept if they already exists on the backup\n </p><br><b>Since: </b>FM v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Product</b>, action is <b>Modify</b>)<br>",
        "tags" : [ "st" ]
      }
    },
    "/v2/cft/configuration/updates" : {
      "get" : {
        "operationId" : "getUpdates",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "The updates have been retrieved",
            "content" : {
              "application/json" : {
                "schema" : {
                  "items" : {
                    "$ref" : "#/components/schemas/CftUpdate"
                  },
                  "type" : "array"
                }
              }
            }
          },
          "403" : {
            "description" : "The user does not have enough rights to retrieve updates"
          }
        },
        "summary" : "Retrieves existing updates.",
        "description" : "<b>Since: </b>FM v2.0.202012\n\n <p>\n Returns all Transfer CFT updates.\n </p>\n <p>\n An update is either a Service Pack, an Upgrade Pack or a Patch applicable to a Transfer CFT.\n </p>\n <p>\n <b>Note:</b>\n If the user has <b>View</b> rights on <b>Deployment</b>, the last deployment timestamps of each update are returned. Otherwise the last deployment timestamp value is 0.\n </p><br>Access enforcement <b>always performed</b> (resource is <b>Update_Package</b>, action is <b>View</b>)",
        "tags" : [ "cftplugin" ]
      },
      "post" : {
        "operationId" : "uploadUpdate",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "The update has been uploaded",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CftUpdate"
                }
              }
            }
          },
          "400" : {
            "description" : "An invalid parameter has been supplied"
          },
          "403" : {
            "description" : "The user does not have enough rights to upload updates"
          },
          "409" : {
            "description" : "Update already exists"
          }
        },
        "summary" : "Uploads an update.",
        "description" : "<b>Since: </b>FM v2.0.202012\n\n <p>\n Uploads a Transfer CFT update.\n </p><br>Access enforcement <b>always performed</b> (resource is <b>Update_Package</b>, action is <b>Create</b>)",
        "tags" : [ "cftplugin" ],
        "requestBody" : {
          "content" : {
            "multipart/form-data" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "file" : {
                    "type" : "string",
                    "description" : "The file to upload (max size is 300 MB)",
                    "format" : "binary"
                  }
                },
                "required" : [ "file" ]
              }
            }
          }
        }
      }
    },
    "/v2/cft/configuration/updates/{name}" : {
      "delete" : {
        "operationId" : "deleteUpdateByName",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "The update name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "The update has been deleted"
          },
          "403" : {
            "description" : "The user does not have enough rights to delete an update"
          },
          "404" : {
            "description" : "Update not found"
          }
        },
        "summary" : "Deletes an update by name.",
        "description" : "<b>Since: </b>FM v2.0.202012\n\n <p>\n Deletes a single Transfer CFT update.\n </p><br>Access enforcement <b>always performed</b> (resource is <b>Update_Package</b>, action is <b>Delete</b>)",
        "tags" : [ "cftplugin" ]
      },
      "get" : {
        "operationId" : "getUpdateByName",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "The update name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The update has been retrieved",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CftUpdate"
                }
              }
            }
          },
          "403" : {
            "description" : "The user does not have enough rights to retrieve updates"
          },
          "404" : {
            "description" : "Update not found"
          }
        },
        "summary" : "Retrieves an update by name.",
        "description" : "<b>Since: </b>FM v2.0.202012\n\n <p>\n Returns a single Transfer CFT update.\n </p>\n <p>\n <b>Note:</b>\n If the user has <b>View</b> rights on <b>Deployment</b>, the last deployment timestamp of the update is returned. Otherwise the last deployment timestamp value is 0.\n </p><br>Access enforcement <b>always performed</b> (resource is <b>Update_Package</b>, action is <b>View</b>)",
        "tags" : [ "cftplugin" ]
      }
    },
    "/v2/cft/configuration/updates/{name}/deployments" : {
      "get" : {
        "operationId" : "getUpdateDeploymentStatus",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "The update name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The deployment statuses of the update have been retrieved",
            "content" : {
              "application/json" : {
                "schema" : {
                  "items" : {
                    "$ref" : "#/components/schemas/CftUpdateDeployment"
                  },
                  "type" : "array"
                }
              }
            }
          },
          "403" : {
            "description" : "The user does not have enough rights to retrieve the status of the deployments"
          },
          "404" : {
            "description" : "Update not found"
          }
        },
        "summary" : "Retrieves the deployment status of all CFTs for an update.",
        "description" : "<b>Since: </b>FM v2.0.202012\n\n <p>\n Returns the deployment status of all Transfer CFTs for an update.\n </p><br>Access enforcement <b>always performed</b> (resource is <b>Update_Package</b>, action is <b>View</b>)<br>Access enforcement <b>always performed</b> (resource is <b>Deployment</b>, action is <b>View</b>)<br>",
        "tags" : [ "cftplugin" ]
      },
      "post" : {
        "operationId" : "deployUpdate",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "The update name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "allowDowngrades",
          "in" : "query",
          "description" : "If <code>true</code>, allow Transfer CFTs to be downgraded. Otherwise an error is returned. Default value is <code>false</code>.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "202" : {
            "description" : "The update deployment request has been accepted for processing"
          },
          "400" : {
            "description" : "An invalid parameter has been supplied"
          },
          "403" : {
            "description" : "The user does not have enough rights to deploy an update"
          },
          "404" : {
            "description" : "Update not found"
          }
        },
        "summary" : "Deploys an update on one or more CFTs.",
        "description" : "<b>Since: </b>FM v2.0.202012\n\n <p>\n Deploys an update on one or more Transfer CFTs.\n </p>\n <p>\n An update can be an upgrade or a downgrade.\n </p><br>Access enforcement <b>always performed</b> (resource is <b>Update_Package</b>, action is <b>Deploy</b>)<br>Access enforcement <b>always performed</b> (resource is <b>Product</b>, action is <b>View</b>)<br>",
        "tags" : [ "cftplugin" ],
        "requestBody" : {
          "description" : "A list of Product Names.",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "items" : {
                  "type" : "string"
                },
                "type" : "array"
              }
            }
          }
        }
      }
    },
    "/v2/cft/configuration/updates/{name}/products" : {
      "get" : {
        "operationId" : "getProductsForUpdate",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "The update name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Get Transfer CFTs starting from the specified offset\n                          in the list of records returned by the database.\n                          If not set, offset defaults to 0.\n                          Legal values: 0 <= offset <= 2147483647",
          "required" : false,
          "schema" : {
            "format" : "int64",
            "type" : "integer"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of items returned.\n                          If not set or set to 0 (return all), limit defaults to 100.\n                          Legal values: 0 <= limit <= 1000",
          "required" : false,
          "schema" : {
            "format" : "int64",
            "type" : "integer"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "Sort Transfer CFTs using a specific field from result record.\n                          Valid values are: name, hostname, os, version, port, status.\n                          By default no sort is performed.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ascending",
          "in" : "query",
          "description" : "Sort Transfer CFTs in ascending or reverse order\n                          if sort criteria is not empty",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "isDowngrade",
          "in" : "query",
          "description" : "If <code>true</code>, return eligible Transfer CFTs for downgrade, otherwise return eligible Transfer CFTs for upgrade. Default value is <code>false</code>.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The Transfer CFTs have been retrieved",
            "content" : {
              "application/json" : {
                "schema" : {
                  "items" : {
                    "$ref" : "#/components/schemas/CftUpdateProduct"
                  },
                  "type" : "array"
                }
              }
            }
          },
          "403" : {
            "description" : "The user does not have enough rights to retrieve Transfer CFTs for an update"
          },
          "404" : {
            "description" : "Update not found"
          }
        },
        "summary" : "Retrieves eligible CFTs for an update.",
        "description" : "<b>Since: </b>FM v2.0.202012\n\n <p>\n Returns all Transfer CFTs for which this update applies.\n </p><br>Access enforcement <b>always performed</b> (resource is <b>Update_Package</b>, action is <b>View</b>)<br>Access enforcement <b>always performed</b> (resource is <b>Product</b>, action is <b>View</b>)<br>",
        "tags" : [ "cftplugin" ]
      }
    },
    "/v2/cft/certificate/governance/renew" : {
      "post" : {
        "operationId" : "requestGovernanceCaRenewal",
        "parameters" : [ {
          "name" : "datetime",
          "in" : "query",
          "description" : "The date and time in GMT time zone the renewal to take place in format YYYYMMDDHHMMSS (If not specified, the current date and time will be used.)",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "202" : {
            "description" : "The renewal request has been accepted."
          },
          "400" : {
            "description" : "An invalid Transfer CFT name or datetime has been supplied."
          },
          "403" : {
            "description" : "The user does not have enough rights to request a governance CA certificate renewal."
          },
          "default" : {
            "description" : "successful operation"
          }
        },
        "summary" : "Requests governance CA certificate.",
        "description" : "\n\n <p>\n Requests governance CA certificate renewal.\n </p>Access enforcement <b>always performed</b> (resource is <b>Product_Configuration</b>, action is <b>Deploy</b>)",
        "tags" : [ "cft" ],
        "requestBody" : {
          "description" : "The list of Transfer CFT names for which to request the renewal",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "items" : {
                  "type" : "string"
                },
                "type" : "array"
              }
            }
          }
        }
      }
    },
    "/v2/cft/configuration/certificates/" : {
      "get" : {
        "operationId" : "retrieveCertificates",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "The certificates has been retrieved.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RCertificateAuthorityResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error."
          }
        },
        "summary" : "Retrieve all certificates.",
        "description" : "\n\n <p>\n   \n </p><br><b>Since: </b>FC v2.0<br>Access enforcement <b>always performed</b> (resource is <b>Product</b>, action is <b>View</b>)",
        "tags" : [ "cftplugin" ]
      },
      "post" : {
        "operationId" : "createCertificate",
        "parameters" : [ ],
        "responses" : {
          "201" : {
            "description" : "The certificate has been created.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RCertificateAuthorityResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "An invalid parameter has been supplied."
          },
          "403" : {
            "description" : "The user does no have right to create the certificate."
          },
          "409" : {
            "description" : "A certificate with the same type already exists."
          },
          "500" : {
            "description" : "Internal server error."
          }
        },
        "summary" : "Creates a new certificate.",
        "description" : "\n\n <p>\n   \n </p><br><b>Since: </b>FC v2.0<br>Access enforcement <b>always performed</b> (resource is <b>Product</b>, action is <b>Modify</b>)",
        "tags" : [ "cftplugin" ],
        "requestBody" : {
          "description" : "",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RCertificateAuthority"
              }
            }
          }
        }
      }
    },
    "/v2/cft/configuration/certificates/{id}" : {
      "get" : {
        "operationId" : "retrieveCertificate",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The certificate has been retrieved",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RCertificateAuthorityResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "The certificate identified by id does not exist."
          },
          "500" : {
            "description" : "Internal server error."
          }
        },
        "summary" : "Retrieve a certificate.",
        "description" : "\n\n <p>\n   \n </p><br><b>Since: </b>FC v2.0<br>Access enforcement <b>always performed</b> (resource is <b>Product</b>, action is <b>View</b>)",
        "tags" : [ "cftplugin" ]
      },
      "put" : {
        "operationId" : "updateCertificate",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The certificate has been updated.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RCertificateAuthorityResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "An invalid parameter has been supplied."
          },
          "403" : {
            "description" : "The user does no have right to update the certificate."
          },
          "404" : {
            "description" : "The certificate identified by id does not exist."
          },
          "500" : {
            "description" : "Internal server error."
          }
        },
        "summary" : "Update a certificate.",
        "description" : "\n\n <p>\n   \n </p><br><b>Since: </b>FC v2.0<br>Access enforcement <b>always performed</b> (resource is <b>Product</b>, action is <b>Modify</b>)",
        "tags" : [ "cftplugin" ],
        "requestBody" : {
          "description" : "",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RCertificateAuthority"
              }
            }
          }
        }
      }
    },
    "/v2/cft/configuration/parameters/" : {
      "get" : {
        "operationId" : "getParameters",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "The list of parameters has been retrieved",
            "content" : {
              "application/json" : {
                "schema" : {
                  "items" : {
                    "$ref" : "#/components/schemas/RParameter"
                  },
                  "type" : "array"
                }
              }
            }
          },
          "403" : {
            "description" : "The user does not have enough rights to view the cft plugin parameters"
          }
        },
        "summary" : "Retrieves the list of parameters.",
        "description" : "\n\n <p>\n Returns the list of parameters\n </p><br><b>Since: </b>FM v2.0<br>Access enforcement <b>always performed</b> (resource is <b>Product</b>, action is <b>View</b>)",
        "tags" : [ "cftplugin" ]
      },
      "put" : {
        "operationId" : "updateParameters",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "The list of parameters was updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "items" : {
                    "$ref" : "#/components/schemas/RParameter"
                  },
                  "type" : "array"
                }
              }
            }
          },
          "400" : {
            "description" : "Some inputs are not valid"
          },
          "403" : {
            "description" : "The user does not have enough rights to update the cft plugin parameters"
          }
        },
        "summary" : "Update a list of parameters.",
        "description" : "\n\n <p>\n  <br/>\n <br/>\n\n Supported values for the parameter <b>partner_id</b> : %HOSTNAME% or empty string<br/>\n When modifying <b>registration_create_application</b> or <b>registration_application_name</b>, verify that if <b>registration_create_application</b> is true\n then <b>registration_application_name</b> must contain <b>{%id%}</b> or/and <b>{%name%}</b> to ensure the unicity of the application name.\n </p><br><b>Since: </b>FM v2.0<br>Access enforcement <b>always performed</b> (resource is <b>Product</b>, action is <b>Modify</b>)",
        "tags" : [ "cftplugin" ],
        "requestBody" : {
          "description" : "Parameters to update",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "items" : {
                  "$ref" : "#/components/schemas/RParameter"
                },
                "type" : "array"
              }
            }
          }
        }
      }
    },
    "/v2/cft/configuration/parameters/schema" : {
      "get" : {
        "operationId" : "getSchema",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "The schema was successfully return",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          },
          "403" : {
            "description" : "The user does not have enough rights to view the cft plugin parameters schema"
          }
        },
        "summary" : "Retrieves the schema of available parameters.",
        "description" : "\n\n <p>\n \n </p><br><b>Since: </b>FM v2.0<br>Access enforcement <b>always performed</b> (resource is <b>Product</b>, action is <b>View</b>)",
        "tags" : [ "cftplugin" ]
      }
    },
    "/v2/cft/configuration/parameters/{id}" : {
      "get" : {
        "operationId" : "getParameter",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The parameter has been retrieved",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RParameter"
                }
              }
            }
          },
          "403" : {
            "description" : "The user does not have enough rights to view the cft plugin parameters"
          },
          "404" : {
            "description" : "The parameter was not found"
          }
        },
        "summary" : "Retrieve a single parameter.",
        "description" : "\n\n <p>\n Retrieve a single parameter by its id.\n </p><br><b>Since: </b>FM v2.0<br>Access enforcement <b>always performed</b> (resource is <b>Product</b>, action is <b>View</b>)",
        "tags" : [ "cftplugin" ]
      },
      "put" : {
        "operationId" : "updateParameter",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "the id of the parameter to update",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The parameter has been updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RParameter"
                }
              }
            }
          },
          "400" : {
            "description" : "The input is not valid"
          },
          "403" : {
            "description" : "The user does not have enough rights to update the cft plugin parameters"
          },
          "404" : {
            "description" : "The id provided is unknown"
          }
        },
        "summary" : "Update a single parameter.",
        "description" : "\n\n <p>\n <br />\n <br/>\n\n Supported values for the parameter <b>partner_id</b> : %HOSTNAME% or empty string<br/>\n When modifying <b>registration_create_application</b> or <b>registration_application_name</b>, verify that if <b>registration_create_application</b> is true\n then <b>registration_application_name</b> must contain <b>{%id%}</b> or/and <b>{%name%}</b> to ensure the unicity of the application name.\n </p><br><b>Since: </b>FM v2.0<br>Access enforcement <b>always performed</b> (resource is <b>Product</b>, action is <b>Modify</b>)",
        "tags" : [ "cftplugin" ],
        "requestBody" : {
          "description" : "Parameter to update",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RParameter"
              }
            }
          }
        }
      }
    },
    "/v2/cft/configuration/secrets/" : {
      "get" : {
        "operationId" : "getSecrets",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "The list was retrieved",
            "content" : {
              "application/json" : {
                "schema" : {
                  "items" : {
                    "$ref" : "#/components/schemas/RSharedSecret"
                  },
                  "type" : "array"
                }
              }
            }
          }
        },
        "summary" : "Retrieves a list of shared secrets.",
        "description" : "\n\n <p>\n Returns the list of shared secrets defined\n </p><br><b>Since: </b>FC v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Product</b>, action is <b>View</b>)",
        "tags" : [ "cftplugin" ]
      },
      "post" : {
        "operationId" : "createSharedSecret",
        "parameters" : [ ],
        "responses" : {
          "201" : {
            "description" : "The Shared Secret has been created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RSharedSecret"
                }
              }
            }
          },
          "403" : {
            "description" : "The user does not have enough rights to view the shared secrets or the limit was exceeded."
          }
        },
        "summary" : "Creates a new shared secret.",
        "description" : "\n\n <p>\n   Creates a new Shared Secret.\n </p><br><b>Since: </b>FC v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Product</b>, action is <b>Modify</b>)",
        "tags" : [ "cftplugin" ]
      }
    },
    "/v2/cft/configuration/secrets/{businessId}" : {
      "delete" : {
        "operationId" : "deleteSharedSecret",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The shared secret business Id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The Shared Secret has been deleted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          },
          "403" : {
            "description" : "The user does not have enough rights to manage shared secrets."
          },
          "404" : {
            "description" : "The shared Secret was not found."
          }
        },
        "summary" : "Delete a shared secret.",
        "description" : "\n\n <p>\n   \n </p><br><b>Since: </b>FC v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Product</b>, action is <b>Modify</b>)",
        "tags" : [ "cftplugin" ]
      },
      "get" : {
        "operationId" : "getSecret",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The shared secret was retrieved",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RSharedSecret"
                }
              }
            }
          },
          "404" : {
            "description" : "The shared secret was not found"
          }
        },
        "summary" : "Retrieves a shared secret.",
        "description" : "\n\n <p>\n Returns theshared secrets identified by its businessId.\n </p><br><b>Since: </b>FC v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Product</b>, action is <b>View</b>)",
        "tags" : [ "cftplugin" ]
      },
      "put" : {
        "operationId" : "updateSharedSecret",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The Shared Secret business id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The Shared Secret has been updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RSharedSecret"
                }
              }
            }
          },
          "404" : {
            "description" : "The shared Secret was not found."
          }
        },
        "summary" : "Activate / Deactivate a shared secret.",
        "description" : "\n\n <p>\n  Modify a shared secret ( only activation can be modified).\n </p><br><b>Since: </b>FC v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Product</b>, action is <b>Modify</b>)",
        "tags" : [ "cftplugin" ],
        "requestBody" : {
          "description" : "",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RSharedSecret"
              }
            }
          }
        }
      }
    },
    "/v2/cft/configuration/version/" : {
      "get" : {
        "operationId" : "getVersion",
        "parameters" : [ ],
        "responses" : {
          "default" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          }
        },
        "summary" : "",
        "description" : "",
        "tags" : [ "cftplugin" ]
      }
    },
    "/v2/cft/configuration/{businessId}/deploy" : {
      "get" : {
        "operationId" : "deployCftConfiguration",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The business id of the Transfer CFT",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "forceRestart",
          "in" : "query",
          "description" : "Whether to restart CFT if needed by the configuration",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "accessManagement",
          "in" : "query",
          "description" : "Whether to deploy access management configuration",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The configuration has been deployed on CFT",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CftDeploymentResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "An invalid parameter has been supplied"
          },
          "403" : {
            "description" : "The user does not have enough rights to deploy the configuration"
          },
          "404" : {
            "description" : "Transfer CFT not found"
          }
        },
        "summary" : "Deploys the CFT configuration.",
        "description" : "\n\n <p>\n     Deploys the configuration on CFT.\n </p>Access enforcement <b>always performed</b> (resource is <b>Product</b>, action is <b>View</b>)<br>Access enforcement <b>always performed</b> (resource is <b>Product_Configuration</b>, action is <b>Deploy</b>)<br>Access enforcement <b>always performed</b> (resource is <b>Product_Configuration</b>, action is <b>Deploy_Without_Restart</b>)<br>",
        "tags" : [ "cft" ]
      }
    },
    "/v2/cft/configuration/{businessId}/folders/" : {
      "delete" : {
        "operationId" : "deleteFolders",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The Transfer CFT business id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "All folders have been deleted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          },
          "403" : {
            "description" : "The user does not have enough rights to delete the folders"
          },
          "404" : {
            "description" : "Transfer CFT not found"
          },
          "412" : {
            "description" : "A policy disallows the deletion of the one or more folders"
          }
        },
        "summary" : "Deletes all the folder monitoring.",
        "description" : "\n\n <p>\n   Deletes all the folder monitoring managed through Configuration for a given CFT.\n </p>\n\n <address>\n     The REST API manages folder monitoring using CFTFOLDER objects only. ( i.e: for CFT version &ge; 3.2.4 )\n </address><br><b>Since: </b>FC v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Product_Configuration</b>, action is <b>Modify</b>)",
        "tags" : [ "cft" ]
      },
      "get" : {
        "operationId" : "getFolders",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The Transfer CFT business id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "deployed",
          "in" : "query",
          "description" : "Whether to retrieve deployed folders on CFT side or saved ones on FM side (<code>default: false</code>)",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The list of folder monitoring objects has been retrieved",
            "content" : {
              "application/json" : {
                "schema" : {
                  "items" : {
                    "$ref" : "#/components/schemas/RFolder"
                  },
                  "type" : "array"
                }
              }
            }
          },
          "400" : {
            "description" : "An invalid parameter has been supplied"
          },
          "403" : {
            "description" : "The user does not have enough rights to view the folder objects"
          },
          "404" : {
            "description" : "Transfer CFT not found"
          }
        },
        "summary" : "Retrieves all folder monitoring for a given CFT.",
        "description" : "\n\n <p>\n     Retrieves the list of folder monitoring objects for a given CFT.\n </p>\n <address>\n     The REST API manages folder monitoring using CFTFOLDER objects only. ( i.e: for CFT version &ge; 3.2.4 )\n </address><br><b>Since: </b>FC v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Product_Configuration</b>, action is <b>View</b>)",
        "tags" : [ "cft" ]
      },
      "post" : {
        "operationId" : "createFolder",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The Transfer CFT business id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "The folder has been created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RFolder"
                }
              }
            }
          },
          "400" : {
            "description" : "An invalid parameter has been supplied"
          },
          "403" : {
            "description" : "The user does not have enough rights to create a folder"
          },
          "404" : {
            "description" : "Transfer CFT not found"
          },
          "409" : {
            "description" : "A folder with the same id already exists"
          }
        },
        "summary" : "Creates a new folder monitoring.",
        "description" : "\n\n <p>\n   Creates a folder monitoring in Transfer CFT.\n </p>\n\n <address>\n     The REST API manages folder monitoring using CFTFOLDER objects only. ( i.e: for CFT version &ge; 3.2.4 )\n </address><br><b>Since: </b>FC v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Product_Configuration</b>, action is <b>Modify</b>)",
        "tags" : [ "cft" ],
        "requestBody" : {
          "description" : "Folder to create",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RFolder"
              }
            }
          }
        }
      }
    },
    "/v2/cft/configuration/{businessId}/folders/{id}" : {
      "delete" : {
        "operationId" : "deleteFolder",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The Transfer CFT business id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "The Folder id to delete",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The folder has been deleted"
          },
          "400" : {
            "description" : "An invalid parameter has been supplied"
          },
          "403" : {
            "description" : "The user does not have enough rights to retrieve a protocol"
          },
          "404" : {
            "description" : "Transfer CFT or Folder not found"
          },
          "405" : {
            "description" : "The folder is used in Flows and cannot be managed using folders resource."
          },
          "412" : {
            "description" : "A policy disallow the deletion of the folder"
          }
        },
        "summary" : "Deletes a folder monitoring.",
        "description" : "\n\n <p>\n   Deletes a folder monitoring in Transfer CFT\n </p>\n <address>\n     The REST API manages folder monitoring using CFTFOLDER objects only. ( i.e: for CFT version &ge; 3.2.4 )\n </address><br><b>Since: </b>FC v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Product_Configuration</b>, action is <b>Modify</b>)",
        "tags" : [ "cft" ]
      },
      "get" : {
        "operationId" : "getFolder",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The Transfer CFT business id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "The Folder id to retrieve",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "deployed",
          "in" : "query",
          "description" : "Whether to retrieve deployed folders on CFT side or saved ones on FM side (<code>default: false</code>)",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The folder has been retrieved",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RFolder"
                }
              }
            }
          },
          "400" : {
            "description" : "An invalid parameter has been supplied"
          },
          "403" : {
            "description" : "The user does not have enough rights to retrieve a folder."
          },
          "404" : {
            "description" : "Transfer CFT or folder object not found"
          }
        },
        "summary" : "Retrieves a given folder monitoring.",
        "description" : "\n\n <p>\n Retrieves a folder monitoring in Transfer CFT\n </p>\n\n <address>\n     The REST API manages folder monitoring using CFTFOLDER objects only. ( i.e: for CFT version &ge; 3.2.4 )\n </address><br><b>Since: </b>FC v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Product_Configuration</b>, action is <b>View</b>)",
        "tags" : [ "cft" ]
      },
      "put" : {
        "operationId" : "updateFolder",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The Transfer CFT business id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "The Folder id to update",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The folder has been updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RFolder"
                }
              }
            }
          },
          "400" : {
            "description" : "An invalid parameter has been supplied"
          },
          "403" : {
            "description" : "The user does not have enough rights to retrieve a protocol"
          },
          "404" : {
            "description" : "Transfer CFT or Folder not found"
          },
          "405" : {
            "description" : "The folder is used in Flows and cannot be managed using folders resource."
          },
          "412" : {
            "description" : "A policy disallows the modification of the folder"
          }
        },
        "summary" : "Updates a folder monitoring.",
        "description" : "\n  <p>\n  Updates a folder monitoring in Transfer CFT.\n  <br>\n  <br>\n  It is a best practice to query for a folder, modify as needed, and then resend the entire folder.<br>\n  When using a PUT, only the URL ID is taken into account; the ID in the request body is not updated.\n </p>\n <address>\n     The REST API manages folder monitoring using CFTFOLDER objects only. ( i.e: for CFT version &ge; 3.2.4 )\n </address><br><b>Since: </b>FC v1.0<br>Access enforcement <b>always performed</b> (resource is <b>Product_Configuration</b>, action is <b>Modify</b>)",
        "tags" : [ "cft" ],
        "requestBody" : {
          "description" : "Folder to update",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RFolder"
              }
            }
          }
        }
      }
    },
    "/v2/cft/configuration/{businessId}/protocols" : {
      "get" : {
        "operationId" : "getCftProtocols",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The business id of the Transfer CFT",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "deployed",
          "in" : "query",
          "description" : "Whether to retrieve deployed protocols on CFT side or saved ones on FM side",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "active",
          "in" : "query",
          "description" : "Whether to retrieve active protocols",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "Filter by the type of protocol",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "networkProtocol",
          "in" : "query",
          "description" : "Filter by the type of the network",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "secure",
          "in" : "query",
          "description" : "Whether to retrieve secure protocols (PESIT only)",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The protocols have been retrieved",
            "content" : {
              "application/json" : {
                "schema" : {
                  "items" : {
                    "$ref" : "#/components/schemas/Protocol"
                  },
                  "type" : "array"
                }
              }
            }
          },
          "400" : {
            "description" : "An invalid parameter has been supplied"
          },
          "403" : {
            "description" : "The user does not have enough rights to retrieve protocols"
          },
          "404" : {
            "description" : "Transfer CFT not found"
          }
        },
        "summary" : "Retrieves CFT protocols.",
        "description" : "\n\n <p>\n  Returns all CFT protocols\n </p>Access enforcement <b>always performed</b> (resource is <b>Product_Configuration</b>, action is <b>View</b>)",
        "tags" : [ "cft" ]
      },
      "post" : {
        "operationId" : "createCftProtocol",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The business id of the Transfer CFT",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "The protocol has been created"
          },
          "400" : {
            "description" : "An invalid parameter has been supplied"
          },
          "403" : {
            "description" : "The user does not have enough rights to create a protocol"
          },
          "404" : {
            "description" : "Transfer CFT, Network protocol or NET object not found"
          },
          "409" : {
            "description" : "A protocol or a communication profile with the same name already exists"
          }
        },
        "summary" : "Creates a CFT protocol.",
        "description" : "\n\n <p>\n     Creates a single CFT protocol\n </p>Access enforcement <b>always performed</b> (resource is <b>Product</b>, action is <b>View</b>)<br>Access enforcement <b>always performed</b> (resource is <b>Product_Configuration</b>, action is <b>Modify</b>)<br>",
        "tags" : [ "cft" ],
        "requestBody" : {
          "description" : "The protocol to create",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Protocol"
              }
            }
          }
        }
      }
    },
    "/v2/cft/configuration/{businessId}/protocols/{name}" : {
      "delete" : {
        "operationId" : "deleteCftProtocolByName",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The business id of the Transfer CFT",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "name",
          "in" : "path",
          "description" : "The name of the protocol to delete",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "forceImpacts",
          "in" : "query",
          "description" : "Whether to apply the impacts on flows",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The protocol has been deleted"
          },
          "400" : {
            "description" : "An invalid parameter has been supplied"
          },
          "403" : {
            "description" : "The user does not have enough rights to delete a protocol"
          },
          "404" : {
            "description" : "Transfer CFT or Protocol not found"
          },
          "412" : {
            "description" : "Deleting the protocol has an impact on flows"
          }
        },
        "summary" : "Deletes a CFT protocol by name.",
        "description" : "\n\n <p>\n Deletes a single CFT protocol\n </p>Access enforcement <b>always performed</b> (resource is <b>Product</b>, action is <b>View</b>)<br>Access enforcement <b>always performed</b> (resource is <b>Product_Configuration</b>, action is <b>Modify</b>)<br>",
        "tags" : [ "cft" ]
      },
      "get" : {
        "operationId" : "getCftProtocolByName",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The business id of the Transfer CFT",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "name",
          "in" : "path",
          "description" : "The name of the protocol to retrieve",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "deployed",
          "in" : "query",
          "description" : "Whether to retrieve deployed protocols on CFT side or saved ones on FM side",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "active",
          "in" : "query",
          "description" : "Whether to retrieve active protocols",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "Filter by the type of the protocol",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "networkProtocol",
          "in" : "query",
          "description" : "Filter by the type of the network",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "secure",
          "in" : "query",
          "description" : "Whether to retrieve secure protocols (PESIT only)",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The protocol has been retrieved",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Protocol"
                }
              }
            }
          },
          "400" : {
            "description" : "An invalid parameter has been supplied"
          },
          "403" : {
            "description" : "The user does not have enough rights to retrieve a protocol"
          },
          "404" : {
            "description" : "Transfer CFT or Protocol not found"
          }
        },
        "summary" : "Retrieves a CFT protocol by name.",
        "description" : "\n\n <p>\n     Returns a single CFT protocol\n </p>Access enforcement <b>always performed</b> (resource is <b>Product_Configuration</b>, action is <b>View</b>)",
        "tags" : [ "cft" ]
      },
      "put" : {
        "operationId" : "updateCftProtocol",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The business id of the Transfer CFT",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "name",
          "in" : "path",
          "description" : "The name of the protocol to update",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "forceImpacts",
          "in" : "query",
          "description" : "Whether to apply the impacts on flows",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The protocol has been updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Protocol"
                }
              }
            }
          },
          "400" : {
            "description" : "An invalid parameter has been supplied"
          },
          "403" : {
            "description" : "The user does not have enough rights to update a protocol"
          },
          "404" : {
            "description" : "Transfer CFT or Protocol not found"
          },
          "412" : {
            "description" : "Updating the protocol has an impact on flows"
          }
        },
        "summary" : "Updates a CFT protocol by name.",
        "description" : "\n\n <p>\n  Updates a single CFT protocol\n </p>Access enforcement <b>always performed</b> (resource is <b>Product</b>, action is <b>View</b>)<br>Access enforcement <b>always performed</b> (resource is <b>Product_Configuration</b>, action is <b>Modify</b>)<br>",
        "tags" : [ "cft" ],
        "requestBody" : {
          "description" : "The protocol to update",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Protocol"
              }
            }
          }
        }
      }
    },
    "/v2/cft/synchronizebox/" : {
      "post" : {
        "operationId" : "v2_cft_synchronizebox_synchronize",
        "parameters" : [ {
          "name" : "restart",
          "in" : "query",
          "description" : "Used to trigger the restart of the CFTs after the synchronization request. Default value is <code>false</code>.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "202" : {
            "description" : "The synchronization request has been accepted for processing, but the processing has not been completed."
          },
          "400" : {
            "description" : "The synchronization request needs at least one CFT name to trigger."
          },
          "default" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RSynchronizationResponse"
                }
              }
            }
          }
        },
        "summary" : "Synchronizes the configuration (flow and static) associated with the given products.",
        "description" : "\n The process is asynchronous so use \n <p>\n <br>GET /synchronizebox/{businessId} to see the result of the synchronization request\n </p>Access enforcement <b>always performed</b> (resource is <b>Product</b>, action is <b>Synchronize</b>)",
        "tags" : [ "cft" ],
        "requestBody" : {
          "description" : "The list of CFT names for which to trigger the synchronization",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "items" : {
                  "type" : "string"
                },
                "type" : "array"
              }
            }
          }
        }
      }
    },
    "/v2/cft/synchronizebox/{businessId}" : {
      "get" : {
        "operationId" : "v2_cft_synchronizeboxbusinessId_getSynchronization",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The businessId of the synchronization request.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The synchronization request exists.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RSynchronizationResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "The synchronization request with the given businessId doesn't exist."
          }
        },
        "summary" : "Gets the status of the given synchronization request.",
        "description" : "Access enforcement <b>always performed</b> (resource is <b>Product</b>, action is <b>Synchronize</b>)",
        "tags" : [ "cft" ]
      }
    },
    "/v3/cft/configuration/{businessId}" : {
      "get" : {
        "operationId" : "getConfiguration",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The Transfer CFT business id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "status",
          "in" : "query",
          "description" : "The status or statuses comma separated ( available values saved, deployed and deleted ) (default : all objects)",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "_brief",
          "in" : "query",
          "description" : "If true retrieve only the types, id, status of the objects (default value is false)",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The list of configurations has been retrieved.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CftConfigurationGet"
                }
              }
            }
          },
          "400" : {
            "description" : "An invalid parameter has been supplied."
          },
          "403" : {
            "description" : "The user does not have enough rights to view Transfer CFT configurations."
          },
          "404" : {
            "description" : "Transfer CFT not found"
          }
        },
        "summary" : "Retrieves the configurations on a given Transfer CFT",
        "description" : "\n\n <p>\n Retrieves list of configurations on a given Transfer CFT which can be filtered by status, with brief or detailed\n information. To retrieve configurations, you need to have the rights on resource Product Configuration and\n action View, or the rights to view each object individually\n (e.g. component is TransferCFTPlugin, resource is CONFIGURATION: EXPLICITSENDPROFILE, action is View).\n </p>\n <b>Since:</b>FM v2.0.202107\n <br/>\n Access enforcement always performed",
        "tags" : [ "cft" ]
      }
    },
    "/v3/cft/configuration/{businessId}/cronjobs" : {
      "get" : {
        "operationId" : "getCronjobs",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The Transfer CFT business id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "status",
          "in" : "query",
          "description" : "The status of the cronjobs to retrieve. Available values: saved, deployed, deleted. By default, all cronjobs are retrieved.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "query",
          "description" : "The cronjob Id to retrieve.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The list of cronjobs has been retrieved.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RCftCronjobDataList"
                }
              }
            }
          },
          "400" : {
            "description" : "An invalid parameter has been supplied."
          },
          "403" : {
            "description" : "The user does not have enough rights to retrieve the list of cronjobs."
          },
          "404" : {
            "description" : "Transfer CFT not found."
          }
        },
        "summary" : "Retrieves Transfer CFT cronjobs.",
        "description" : "\n\n <p>\n Retrieves list of all cronjobs for a given Transfer CFT or a single cronjob for a given id and a given Transfer CFT.\n </p>\n <b>Since:</b>FM v2.0.202107\n <br/>\n Access enforcement always performed ( resource is <b>Product_Configuration</b>, action is <b>View</b> ) or\n ( component is <b>TransferCFTPlugin</b>, resource is <b>CONFIGURATION:CRONJOB</b>, action is <b>View</b> )",
        "tags" : [ "cft" ]
      },
      "post" : {
        "operationId" : "createCronjob",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The Transfer CFT business id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "The cronjob has been created.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RCftCronjobData"
                }
              }
            }
          },
          "400" : {
            "description" : "An invalid parameter has been supplied."
          },
          "403" : {
            "description" : "The user does not have enough rights to create a cronjob."
          },
          "404" : {
            "description" : "Transfer CFT not found."
          },
          "409" : {
            "description" : "A cronjob with the same id already exists."
          }
        },
        "summary" : "Creates a new Transfer CFT cronjob.",
        "description" : "\n\n <p>\n Creates a new cronjob on a Transfer CFT.\n </p>\n <b>Since:</b>FM v2.0.202107\n <br/>\n Access enforcement always performed ( resource is <b>Product_Configuration</b>, action is <b>Modify</b> ) or\n ( component is <b>TransferCFTPlugin</b>, resource is <b>CONFIGURATION:CRONJOB</b>, action is <b>Create</b> )",
        "tags" : [ "cft" ],
        "requestBody" : {
          "description" : "The cronjob data",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RCftCronjobData"
              }
            }
          }
        }
      }
    },
    "/v3/cft/configuration/{businessId}/cronjobs/{id}" : {
      "delete" : {
        "operationId" : "deleteCronjob",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The Transfer CFT business id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "The cronjob Id to delete.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Cronjob has been successfully deleted.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          },
          "202" : {
            "description" : "Cronjob has been marked for deletion, and will be removed from Transfer CFT on the next configuration deployment."
          },
          "400" : {
            "description" : "An invalid parameter has been supplied."
          },
          "403" : {
            "description" : "The user does not have enough rights to delete a cronjob."
          },
          "404" : {
            "description" : "Transfer CFT or cronjob not found."
          },
          "410" : {
            "description" : "Cronjob is already marked for deletion."
          },
          "412" : {
            "description" : "Cronjob is locked by a policy, and cannot be removed."
          }
        },
        "summary" : "Deletes a Transfer CFT cronjob.",
        "description" : "\n\n <p>\n The cronjob will be removed from the Transfer CFT once the configuration is deployed.\n </p>\n <b>Since:</b>FM v2.0.202107\n <br/>\n Access enforcement always performed ( resource is <b>Product_Configuration</b>, action is <b>Modify</b> ) or\n ( component is <b>TransferCFTPlugin</b>, resource is <b>CONFIGURATION:CRONJOB</b>, action is <b>Delete</b> )",
        "tags" : [ "cft" ]
      },
      "get" : {
        "operationId" : "getCronjob",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The Transfer CFT business id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "The cronjob Id to retrieve.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "deployed",
          "in" : "query",
          "description" : "Whether to retrieve a deployed cronjob on Transfer CFT or a saved one on Flow Manager side. (default : false)",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The cronjob has been retrieved.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RCftCronjobData"
                }
              }
            }
          },
          "400" : {
            "description" : "An invalid parameter has been supplied."
          },
          "403" : {
            "description" : "The user does not have enough rights to retrieve a cronjob."
          },
          "404" : {
            "description" : "Transfer CFT or cronjob not found."
          },
          "410" : {
            "description" : "Cronjob is marked for deletion."
          }
        },
        "summary" : "Retrieves a Transfer CFT cronjob by id.",
        "description" : "\n\n <p>\n Retrieves a single cronjob by id for a given Transfer CFT.\n </p>\n <b>Since:</b>FM v2.0.202107\n <br/>\n Access enforcement always performed ( resource is <b>Product_Configuration</b>, action is <b>View</b> ) or\n ( component is <b>TransferCFTPlugin</b>, resource is <b>CONFIGURATION:CRONJOB</b>, action is <b>View</b> )",
        "tags" : [ "cft" ]
      },
      "put" : {
        "operationId" : "updateCronjob",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The Transfer CFT business id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "The cronjob Id to update.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The cronjob has been updated.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RCftCronjobData"
                }
              }
            }
          },
          "400" : {
            "description" : "An invalid parameter has been supplied."
          },
          "403" : {
            "description" : "The user does not have enough rights to update a cronjob."
          },
          "404" : {
            "description" : "Transfer CFT or cronjob not found."
          },
          "410" : {
            "description" : "Cronjob is marked for deletion, and cannot be updated."
          },
          "412" : {
            "description" : "Cronjob is locked by a policy, and cannot be updated."
          }
        },
        "summary" : "Updates a Transfer CFT cronjob.",
        "description" : "\n <p>\n Updates a single cronjob in a given Transfer CFT.\n </p>\n <b>Since:</b>FM v2.0.202107\n <br/>\n Access enforcement always performed ( resource is <b>Product_Configuration</b>, action is <b>Modify</b> ) or\n ( component is <b>TransferCFTPlugin</b>, resource is <b>CONFIGURATION:CRONJOB</b>, action is <b>Modify</b> )",
        "tags" : [ "cft" ],
        "requestBody" : {
          "description" : "The cronjob to update",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RCftCronjobData"
              }
            }
          }
        }
      }
    },
    "/v3/cft/configuration/{businessId}/deployments" : {
      "get" : {
        "operationId" : "getDeploymentList",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The Transfer CFT business id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The list of deployments has been retrieved.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RCftDeploymentList"
                }
              }
            }
          },
          "400" : {
            "description" : "An invalid parameter has been supplied."
          },
          "403" : {
            "description" : "The user does not have enough rights to view deployments."
          },
          "404" : {
            "description" : "Transfer CFT not found"
          }
        },
        "summary" : "Retrieves information about deployments on a given Transfer CFT",
        "description" : "\n <p>\n Retrieves information about last deployments on a given Transfer CFT.\n To retrieve deployments, you need to have the rights on resource Deployment and action View, otherwise\n you will only see your deployments.\n </p>\n <b>Since:</b>FM v2.0.202107\n <br/>\n Access enforcement always performed ( resource is <b>Deployment</b>, action is <b>View</b> ) or ( Deployment ownership )",
        "tags" : [ "cft" ]
      },
      "post" : {
        "operationId" : "deployConfiguration",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The Transfer CFT business id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "202" : {
            "description" : "The deploy request has been accepted for processing, but the processing has not been completed."
          },
          "400" : {
            "description" : "An invalid parameter has been supplied."
          },
          "403" : {
            "description" : "The user does not have enough rights to deploy the list of objects."
          },
          "404" : {
            "description" : "Transfer CFT, object id or type not found"
          },
          "default" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RCftDeployment"
                }
              }
            }
          }
        },
        "summary" : "Deploys Transfer CFT configurations",
        "description" : "\n\n <p>\n Deploys a given list of Transfer CFT objects on Transfer CFT. You need to have the rights to View the Transfer CFT\n product (resource is Product, action is View) plus :<br>\n Deploy on the Transfer CFT configuration (resource is Product_Configuration, action is Deploy),\n or the rights to deploy on each object individually (e.g. component is TransferCFTPlugin, resource is CONFIGURATION:CRONJOB, action is Deploy).\n </p>\n <b>Since:</b>FM v2.0.202107\n <br/>\n Access enforcement always performed (resource is <b>Product</b>, action is <b>View</b>) and ( ( resource is <b>Product_Configuration</b>, action is <b>Deploy</b> ) or ( individually ) )",
        "tags" : [ "cft" ],
        "requestBody" : {
          "description" : "",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DeploymentElementList"
              }
            }
          }
        }
      }
    },
    "/v3/cft/configuration/{businessId}/deployments/{dBusinessId}" : {
      "get" : {
        "operationId" : "getDeployment",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The Transfer CFT business id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "dBusinessId",
          "in" : "path",
          "description" : "The deployment id to retrieve",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The deployment has been retrieved.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RCftDeployment"
                }
              }
            }
          },
          "400" : {
            "description" : "An invalid parameter has been supplied."
          },
          "403" : {
            "description" : "The user does not have enough rights to view deployments."
          },
          "404" : {
            "description" : "Transfer CFT not found or deployment not found"
          }
        },
        "summary" : "Retrieves information about a given deployment on a given Transfer CFT",
        "description" : "\n <p>\n Retrieve&nbsp;information about a given deployment on a given Transfer CFT.\n To retrieve a given deployment, you need to be the creator of the deployment or have the rights on resource Deployment and action View.\n </p>\n <b>Since:</b>FM v2.0.202107\n <br/>\n Access enforcement always performed ( resource is <b>Deployment</b>, action is <b>View</b> ) or ( Deployment ownership )",
        "tags" : [ "cft" ]
      }
    },
    "/v3/cft/configuration/{businessId}/partners" : {
      "get" : {
        "operationId" : "getPartners",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The Transfer CFT business id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "status",
          "in" : "query",
          "description" : "The status of the partners to retrieve. Available values: saved, deployed, deleted. By default, all partners are retrieved",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "query",
          "description" : "The partner Id to retrieve.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The list of partners has been retrieved.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RCftPartnerDataList"
                }
              }
            }
          },
          "400" : {
            "description" : "An invalid parameter has been supplied."
          },
          "403" : {
            "description" : "The user does not have enough rights to retrieve the list of partners."
          },
          "404" : {
            "description" : "Transfer CFT not found."
          }
        },
        "summary" : "Retrieves Transfer CFT partners.",
        "description" : "\n\n <p>\n Retrieves Transfer CFT partners\n </p>\n <b>Since:</b>FM v2.0.202107\n <br/>\n Access enforcement always performed ( resource is <b>Product_Configuration</b>, action is <b>Modify</b> ) or\n ( component is <b>TransferCFTPlugin</b>, resource is <b>CONFIGURATION:PARTNER</b>, action is <b>View</b> )",
        "tags" : [ "cft" ]
      },
      "post" : {
        "operationId" : "createPartners",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The Transfer CFT business id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "The partner has been created.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          },
          "400" : {
            "description" : "An invalid parameter has been supplied."
          },
          "403" : {
            "description" : "The user does not have enough rights to create a partner."
          },
          "404" : {
            "description" : "Transfer CFT not found."
          },
          "409" : {
            "description" : "A partner with the same id already exists."
          }
        },
        "summary" : "Creates a new Transfer CFT partner.",
        "description" : "\n\n <p>\n Creates a new partner on Transfer CFT.\n </p>\n <b>Since:</b>FM v2.0.202107\n <br/>\n Access enforcement always performed ( resource is <b>Product_Configuration</b>, action is <b>Modify</b> ) or\n ( component is <b>TransferCFTPlugin</b>, resource is <b>CONFIGURATION:PARTNER</b>, action is <b>Create</b> )",
        "tags" : [ "cft" ],
        "requestBody" : {
          "description" : "",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RCftPartnerData"
              }
            }
          }
        }
      }
    },
    "/v3/cft/configuration/{businessId}/partners/{id}" : {
      "delete" : {
        "operationId" : "deletePartner",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The Transfer CFT business id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "The partner Id to delete.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Partner has been successfully deleted.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          },
          "202" : {
            "description" : "Partner has been marked for deletion, and will be removed from Transfer CFT on the next configuration deployment."
          },
          "400" : {
            "description" : "An invalid parameter has been supplied."
          },
          "403" : {
            "description" : "The user does not have enough rights to delete a partner."
          },
          "404" : {
            "description" : "Transfer CFT or partner not found."
          },
          "410" : {
            "description" : "Partner is already marked for deletion."
          },
          "412" : {
            "description" : "Partner is managed by flows, and cannot be removed."
          }
        },
        "summary" : "Deletes a partner",
        "description" : "\n <p>\n  The partner will be removed from the Transfer CFT once the configuration is deployed.\n </p>\n <b>Since:</b>FM v2.0.202107\n <br/>\n Access enforcement always performed ( resource is <b>Product_Configuration</b>, action is <b>Modify</b> ) or\n ( component is <b>TransferCFTPlugin</b>, resource is <b>CONFIGURATION:PARTNER</b>, action is <b>Delete</b> )",
        "tags" : [ "cft" ]
      },
      "get" : {
        "operationId" : "getPartner",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The Transfer CFT business id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "The partner Id to retrieve.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "deployed",
          "in" : "query",
          "description" : "Whether to retrieve a deployed partner on Transfer CFT or a saved one on Flow Manager side. (default : false)",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The partner has been retrieved.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          },
          "400" : {
            "description" : "An invalid parameter has been supplied."
          },
          "403" : {
            "description" : "The user does not have enough rights to retrieve a partner."
          },
          "404" : {
            "description" : "Transfer CFT or partner not found."
          },
          "410" : {
            "description" : "Partner is marked for deletion."
          }
        },
        "summary" : "Retrieves a partner by id.",
        "description" : "\n\n <p>\n Retrieves a single partner by id for a given Transfer CFT.\n </p>\n <b>Since:</b>FM v2.0.202107\n <br/>\n Access enforcement always performed ( resource is <b>Product_Configuration</b>, action is <b>Modify</b> ) or\n ( component is <b>TransferCFTPlugin</b>, resource is <b>CONFIGURATION:PARTNER</b>, action is <b>View</b> )",
        "tags" : [ "cft" ]
      },
      "put" : {
        "operationId" : "updatePartner",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The Transfer CFT business id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "The partner Id to update.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The partner has been updated.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          },
          "400" : {
            "description" : "An invalid parameter has been supplied."
          },
          "403" : {
            "description" : "The user does not have enough rights to update a partner."
          },
          "404" : {
            "description" : "Transfer CFT or partner not found."
          },
          "412" : {
            "description" : "Partner is managed by flows, and cannot be updated."
          }
        },
        "summary" : "Updates a partner.",
        "description" : "\n <p>\n Updates a single partner in Transfer CFT.\n </p>\n <b>Since:</b>FM v2.0.202107\n <br/>\n Access enforcement always performed ( resource is <b>Product_Configuration</b>, action is <b>Modify</b> ) or\n ( component is <b>TransferCFTPlugin</b>, resource is <b>CONFIGURATION:PARTNER</b>, action is <b>Modify</b> )",
        "tags" : [ "cft" ],
        "requestBody" : {
          "description" : "The partner to update",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RCftPartnerData"
              }
            }
          }
        }
      }
    },
    "/v3/cft/configuration/{businessId}/receiveProfiles" : {
      "get" : {
        "operationId" : "getReceiveProfiles",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The Transfer CFT business id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "status",
          "in" : "query",
          "description" : "The status of the receiveProfiles to retrieve. Available values: saved, deployed, deleted. By default, all receiveProfiles are retrieved",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "query",
          "description" : "The receiveProfile Id to retrieve.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The list of receiveProfiles has been retrieved.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RCftReceiveProfileDataList"
                }
              }
            }
          },
          "400" : {
            "description" : "An invalid parameter has been supplied."
          },
          "403" : {
            "description" : "The user does not have enough rights to retrieve the list of receiveProfiles."
          },
          "404" : {
            "description" : "Transfer CFT not found."
          }
        },
        "summary" : "Retrieve a list of ReceiveProfiles.",
        "description" : "\n\n <p>\n Retrieve a list of ReceiveProfiles\n </p>\n <b>Since:</b>FM v2.0.202107\n <br/>\n Access enforcement always performed ( resource is <b>Product_Configuration</b>, action is <b>View</b> ) or\n ( component is <b>TransferCFTPlugin</b>, resource is <b>CONFIGURATION:RECEIVEPROFILE</b>, action is <b>View</b>)",
        "tags" : [ "cft" ]
      },
      "post" : {
        "operationId" : "createReceiveProfile",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The Transfer CFT business id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "The receiveProfile has been created.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RCftReceiveProfileData"
                }
              }
            }
          },
          "400" : {
            "description" : "An invalid parameter has been supplied."
          },
          "403" : {
            "description" : "The user does not have enough rights to create a receiveProfile."
          },
          "404" : {
            "description" : "Transfer CFT not found."
          },
          "409" : {
            "description" : "A receiveProfile with the same id already exists."
          }
        },
        "summary" : "Creates a new Transfer CFT receiveProfile.",
        "description" : "\n\n <p>\n Creates a new receiveProfile on Transfer CFT.\n </p>\n <b>Since:</b>FM v2.0.202107\n <br/>\n Access enforcement always performed ( resource is <b>Product_Configuration</b>, action is <b>Modify</b> ) or\n ( component is <b>TransferCFTPlugin</b>, resource is <b>CONFIGURATION:RECEIVEPROFILE</b>, action is <b>Create</b>)",
        "tags" : [ "cft" ],
        "requestBody" : {
          "description" : "ReceiveProfile object parameters",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RCftReceiveProfileData"
              }
            }
          }
        }
      }
    },
    "/v3/cft/configuration/{businessId}/receiveProfiles/{id}" : {
      "delete" : {
        "operationId" : "deleteReceiveProfile",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The Transfer CFT business id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "The receiveProfile Id to delete.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "ReceiveProfile has been successfully deleted.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          },
          "202" : {
            "description" : "ReceiveProfile has been marked for deletion, and will be removed from Transfer CFT on the next configuration deployment."
          },
          "400" : {
            "description" : "An invalid parameter has been supplied."
          },
          "403" : {
            "description" : "The user does not have enough rights to delete a receiveProfile."
          },
          "404" : {
            "description" : "Transfer CFT or receiveProfile not found."
          },
          "410" : {
            "description" : "ReceiveProfile is already marked for deletion."
          },
          "412" : {
            "description" : "ReceiveProfile is managed by flows, and cannot be removed."
          }
        },
        "summary" : "Deletes an receiveProfile.",
        "description" : "\n\n <p>\n The receiveProfile will be removed from the Transfer CFT once the configuration is deployed.\n </p>\n <b>Since:</b>FM v2.0.202107\n <br/>\n Access enforcement always performed ( resource is <b>Product_Configuration</b>, action is <b>Modify</b> ) or\n ( component is <b>TransferCFTPlugin</b>, resource is <b>CONFIGURATION:RECEIVEPROFILE</b>, action is <b>Delete</b>)",
        "tags" : [ "cft" ]
      },
      "get" : {
        "operationId" : "getReceiveProfile",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The Transfer CFT business id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "The receiveProfile Id to retrieve.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "deployed",
          "in" : "query",
          "description" : "Whether to retrieve a deployed receiveProfile on Transfer CFT or a saved one on Flow Manager side. (default : false)",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The receiveProfile has been retrieved.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RCftReceiveProfileData"
                }
              }
            }
          },
          "400" : {
            "description" : "An invalid parameter has been supplied."
          },
          "403" : {
            "description" : "The user does not have enough rights to retrieve a receiveProfile."
          },
          "404" : {
            "description" : "Transfer CFT or receiveProfile not found."
          },
          "410" : {
            "description" : "ReceiveProfile is marked for deletion."
          }
        },
        "summary" : "Retrieves a receiveProfile by id.",
        "description" : "\n\n <p>\n Retrieves a single receiveProfile by id for a given Transfer CFT.\n </p>\n <b>Since:</b>FM v2.0.202107\n <br/>\n Access enforcement always performed ( resource is <b>Product_Configuration</b>, action is <b>View</b> ) or\n ( component is <b>TransferCFTPlugin</b>, resource is <b>CONFIGURATION:RECEIVEPROFILE</b>, action is <b>View</b>)",
        "tags" : [ "cft" ]
      },
      "put" : {
        "operationId" : "updateReceiveProfile",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The Transfer CFT business id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "The receiveProfile Id to update.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The receiveProfile has been updated.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RCftReceiveProfileData"
                }
              }
            }
          },
          "400" : {
            "description" : "An invalid parameter has been supplied."
          },
          "403" : {
            "description" : "The user does not have enough rights to update a receiveProfile."
          },
          "404" : {
            "description" : "Transfer CFT or receiveProfile not found."
          },
          "410" : {
            "description" : "ReceiveProfile is marked for deletion, and cannot be updated."
          },
          "412" : {
            "description" : "ReceiveProfile is managed by flows, and cannot be updated."
          }
        },
        "summary" : "Updates a receiveProfile.",
        "description" : "\n <p>\n Updates a single receiveProfile in Transfer CFT.\n </p>\n <b>Since:</b>FM v2.0.202107\n <br/>\n Access enforcement always performed ( resource is <b>Product_Configuration</b>, action is <b>Modify</b> ) or\n ( component is <b>TransferCFTPlugin</b>, resource is <b>CONFIGURATION:RECEIVEPROFILE</b>, action is <b>Modify</b>)",
        "tags" : [ "cft" ],
        "requestBody" : {
          "description" : "The receiveProfile to update",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RCftReceiveProfileData"
              }
            }
          }
        }
      }
    },
    "/v3/cft/configuration/{businessId}/sendProfiles/explicit" : {
      "get" : {
        "operationId" : "getExplicitSendProfiles",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The Transfer CFT business id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "status",
          "in" : "query",
          "description" : "The status of the explicitSendProfiles to retrieve. Available values: saved, deployed, deleted. By default, all explicitSendProfiles are retrieved",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "query",
          "description" : "The explicitSendProfile Id to retrieve.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The list of explicitSendProfiles has been retrieved.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RCftExplicitSendProfileDataList"
                }
              }
            }
          },
          "400" : {
            "description" : "An invalid parameter has been supplied."
          },
          "403" : {
            "description" : "The user does not have enough rights to retrieve the list of explicitSendProfiles."
          },
          "404" : {
            "description" : "Transfer CFT not found."
          }
        },
        "summary" : "Retrieves the list of ExplicitSendProfiles.",
        "description" : "\n\n <p>\n Retrieves the list of ExplicitSendProfile.\n </p>\n <b>Since:</b>FM v2.0.202107\n <br/>\n Access enforcement always performed ( resource is <b>Product_Configuration</b>, action is <b>View</b> ) or\n ( component is <b>TransferCFTPlugin</b>, resource is <b>CONFIGURATION:EXPLICITSENDPROFILE</b>, action is <b>View</b>)",
        "tags" : [ "cft" ]
      },
      "post" : {
        "operationId" : "createExplicitSendProfile",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The Transfer CFT business id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "The explicitSendProfile has been created.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RCftExplicitSendProfileData"
                }
              }
            }
          },
          "400" : {
            "description" : "An invalid parameter has been supplied."
          },
          "403" : {
            "description" : "The user does not have enough rights to create an explicitSendProfile."
          },
          "404" : {
            "description" : "Transfer CFT not found."
          },
          "409" : {
            "description" : "An explicitSendProfile with the same id already exists."
          }
        },
        "summary" : "Creates a new Transfer CFT explicitSendProfile.",
        "description" : "\n\n <p>\n Creates a new explicitSendProfile on Transfer CFT.\n </p>\n <b>Since:</b>FM v2.0.202107\n <br/>\n Access enforcement always performed ( resource is <b>Product_Configuration</b>, action is <b>Modify</b> ) or\n ( component is <b>TransferCFTPlugin</b>, resource is <b>CONFIGURATION:EXPLICITSENDPROFILE</b>, action is <b>Create</b>)",
        "tags" : [ "cft" ],
        "requestBody" : {
          "description" : "explicitSendProfile object parameters",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RCftExplicitSendProfileData"
              }
            }
          }
        }
      }
    },
    "/v3/cft/configuration/{businessId}/sendProfiles/explicit/{id}" : {
      "delete" : {
        "operationId" : "deleteExplicitSendProfile",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The Transfer CFT business id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "The explicitSendProfile Id to delete.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "ExplicitSendProfile has been successfully deleted.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          },
          "202" : {
            "description" : "ExplicitSendProfile has been marked for deletion, and will be removed from Transfer CFT on the next configuration deployment."
          },
          "400" : {
            "description" : "An invalid parameter has been supplied."
          },
          "403" : {
            "description" : "The user does not have enough rights to delete an explicitSendProfile."
          },
          "404" : {
            "description" : "Transfer CFT or explicitSendProfile not found."
          },
          "410" : {
            "description" : "ExplicitSendProfile is already marked for deletion."
          },
          "412" : {
            "description" : "ExplicitSendProfile is managed by flows, and cannot be removed."
          }
        },
        "summary" : "Deletes an explicitSendProfile.",
        "description" : "\n\n <p>\n The explicitSendProfile will be removed from the Transfer CFT once the configuration is deployed.\n </p>\n <b>Since:</b>FM v2.0.202107\n <br/>\n Access enforcement always performed ( resource is <b>Product_Configuration</b>, action is <b>Modify</b> ) or\n ( component is <b>TransferCFTPlugin</b>, resource is <b>CONFIGURATION:EXPLICITSENDPROFILE</b>, action is <b>Delete</b>)",
        "tags" : [ "cft" ]
      },
      "get" : {
        "operationId" : "getExplicitSendProfile",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The Transfer CFT business id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "The explicitSendProfile Id to retrieve.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "deployed",
          "in" : "query",
          "description" : "Whether to retrieve a deployed explicitSendProfile on Transfer CFT or a saved one on Flow Manager side. (default : false)",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The explicitSendProfile has been retrieved.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RCftExplicitSendProfileData"
                }
              }
            }
          },
          "400" : {
            "description" : "An invalid parameter has been supplied."
          },
          "403" : {
            "description" : "The user does not have enough rights to retrieve an explicitSendProfile."
          },
          "404" : {
            "description" : "Transfer CFT or explicitSendProfile not found."
          },
          "410" : {
            "description" : "ExplicitSendProfile is marked for deletion."
          }
        },
        "summary" : "Retrieves an explicitSendProfile by id.",
        "description" : "\n\n <p>\n Retrieves a single explicitSendProfile by id for a given Transfer CFT.\n </p>\n <b>Since:</b>FM v2.0.202107\n <br/>\n Access enforcement always performed ( resource is <b>Product_Configuration</b>, action is <b>View</b> ) or\n ( component is <b>TransferCFTPlugin</b>, resource is <b>CONFIGURATION:EXPLICITSENDPROFILE</b>, action is <b>View</b>)",
        "tags" : [ "cft" ]
      },
      "put" : {
        "operationId" : "updateExplicitSendProfile",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The Transfer CFT business id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "The explicitSendProfile Id to update.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The explicitSendProfile has been updated.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RCftExplicitSendProfileData"
                }
              }
            }
          },
          "400" : {
            "description" : "An invalid parameter has been supplied."
          },
          "403" : {
            "description" : "The user does not have enough rights to update an explicitSendProfile."
          },
          "404" : {
            "description" : "Transfer CFT or explicitSendProfile not found."
          },
          "410" : {
            "description" : "ExplicitSendProfile is marked for deletion, and cannot be updated."
          },
          "412" : {
            "description" : "ExplicitSendProfile is managed by flows, and cannot be updated."
          }
        },
        "summary" : "Updates an explicitSendProfile.",
        "description" : "\n <p>\n Updates a single explicitSendProfile in Transfer CFT.\n </p>\n <b>Since:</b>FM v2.0.202107\n <br/>\n Access enforcement always performed ( resource is <b>Product_Configuration</b>, action is <b>Modify</b> ) or\n ( component is <b>TransferCFTPlugin</b>, resource is <b>CONFIGURATION:EXPLICITSENDPROFILE</b>, action is <b>Modify</b>)",
        "tags" : [ "cft" ],
        "requestBody" : {
          "description" : "The explicitSendProfile to update",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RCftExplicitSendProfileData"
              }
            }
          }
        }
      }
    },
    "/v3/cft/configuration/{businessId}/sendProfiles/implicit" : {
      "get" : {
        "operationId" : "getImplicitSendProfiles",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The Transfer CFT business id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "status",
          "in" : "query",
          "description" : "The status of the implicitSendProfiles to retrieve. Available values: saved, deployed, deleted. By default, all implicitSendProfiles are retrieved",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "query",
          "description" : "The implicitSendProfile Id to retrieve.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The list of implicitSendProfiles has been retrieved.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RCftImplicitSendProfileDataList"
                }
              }
            }
          },
          "400" : {
            "description" : "An invalid parameter has been supplied."
          },
          "403" : {
            "description" : "The user does not have enough rights to retrieve the list of implicitSendProfiles."
          },
          "404" : {
            "description" : "Transfer CFT not found."
          }
        },
        "summary" : "Retrieves the list of ImplicitSendProfiles.",
        "description" : "\n\n <p>\n Retrieves the list of ImplicitSendProfile.\n </p>\n <b>Since:</b>FM v2.0.202107\n <br/>\n Access enforcement always performed ( resource is <b>Product_Configuration</b>, action is <b>View</b> ) or\n ( component is <b>TransferCFTPlugin</b>, resource is <b>CONFIGURATION:IMPLICITSENDPROFILE</b>, action is <b>View</b>)",
        "tags" : [ "cft" ]
      },
      "post" : {
        "operationId" : "createImplicitSendProfile",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The Transfer CFT business id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "The implicitSendProfile has been created.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RCftImplicitSendProfileData"
                }
              }
            }
          },
          "400" : {
            "description" : "An invalid parameter has been supplied."
          },
          "403" : {
            "description" : "The user does not have enough rights to create an implicitSendProfile."
          },
          "404" : {
            "description" : "Transfer CFT not found."
          },
          "409" : {
            "description" : "An implicitSendProfile with the same id already exists."
          }
        },
        "summary" : "Creates a new Transfer CFT implicitSendProfile.",
        "description" : "\n\n <p>\n Creates a new implicitSendProfile on Transfer CFT.\n </p>\n <b>Since:</b>FM v2.0.202107\n <br/>\n Access enforcement always performed ( resource is <b>Product_Configuration</b>, action is <b>Modify</b> ) or\n ( component is <b>TransferCFTPlugin</b>, resource is <b>CONFIGURATION:IMPLICITSENDPROFILE</b>, action is <b>Create</b>)",
        "tags" : [ "cft" ],
        "requestBody" : {
          "description" : "implicitSendProfile object parameters",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RCftImplicitSendProfileData"
              }
            }
          }
        }
      }
    },
    "/v3/cft/configuration/{businessId}/sendProfiles/implicit/{id}" : {
      "delete" : {
        "operationId" : "deleteImplicitSendProfile",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The Transfer CFT business id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "The implicitSendProfile Id to delete.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "ImplicitSendProfile has been successfully deleted.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Response"
                }
              }
            }
          },
          "202" : {
            "description" : "ImplicitSendProfile has been marked for deletion, and will be removed from Transfer CFT on the next configuration deployment."
          },
          "400" : {
            "description" : "An invalid parameter has been supplied."
          },
          "403" : {
            "description" : "The user does not have enough rights to delete an implicitSendProfile."
          },
          "404" : {
            "description" : "Transfer CFT or implicitSendProfile not found."
          },
          "410" : {
            "description" : "ImplicitSendProfile is already marked for deletion."
          },
          "412" : {
            "description" : "ImplicitSendProfile is managed by flows, and cannot be removed."
          }
        },
        "summary" : "Delete an implicitSendProfile.",
        "description" : "\n\n <p>\n The implicitSendProfile will be removed from the Transfer CFT once the configuration is deployed.\n </p>\n <b>Since:</b>FM v2.0.202107\n <br/>\n Access enforcement always performed ( resource is <b>Product_Configuration</b>, action is <b>Modify</b> ) or\n ( component is <b>TransferCFTPlugin</b>, resource is <b>CONFIGURATION:IMPLICITSENDPROFILE</b>, action is <b>Delete</b>)",
        "tags" : [ "cft" ]
      },
      "get" : {
        "operationId" : "getImplicitSendProfile",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The Transfer CFT business id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "The implicitSendProfile Id to retrieve.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "deployed",
          "in" : "query",
          "description" : "Whether to retrieve a deployed implicitSendProfile on Transfer CFT or a saved one on Flow Manager side. (default : false)",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The implicitSendProfile has been retrieved.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RCftImplicitSendProfileData"
                }
              }
            }
          },
          "400" : {
            "description" : "An invalid parameter has been supplied."
          },
          "403" : {
            "description" : "The user does not have enough rights to retrieve an implicitSendProfile."
          },
          "404" : {
            "description" : "Transfer CFT or implicitSendProfile not found."
          },
          "410" : {
            "description" : "ImplicitSendProfile is marked for deletion."
          }
        },
        "summary" : "Retrieves an implicitSendProfile by id.",
        "description" : "\n\n <p>\n Retrieves a single  by id for a given Transfer CFT.\n </p>\n <b>Since:</b>FM v2.0.202107\n <br/>\n Access enforcement always performed ( resource is <b>Product_Configuration</b>, action is <b>View</b> ) or\n ( component is <b>TransferCFTPlugin</b>, resource is <b>CONFIGURATION:IMPLICITSENDPROFILE</b>, action is <b>View</b>)",
        "tags" : [ "cft" ]
      },
      "put" : {
        "operationId" : "updateImplicitSendProfile",
        "parameters" : [ {
          "name" : "businessId",
          "in" : "path",
          "description" : "The Transfer CFT business id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "The implicitSendProfile Id to update.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The implicitSendProfile has been updated.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RCftImplicitSendProfileData"
                }
              }
            }
          },
          "400" : {
            "description" : "An invalid parameter has been supplied."
          },
          "403" : {
            "description" : "The user does not have enough rights to update an implicitSendProfile."
          },
          "404" : {
            "description" : "Transfer CFT or implicitSendProfile not found."
          },
          "410" : {
            "description" : "ImplicitSendProfile is marked for deletion, and cannot be updated."
          },
          "412" : {
            "description" : "ImplicitSendProfile is managed by flows, and cannot be updated."
          }
        },
        "summary" : "Updates an implicitSendProfile.",
        "description" : "\n <p>\n Updates a single implicitSendProfile in Transfer CFT.\n </p>\n <b>Since:</b>FM v2.0.202107\n <br/>\n Access enforcement always performed ( resource is <b>Product_Configuration</b>, action is <b>Modify</b> ) or\n ( component is <b>TransferCFTPlugin</b>, resource is <b>CONFIGURATION:IMPLICITSENDPROFILE</b>, action is <b>Modify</b>)",
        "tags" : [ "cft" ],
        "requestBody" : {
          "description" : "The implicitSendProfile to update",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RCftImplicitSendProfileData"
              }
            }
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "ApplicationGroupMetadata" : {
        "type" : "object",
        "properties" : {
          "applications" : {
            "type" : "string"
          },
          "createdTimestamp" : {
            "type" : "integer",
            "format" : "int64"
          },
          "createdUserId" : {
            "type" : "string"
          },
          "href" : {
            "type" : "string"
          },
          "modifiedTimestamp" : {
            "type" : "integer",
            "format" : "int64"
          },
          "modifiedUserId" : {
            "type" : "string"
          }
        }
      },
      "ApplicationMetadata" : {
        "type" : "object",
        "properties" : {
          "applicationgroups" : {
            "type" : "string"
          },
          "createdTimestamp" : {
            "type" : "integer",
            "format" : "int64"
          },
          "createdUserId" : {
            "type" : "string"
          },
          "href" : {
            "type" : "string"
          },
          "modifiedTimestamp" : {
            "type" : "integer",
            "format" : "int64"
          },
          "modifiedUserId" : {
            "type" : "string"
          },
          "products" : {
            "type" : "string"
          }
        }
      },
      "ComProfileMetadata" : {
        "type" : "object",
        "properties" : {
          "businessId" : {
            "type" : "string"
          },
          "createdTimestamp" : {
            "type" : "integer",
            "format" : "int64"
          },
          "createdUserId" : {
            "type" : "string"
          },
          "href" : {
            "type" : "string"
          },
          "modifiedTimestamp" : {
            "type" : "integer",
            "format" : "int64"
          },
          "modifiedUserId" : {
            "type" : "string"
          },
          "parent" : {
            "type" : "string"
          }
        }
      },
      "CommunicableMetadata" : {
        "type" : "object",
        "properties" : {
          "communicationprofiles" : {
            "type" : "string"
          },
          "createdTimestamp" : {
            "type" : "integer",
            "format" : "int64"
          },
          "createdUserId" : {
            "type" : "string"
          },
          "href" : {
            "type" : "string"
          },
          "modifiedTimestamp" : {
            "type" : "integer",
            "format" : "int64"
          },
          "modifiedUserId" : {
            "type" : "string"
          }
        }
      },
      "CommunicableType" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "string"
          },
          "label" : {
            "type" : "string"
          }
        }
      },
      "EndpointMetadata" : {
        "type" : "object",
        "properties" : {
          "createdTimestamp" : {
            "type" : "integer",
            "format" : "int64"
          },
          "createdUserId" : {
            "type" : "string"
          },
          "flow" : {
            "type" : "string"
          },
          "href" : {
            "type" : "string"
          },
          "modifiedTimestamp" : {
            "type" : "integer",
            "format" : "int64"
          },
          "modifiedUserId" : {
            "type" : "string"
          }
        }
      },
      "FlowTemplateMetadata" : {
        "type" : "object",
        "properties" : {
          "catalogItem" : {
            "type" : "string"
          },
          "createdTimestamp" : {
            "type" : "integer",
            "format" : "int64"
          },
          "createdUserId" : {
            "type" : "string"
          },
          "href" : {
            "type" : "string"
          },
          "modifiedTimestamp" : {
            "type" : "integer",
            "format" : "int64"
          },
          "modifiedUserId" : {
            "type" : "string"
          }
        }
      },
      "Map" : {
        "type" : "object"
      },
      "Metadata" : {
        "type" : "object",
        "properties" : {
          "createdTimestamp" : {
            "type" : "integer",
            "format" : "int64"
          },
          "createdUserId" : {
            "type" : "string"
          },
          "href" : {
            "type" : "string"
          },
          "modifiedTimestamp" : {
            "type" : "integer",
            "format" : "int64"
          },
          "modifiedUserId" : {
            "type" : "string"
          }
        }
      },
      "MultivaluedMap" : {
        "type" : "object",
        "properties" : {
          "first" : {
            "$ref" : "#/components/schemas/V"
          }
        }
      },
      "RAdvancedSshSettings" : {
        "type" : "object",
        "properties" : {
          "allowedMacs" : {
            "type" : "string",
            "description" : "The allowed macs list of the {@link RAdvancedSshSettings}."
          },
          "cipherSuites" : {
            "type" : "string",
            "description" : "The cipher suites list of the {@link RAdvancedSshSettings}."
          },
          "keyExchangeAlgorithms" : {
            "type" : "string",
            "description" : "The key exchange algorithms list of the {@link RAdvancedSshSettings}."
          },
          "publicKeys" : {
            "type" : "string",
            "description" : "The public keys list of the {@link RAdvancedSshSettings}."
          }
        }
      },
      "RAdvancedSslSettings" : {
        "type" : "object",
        "properties" : {
          "cipherSuites" : {
            "type" : "string",
            "description" : "The cipher suites list of the {@link RAdvancedSslSettings}."
          },
          "protocols" : {
            "type" : "string",
            "description" : "The protocols list of the {@link RAdvancedSslSettings}."
          }
        }
      },
      "RApplication" : {
        "type" : "object",
        "required" : [ "name", "host" ],
        "properties" : {
          "businessId" : {
            "type" : "string"
          },
          "contact" : {
            "$ref" : "#/components/schemas/RContactProfile"
          },
          "customAttributes" : {
            "$ref" : "#/components/schemas/Map"
          },
          "description" : {
            "type" : "string"
          },
          "groups" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/RReference"
            }
          },
          "host" : {
            "type" : "string"
          },
          "meta" : {
            "$ref" : "#/components/schemas/Metadata"
          },
          "name" : {
            "type" : "string"
          },
          "productTypes" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "products" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/RReferenceProduct"
            }
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "RApplicationGroup" : {
        "type" : "object",
        "required" : [ "name" ],
        "properties" : {
          "businessId" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "members" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/RReference"
            }
          },
          "membersCount" : {
            "type" : "integer",
            "format" : "int32"
          },
          "membersLabel" : {
            "type" : "string"
          },
          "meta" : {
            "$ref" : "#/components/schemas/Metadata"
          },
          "name" : {
            "type" : "string"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "RAuthorizationReport" : {
        "type" : "object",
        "properties" : {
          "authorizedIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "unauthorizedIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "RBackupProduct" : {
        "type" : "object",
        "properties" : {
          "businessId" : {
            "type" : "string"
          },
          "meta" : {
            "$ref" : "#/components/schemas/Metadata"
          },
          "name" : {
            "type" : "string",
            "description" : "The name of {@link RBackupProduct}"
          }
        }
      },
      "RBulkActionResult" : {
        "type" : "object",
        "properties" : {
          "errors" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/RObjectError"
            }
          },
          "message" : {
            "type" : "string"
          },
          "objectType" : {
            "type" : "string"
          },
          "operation" : {
            "type" : "string"
          },
          "success" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "RCertificateCredential" : {
        "type" : "object",
        "required" : [ "name" ],
        "properties" : {
          "businessId" : {
            "type" : "string",
            "description" : "The businessId is a UUID of the form xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx (8-4-4-4-12)\n It can be set only when the credential is created and will be used if it is unique\n in the participant owning the credential.\n If no businessId is given at creation time, a random UUID will be generated."
          },
          "certificateContent" : {
            "type" : "string"
          },
          "certificateFileName" : {
            "type" : "string"
          },
          "certificatePassword" : {
            "type" : "string"
          },
          "isPrivateCertificate" : {
            "type" : "boolean"
          },
          "name" : {
            "type" : "string"
          },
          "state" : {
            "type" : "string"
          },
          "type" : {
            "type" : "string"
          }
        }
      },
      "RCertificateData" : {
        "type" : "object",
        "properties" : {
          "isCA" : {
            "type" : "boolean"
          },
          "issuer" : {
            "type" : "string"
          },
          "notAfter" : {
            "type" : "string"
          },
          "notBefore" : {
            "type" : "string"
          },
          "serialNumber" : {
            "type" : "string"
          },
          "subject" : {
            "type" : "string"
          }
        }
      },
      "RComProfile" : {
        "oneOf" : [ {
          "$ref" : "#/components/schemas/RCustomComProfile"
        }, {
          "$ref" : "#/components/schemas/RSftpComProfile"
        }, {
          "$ref" : "#/components/schemas/RSslComProfile"
        } ]
      },
      "RComProfilePair" : {
        "type" : "object",
        "properties" : {
          "ackEnabled" : {
            "type" : "boolean"
          },
          "ackProfile" : {
            "$ref" : "#/components/schemas/RComProfile"
          },
          "mdn" : {
            "type" : "string"
          },
          "properties" : {
            "$ref" : "#/components/schemas/Map"
          },
          "protocol" : {
            "type" : "string"
          },
          "receiverId" : {
            "type" : "string"
          },
          "receiverName" : {
            "type" : "string"
          },
          "receiverProfile" : {
            "$ref" : "#/components/schemas/RComProfile"
          },
          "senderId" : {
            "type" : "string"
          },
          "senderName" : {
            "type" : "string"
          },
          "senderProfile" : {
            "$ref" : "#/components/schemas/RComProfile"
          }
        }
      },
      "RConfiguration" : {
        "type" : "object",
        "properties" : {
          "default" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "enum" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "name" : {
            "type" : "string"
          },
          "readOnly" : {
            "type" : "boolean"
          },
          "requires" : {
            "type" : "string"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "value" : {
            "type" : "string"
          },
          "writeOnly" : {
            "type" : "boolean"
          }
        }
      },
      "RContact" : {
        "type" : "object",
        "properties" : {
          "address1" : {
            "type" : "string"
          },
          "address2" : {
            "type" : "string"
          },
          "businessId" : {
            "type" : "string"
          },
          "city" : {
            "type" : "string"
          },
          "country" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          },
          "phone" : {
            "type" : "string"
          },
          "postalCode" : {
            "type" : "string"
          },
          "stateRegion" : {
            "type" : "string"
          }
        }
      },
      "RContactProfile" : {
        "type" : "object",
        "properties" : {
          "email" : {
            "type" : "string"
          },
          "firstName" : {
            "type" : "string"
          },
          "jobTitle" : {
            "type" : "string"
          },
          "lastName" : {
            "type" : "string"
          },
          "phone" : {
            "type" : "string"
          }
        }
      },
      "RCustomAttributeDef" : {
        "type" : "object",
        "required" : [ "attributeType", "name", "label" ],
        "properties" : {
          "attributeType" : {
            "type" : "string"
          },
          "businessId" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "label" : {
            "type" : "string"
          },
          "maxLength" : {
            "type" : "integer",
            "format" : "int32"
          },
          "meta" : {
            "$ref" : "#/components/schemas/Metadata"
          },
          "name" : {
            "type" : "string"
          },
          "scope" : {
            "type" : "string"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "RCustomClientComProfile" : {
        "type" : "object",
        "properties" : {
          "businessId" : {
            "type" : "string"
          },
          "customAttributes" : {
            "$ref" : "#/components/schemas/Map"
          },
          "customProperties" : {
            "$ref" : "#/components/schemas/Map"
          },
          "description" : {
            "type" : "string"
          },
          "enabled" : {
            "type" : "boolean"
          },
          "meta" : {
            "$ref" : "#/components/schemas/Metadata"
          },
          "name" : {
            "type" : "string"
          },
          "networkZone" : {
            "type" : "string"
          },
          "properties" : {
            "$ref" : "#/components/schemas/Map"
          },
          "protocol" : {
            "type" : "string"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "type" : {
            "type" : "string"
          }
        }
      },
      "RCustomComProfile" : {
        "type" : "object",
        "properties" : {
          "businessId" : {
            "type" : "string"
          },
          "customAttributes" : {
            "$ref" : "#/components/schemas/Map"
          },
          "customProperties" : {
            "$ref" : "#/components/schemas/Map"
          },
          "description" : {
            "type" : "string"
          },
          "enabled" : {
            "type" : "boolean"
          },
          "meta" : {
            "$ref" : "#/components/schemas/Metadata"
          },
          "name" : {
            "type" : "string"
          },
          "networkZone" : {
            "type" : "string"
          },
          "properties" : {
            "$ref" : "#/components/schemas/Map"
          },
          "protocol" : {
            "type" : "string"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "type" : {
            "type" : "string"
          }
        }
      },
      "RCustomServerComProfile" : {
        "type" : "object",
        "properties" : {
          "businessId" : {
            "type" : "string"
          },
          "customAttributes" : {
            "$ref" : "#/components/schemas/Map"
          },
          "customProperties" : {
            "$ref" : "#/components/schemas/Map"
          },
          "description" : {
            "type" : "string"
          },
          "enabled" : {
            "type" : "boolean"
          },
          "meta" : {
            "$ref" : "#/components/schemas/Metadata"
          },
          "name" : {
            "type" : "string"
          },
          "networkZone" : {
            "type" : "string"
          },
          "properties" : {
            "$ref" : "#/components/schemas/Map"
          },
          "protocol" : {
            "type" : "string"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "type" : {
            "type" : "string"
          }
        }
      },
      "RDeployment" : {
        "type" : "object",
        "properties" : {
          "businessId" : {
            "type" : "string"
          },
          "deployedObject" : {
            "$ref" : "#/components/schemas/RDeploymentEndpoint"
          },
          "message" : {
            "type" : "string"
          },
          "meta" : {
            "$ref" : "#/components/schemas/Metadata"
          },
          "statusCode" : {
            "type" : "string"
          },
          "targetProduct" : {
            "$ref" : "#/components/schemas/RDeploymentEndpoint"
          },
          "timestamp" : {
            "type" : "integer",
            "format" : "int64"
          }
        }
      },
      "RDeploymentEndpoint" : {
        "type" : "object",
        "properties" : {
          "businessId" : {
            "type" : "string"
          },
          "meta" : {
            "$ref" : "#/components/schemas/Metadata"
          },
          "name" : {
            "type" : "string"
          },
          "productId" : {
            "type" : "string"
          },
          "productType" : {
            "type" : "string"
          },
          "subscription" : {
            "$ref" : "#/components/schemas/RDeploymentEndpoint"
          },
          "subscriptions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/RDeploymentEndpoint"
            }
          },
          "type" : {
            "type" : "string"
          }
        }
      },
      "RDeploymentsPendingMetadata" : {
        "type" : "object",
        "properties" : {
          "deployments" : {
            "type" : "string"
          },
          "message" : {
            "type" : "string"
          },
          "notDeployableReasons" : {
            "$ref" : "#/components/schemas/Map"
          },
          "redeployException" : {
            "$ref" : "#/components/schemas/Map"
          }
        }
      },
      "REndpoint" : {
        "type" : "object",
        "properties" : {
          "allLinks" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/RReference"
            }
          },
          "allSelectedLinks" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/RReference"
            }
          },
          "businessId" : {
            "type" : "string"
          },
          "communicableTypeFromEndpointType" : {
            "type" : "string",
            "enum" : [ "ORGANIZATION", "APPLICATION", "GROUP", "MANAGED_MIDDLEWARE", "UNMANAGED_MIDDLEWARE" ]
          },
          "meta" : {
            "$ref" : "#/components/schemas/Metadata"
          },
          "parts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/RPart"
            }
          },
          "properties" : {
            "$ref" : "#/components/schemas/Map"
          },
          "selectedLinksType" : {
            "type" : "string"
          },
          "step" : {
            "$ref" : "#/components/schemas/RStep"
          },
          "type" : {
            "type" : "string"
          }
        }
      },
      "RFLowPatternContext" : {
        "type" : "object",
        "properties" : {
          "direction" : {
            "type" : "string"
          },
          "linkedProductId" : {
            "type" : "string"
          },
          "participantId" : {
            "type" : "string"
          },
          "participantProfileAckEnabled" : {
            "type" : "string"
          },
          "participantProfileAckId" : {
            "type" : "string"
          },
          "participantProfileId" : {
            "type" : "string"
          },
          "participantType" : {
            "type" : "string"
          },
          "productId" : {
            "type" : "string"
          },
          "productProfileAckEnabled" : {
            "type" : "string"
          },
          "productProfileAckId" : {
            "type" : "string"
          },
          "productProfileId" : {
            "type" : "string"
          },
          "protocol" : {
            "type" : "string"
          },
          "protocolIdf" : {
            "type" : "string"
          },
          "protocolIndex" : {
            "type" : "integer",
            "format" : "int32"
          },
          "protocolProperties" : {
            "$ref" : "#/components/schemas/Map"
          },
          "protocolReceiverId" : {
            "type" : "string"
          },
          "protocolReceiverProfileId" : {
            "type" : "string"
          },
          "relaysSize" : {
            "type" : "integer",
            "format" : "int32"
          },
          "subscriptionValues" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "values" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "RFlow" : {
        "type" : "object",
        "properties" : {
          "businessId" : {
            "type" : "string"
          },
          "contact" : {
            "$ref" : "#/components/schemas/RContactProfile"
          },
          "customAttributes" : {
            "$ref" : "#/components/schemas/Map"
          },
          "description" : {
            "type" : "string"
          },
          "link" : {
            "type" : "string"
          },
          "meta" : {
            "$ref" : "#/components/schemas/Metadata"
          },
          "name" : {
            "type" : "string"
          },
          "protocols" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/RProtocol"
            }
          },
          "relays" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/RRelay"
            }
          },
          "sourceCommunicableType" : {
            "type" : "string",
            "enum" : [ "ORGANIZATION", "APPLICATION", "GROUP", "MANAGED_MIDDLEWARE", "UNMANAGED_MIDDLEWARE" ]
          },
          "sourceNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "sources" : {
            "$ref" : "#/components/schemas/REndpoint"
          },
          "status" : {
            "$ref" : "#/components/schemas/RStatus"
          },
          "subscriptionId" : {
            "type" : "string"
          },
          "subscriptionIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "targetCommunicableType" : {
            "type" : "string",
            "enum" : [ "ORGANIZATION", "APPLICATION", "GROUP", "MANAGED_MIDDLEWARE", "UNMANAGED_MIDDLEWARE" ]
          },
          "targetNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "targets" : {
            "$ref" : "#/components/schemas/REndpoint"
          },
          "templateName" : {
            "type" : "string"
          },
          "type" : {
            "type" : "string"
          }
        }
      },
      "RFlowCentral" : {
        "type" : "object",
        "properties" : {
          "participantLocation" : {
            "type" : "array",
            "items" : {
              "description" : "The location where the participant is to be subscribed in a flow template.",
              "enum" : [ "SOURCE", "TARGET" ],
              "type" : "string"
            }
          },
          "patternGenerationVersions" : {
            "$ref" : "#/components/schemas/Map"
          },
          "patternGeneratorVersion" : {
            "type" : "string"
          },
          "pluginVersion" : {
            "type" : "string"
          },
          "productMinVersion" : {
            "type" : "string"
          },
          "stepsConfiguration" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/RFlowCentralStepConfiguration"
            }
          },
          "version" : {
            "type" : "string"
          }
        }
      },
      "RFlowCentralStepConfiguration" : {
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string"
          },
          "id" : {
            "type" : "string"
          },
          "tag" : {
            "type" : "string"
          },
          "title" : {
            "type" : "string"
          }
        }
      },
      "RFlowComProfile" : {
        "type" : "object",
        "properties" : {
          "businessId" : {
            "type" : "string"
          },
          "certificateAlias" : {
            "type" : "string"
          },
          "certificateContent" : {
            "type" : "string"
          },
          "certificatePassword" : {
            "type" : "string"
          },
          "clientAuthentication" : {
            "type" : "string"
          },
          "customAttributes" : {
            "$ref" : "#/components/schemas/Map"
          },
          "description" : {
            "type" : "string"
          },
          "enableSSL" : {
            "type" : "boolean"
          },
          "enabled" : {
            "type" : "boolean"
          },
          "fipsEnabled" : {
            "type" : "boolean"
          },
          "isPrivateCertificate" : {
            "type" : "boolean"
          },
          "meta" : {
            "$ref" : "#/components/schemas/Metadata"
          },
          "name" : {
            "type" : "string"
          },
          "networkZone" : {
            "type" : "string"
          },
          "properties" : {
            "$ref" : "#/components/schemas/Map"
          },
          "protocol" : {
            "type" : "string"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "type" : {
            "type" : "string"
          }
        }
      },
      "RFlowMetadata" : {
        "type" : "object",
        "properties" : {
          "createdTimestamp" : {
            "type" : "integer",
            "format" : "int64"
          },
          "createdUserId" : {
            "type" : "string"
          },
          "href" : {
            "type" : "string"
          },
          "modifiedTimestamp" : {
            "type" : "integer",
            "format" : "int64"
          },
          "modifiedUserId" : {
            "type" : "string"
          },
          "relays" : {
            "type" : "string"
          },
          "sources" : {
            "type" : "string"
          },
          "targets" : {
            "type" : "string"
          }
        }
      },
      "RFlowPattern" : {
        "type" : "object",
        "required" : [ "name" ],
        "properties" : {
          "businessId" : {
            "type" : "string"
          },
          "context" : {
            "$ref" : "#/components/schemas/RFLowPatternContext"
          },
          "contexts" : {
            "$ref" : "#/components/schemas/Map"
          },
          "description" : {
            "type" : "string"
          },
          "flow_central" : {
            "$ref" : "#/components/schemas/RFlowCentral"
          },
          "meta" : {
            "$ref" : "#/components/schemas/Metadata"
          },
          "name" : {
            "type" : "string"
          },
          "schema" : {
            "$ref" : "#/components/schemas/RFlowPatternSchema"
          },
          "stStepsContext" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/RFlowPatternStStepsContext"
            }
          },
          "structure" : {
            "$ref" : "#/components/schemas/RFlowPatternDefinition"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "template" : {
            "$ref" : "#/components/schemas/RFlowPatternTemplate"
          },
          "type" : {
            "type" : "string"
          }
        }
      },
      "RFlowPatternDefinition" : {
        "type" : "object",
        "required" : [ "name" ],
        "properties" : {
          "description" : {
            "type" : "string",
            "description" : "The description"
          },
          "errors" : {
            "type" : "array",
            "description" : "The list of errors",
            "items" : {
              "type" : "string"
            }
          },
          "exchanges" : {
            "type" : "array",
            "description" : "The list of exchanges",
            "items" : {
              "$ref" : "#/components/schemas/RFlowPatternDefinitionExchange"
            }
          },
          "isComplete" : {
            "type" : "boolean",
            "description" : "Flag that indicates if the pattern is complete"
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the flow pattern"
          },
          "options" : {
            "description" : "Options map",
            "allOf" : [ {
              "$ref" : "#/components/schemas/Map"
            } ]
          },
          "relays" : {
            "type" : "array",
            "description" : "The list of relays",
            "items" : {
              "$ref" : "#/components/schemas/RFlowPatternDefinitionRelay"
            }
          },
          "source" : {
            "description" : "The list of sources",
            "allOf" : [ {
              "$ref" : "#/components/schemas/RFlowPatternDefinitionEndPoint"
            } ]
          },
          "sourceLocationEnable" : {
            "type" : "boolean",
            "description" : "Flag for source being subscribable"
          },
          "tags" : {
            "type" : "array",
            "description" : "The list of tags",
            "items" : {
              "type" : "string"
            }
          },
          "target" : {
            "description" : "The list of targets",
            "allOf" : [ {
              "$ref" : "#/components/schemas/RFlowPatternDefinitionEndPoint"
            } ]
          },
          "targetLocationEnable" : {
            "type" : "boolean",
            "description" : "Flag for source being subscribable"
          }
        }
      },
      "RFlowPatternDefinitionEndPoint" : {
        "type" : "object",
        "properties" : {
          "plugin" : {
            "type" : "string"
          },
          "type" : {
            "type" : "string"
          }
        }
      },
      "RFlowPatternDefinitionExchange" : {
        "type" : "object",
        "properties" : {
          "direction" : {
            "type" : "string"
          },
          "protocol" : {
            "type" : "string"
          }
        }
      },
      "RFlowPatternDefinitionRelay" : {
        "type" : "object",
        "properties" : {
          "plugin" : {
            "type" : "string"
          },
          "type" : {
            "type" : "string"
          },
          "useStoreAndForward" : {
            "type" : "boolean"
          }
        }
      },
      "RFlowPatternManifest" : {
        "type" : "object",
        "properties" : {
          "internalName" : {
            "type" : "string"
          },
          "longName" : {
            "type" : "string"
          },
          "shortName" : {
            "type" : "string"
          },
          "usages" : {
            "$ref" : "#/components/schemas/Map"
          }
        }
      },
      "RFlowPatternSchema" : {
        "type" : "object",
        "properties" : {
          "allOf" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Map"
            }
          },
          "pathValue" : {
            "type" : "object"
          },
          "properties" : {
            "$ref" : "#/components/schemas/Map"
          },
          "required" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "type" : {
            "type" : "string"
          },
          "unifiedProperties" : {
            "$ref" : "#/components/schemas/Map"
          }
        }
      },
      "RFlowPatternStStepsContext" : {
        "type" : "object",
        "properties" : {
          "endpointsContext" : {
            "$ref" : "#/components/schemas/Map"
          },
          "fileProcessingSteps" : {
            "type" : "string"
          },
          "receiverId" : {
            "type" : "string"
          },
          "relayIndex" : {
            "type" : "integer",
            "format" : "int32"
          },
          "relaysSize" : {
            "type" : "integer",
            "format" : "int32"
          },
          "routePath" : {
            "type" : "string"
          },
          "senderId" : {
            "type" : "string"
          },
          "sourceEndpointType" : {
            "type" : "string"
          },
          "sourcePartnerIdPath" : {
            "type" : "string"
          },
          "stId" : {
            "type" : "string"
          },
          "stLocation" : {
            "type" : "string"
          },
          "stRoutesArrayPath" : {
            "type" : "string"
          },
          "stepsCollectionForRoutePath" : {
            "type" : "string"
          },
          "targetEndpointType" : {
            "type" : "string"
          },
          "targetPartnerIdPath" : {
            "type" : "string"
          },
          "values" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "RFlowPatternTemplate" : {
        "type" : "object",
        "properties" : {
          "businessId" : {
            "type" : "string"
          },
          "contact" : {
            "$ref" : "#/components/schemas/RContactProfile"
          },
          "customAttributes" : {
            "$ref" : "#/components/schemas/Map"
          },
          "description" : {
            "type" : "string"
          },
          "link" : {
            "type" : "string"
          },
          "meta" : {
            "$ref" : "#/components/schemas/Metadata"
          },
          "name" : {
            "type" : "string"
          },
          "protocols" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/RProtocol"
            }
          },
          "relays" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/RRelay"
            }
          },
          "sourceNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "sources" : {
            "$ref" : "#/components/schemas/REndpoint"
          },
          "status" : {
            "$ref" : "#/components/schemas/RStatus"
          },
          "subscriptionIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "targetNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "targets" : {
            "$ref" : "#/components/schemas/REndpoint"
          },
          "templateName" : {
            "type" : "string"
          }
        }
      },
      "RFlowPendingMetadata" : {
        "type" : "object",
        "properties" : {
          "createdTimestamp" : {
            "type" : "integer",
            "format" : "int64"
          },
          "createdUserId" : {
            "type" : "string"
          },
          "flowDeployed" : {
            "$ref" : "#/components/schemas/Map"
          },
          "flows" : {
            "type" : "string"
          },
          "href" : {
            "type" : "string"
          },
          "message" : {
            "type" : "string"
          },
          "modifiedTimestamp" : {
            "type" : "integer",
            "format" : "int64"
          },
          "modifiedUserId" : {
            "type" : "string"
          },
          "notDeployableReasons" : {
            "$ref" : "#/components/schemas/Map"
          },
          "relays" : {
            "type" : "string"
          },
          "restartException" : {
            "$ref" : "#/components/schemas/Map"
          },
          "sources" : {
            "type" : "string"
          },
          "targets" : {
            "type" : "string"
          }
        }
      },
      "RFlowProductLastDeploymentStatus" : {
        "type" : "object",
        "properties" : {
          "businessId" : {
            "type" : "string"
          },
          "flowId" : {
            "type" : "string"
          },
          "lastDeploymentStatus" : {
            "type" : "string"
          },
          "meta" : {
            "$ref" : "#/components/schemas/Metadata"
          },
          "name" : {
            "type" : "string"
          }
        }
      },
      "RFlowTemplate" : {
        "type" : "object",
        "required" : [ "name" ],
        "properties" : {
          "autoDeployApprovedSubscriptions" : {
            "type" : "boolean"
          },
          "businessId" : {
            "type" : "string"
          },
          "catalogItemId" : {
            "type" : "string"
          },
          "catalogItemUrl" : {
            "type" : "string"
          },
          "customAttributes" : {
            "$ref" : "#/components/schemas/Map"
          },
          "description" : {
            "type" : "string",
            "description" : "The description of this Flow Template."
          },
          "flowPatternConfigurations" : {
            "$ref" : "#/components/schemas/Map"
          },
          "flowPatternId" : {
            "type" : "string",
            "description" : "The id of the associated Flow Pattern for this Flow Template."
          },
          "flowPatternName" : {
            "type" : "string",
            "description" : "The name of the associated Flow Pattern for this Flow Template."
          },
          "hasSubscriptions" : {
            "type" : "boolean",
            "description" : "Flag that indicates if the current flow template has subscriptions"
          },
          "meta" : {
            "$ref" : "#/components/schemas/Metadata"
          },
          "multipleSubscriptionsLocation" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "name" : {
            "type" : "string",
            "description" : "The name of this Flow Template."
          },
          "oneFlowPerMultipleSubscriptions" : {
            "type" : "boolean"
          },
          "referencedObjectIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "resourcePath" : {
            "type" : "string"
          },
          "serviceDefinitions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/RServiceDefinition"
            }
          },
          "serviceDescription" : {
            "type" : "string",
            "description" : "The description of the business service based on this Flow Template."
          },
          "status" : {
            "$ref" : "#/components/schemas/RFlowTemplateStatus"
          },
          "stringValue" : {
            "type" : "string"
          },
          "subscriptionApprovalRequired" : {
            "type" : "boolean"
          },
          "subscriptionParameters" : {
            "$ref" : "#/components/schemas/Map"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "type" : {
            "type" : "string"
          },
          "version" : {
            "type" : "string",
            "description" : "The version of this Flow Template."
          }
        }
      },
      "RFlowTemplatePendingMetadata" : {
        "type" : "object",
        "properties" : {
          "createdTimestamp" : {
            "type" : "integer",
            "format" : "int64"
          },
          "createdUserId" : {
            "type" : "string"
          },
          "flowTemplatesURI" : {
            "type" : "string",
            "description" : "URI to use."
          },
          "href" : {
            "type" : "string"
          },
          "message" : {
            "type" : "string",
            "description" : "Message to use."
          },
          "modifiedTimestamp" : {
            "type" : "integer",
            "format" : "int64"
          },
          "modifiedUserId" : {
            "type" : "string"
          }
        }
      },
      "RFlowTemplateStatus" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "string",
            "enum" : [ "SAVED", "DRAFT", "PUBLISHING", "PUBLISHED", "PUBLISHED_IN_ERROR", "UNPUBLISHING", "UNPUBLISHED_IN_ERROR" ]
          },
          "message" : {
            "type" : "string"
          }
        }
      },
      "RFormBasedAuth" : {
        "type" : "object",
        "required" : [ "method", "url" ],
        "properties" : {
          "headers" : {
            "type" : "string"
          },
          "method" : {
            "type" : "string"
          },
          "url" : {
            "type" : "string"
          }
        }
      },
      "RFormBasedAuthBody" : {
        "type" : "object",
        "required" : [ "type" ],
        "properties" : {
          "data" : {
            "type" : "string"
          },
          "type" : {
            "type" : "string"
          }
        }
      },
      "RFtpClientComProfile" : {
        "type" : "object",
        "properties" : {
          "advancedSecuritySettings" : {
            "description" : "The advanced ssl settings",
            "allOf" : [ {
              "$ref" : "#/components/schemas/RAdvancedSslSettings"
            } ]
          },
          "businessId" : {
            "type" : "string"
          },
          "certificateAlias" : {
            "type" : "string"
          },
          "certificateContent" : {
            "type" : "string"
          },
          "certificatePassword" : {
            "type" : "string"
          },
          "clientAuthentication" : {
            "type" : "string"
          },
          "configureAdvancedSsl" : {
            "type" : "boolean"
          },
          "connectionModes" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "customAttributes" : {
            "$ref" : "#/components/schemas/Map"
          },
          "description" : {
            "type" : "string"
          },
          "enableSSL" : {
            "type" : "boolean"
          },
          "enabled" : {
            "type" : "boolean"
          },
          "fipsEnabled" : {
            "type" : "boolean"
          },
          "isPrivateCertificate" : {
            "type" : "boolean"
          },
          "login" : {
            "type" : "string"
          },
          "meta" : {
            "$ref" : "#/components/schemas/Metadata"
          },
          "name" : {
            "type" : "string"
          },
          "networkZone" : {
            "type" : "string"
          },
          "password" : {
            "type" : "string"
          },
          "passwordChars" : {
            "type" : "string"
          },
          "passwordStoredLocally" : {
            "type" : "boolean"
          },
          "properties" : {
            "$ref" : "#/components/schemas/Map"
          },
          "protocol" : {
            "type" : "string"
          },
          "securityModes" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "serverCertificateVerified" : {
            "type" : "boolean"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "type" : {
            "type" : "string"
          }
        }
      },
      "RFtpComProfile" : {
        "oneOf" : [ {
          "$ref" : "#/components/schemas/RFtpClientComProfile"
        }, {
          "$ref" : "#/components/schemas/RFtpServerComProfile"
        } ]
      },
      "RFtpServerComProfile" : {
        "type" : "object",
        "properties" : {
          "alternativeAddresses" : {
            "type" : "array",
            "description" : "The list of alternativeAddresses",
            "items" : {
              "$ref" : "#/components/schemas/RSiteAlternativeAddress"
            }
          },
          "businessId" : {
            "type" : "string"
          },
          "certificateAlias" : {
            "type" : "string"
          },
          "certificateContent" : {
            "type" : "string"
          },
          "certificatePassword" : {
            "type" : "string"
          },
          "clientAuthentication" : {
            "type" : "string"
          },
          "clientAuthenticationRequired" : {
            "type" : "string"
          },
          "connectionModes" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "customAttributes" : {
            "$ref" : "#/components/schemas/Map"
          },
          "description" : {
            "type" : "string"
          },
          "enableSSL" : {
            "type" : "boolean"
          },
          "enabled" : {
            "type" : "boolean"
          },
          "fipsEnabled" : {
            "type" : "boolean"
          },
          "hosts" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "isPrivateCertificate" : {
            "type" : "boolean"
          },
          "meta" : {
            "$ref" : "#/components/schemas/Metadata"
          },
          "name" : {
            "type" : "string"
          },
          "networkZone" : {
            "type" : "string"
          },
          "port" : {
            "type" : "integer",
            "format" : "int32"
          },
          "portRange" : {
            "$ref" : "#/components/schemas/RPortRange"
          },
          "properties" : {
            "$ref" : "#/components/schemas/Map"
          },
          "protocol" : {
            "type" : "string"
          },
          "securityModes" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "type" : {
            "type" : "string"
          }
        }
      },
      "RHttpClientComProfile" : {
        "type" : "object",
        "properties" : {
          "advancedSecuritySettings" : {
            "description" : "The advanced ssl settings",
            "allOf" : [ {
              "$ref" : "#/components/schemas/RAdvancedSslSettings"
            } ]
          },
          "businessId" : {
            "type" : "string"
          },
          "certificateAlias" : {
            "type" : "string"
          },
          "certificateContent" : {
            "type" : "string"
          },
          "certificatePassword" : {
            "type" : "string"
          },
          "clientAuthentication" : {
            "type" : "string"
          },
          "configureAdvancedSsl" : {
            "type" : "boolean"
          },
          "customAttributes" : {
            "$ref" : "#/components/schemas/Map"
          },
          "description" : {
            "type" : "string"
          },
          "enableSSL" : {
            "type" : "boolean"
          },
          "enabled" : {
            "type" : "boolean"
          },
          "fipsEnabled" : {
            "type" : "boolean"
          },
          "formBasedAuthBody" : {
            "description" : "Body of form-based authentication",
            "allOf" : [ {
              "$ref" : "#/components/schemas/RFormBasedAuthBody"
            } ]
          },
          "isPrivateCertificate" : {
            "type" : "boolean"
          },
          "login" : {
            "type" : "string",
            "description" : "The username for login"
          },
          "meta" : {
            "$ref" : "#/components/schemas/Metadata"
          },
          "methods" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "name" : {
            "type" : "string"
          },
          "networkZone" : {
            "type" : "string"
          },
          "password" : {
            "type" : "string",
            "description" : "The password for login"
          },
          "passwordChars" : {
            "type" : "string"
          },
          "passwordStoredLocally" : {
            "type" : "boolean"
          },
          "properties" : {
            "$ref" : "#/components/schemas/Map"
          },
          "protocol" : {
            "type" : "string"
          },
          "serverCertificateVerified" : {
            "type" : "boolean",
            "description" : "Whether the server certificate is verified. Default value: {@code false}"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "type" : {
            "type" : "string"
          }
        }
      },
      "RHttpComProfile" : {
        "oneOf" : [ {
          "$ref" : "#/components/schemas/RHttpClientComProfile"
        }, {
          "$ref" : "#/components/schemas/RHttpServerComProfile"
        } ]
      },
      "RHttpServerComProfile" : {
        "type" : "object",
        "properties" : {
          "alternativeAddresses" : {
            "type" : "array",
            "description" : "List of alternative addresses",
            "items" : {
              "$ref" : "#/components/schemas/RSiteAlternativeAddress"
            }
          },
          "businessId" : {
            "type" : "string"
          },
          "certificateAlias" : {
            "type" : "string"
          },
          "certificateContent" : {
            "type" : "string"
          },
          "certificatePassword" : {
            "type" : "string"
          },
          "clientAuthentication" : {
            "type" : "string"
          },
          "clientAuthenticationRequired" : {
            "type" : "string",
            "description" : "Specifies if client authentication is required: \"Yes\", \"No\" or \"Optional\""
          },
          "customAttributes" : {
            "$ref" : "#/components/schemas/Map"
          },
          "description" : {
            "type" : "string"
          },
          "enableFormBasedAuthentication" : {
            "type" : "string"
          },
          "enableSSL" : {
            "type" : "boolean"
          },
          "enabled" : {
            "type" : "boolean"
          },
          "fipsEnabled" : {
            "type" : "boolean"
          },
          "formBasedAuth" : {
            "$ref" : "#/components/schemas/RFormBasedAuth"
          },
          "hosts" : {
            "type" : "array",
            "description" : "List of hosts",
            "items" : {
              "type" : "string"
            }
          },
          "isNonGenericHttp" : {
            "type" : "boolean"
          },
          "isPrivateCertificate" : {
            "type" : "boolean"
          },
          "meta" : {
            "$ref" : "#/components/schemas/Metadata"
          },
          "methods" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "name" : {
            "type" : "string"
          },
          "networkZone" : {
            "type" : "string"
          },
          "port" : {
            "type" : "integer",
            "description" : "Port number, 1-65535",
            "format" : "int32"
          },
          "properties" : {
            "$ref" : "#/components/schemas/Map"
          },
          "protocol" : {
            "type" : "string"
          },
          "serverAddressFormat" : {
            "type" : "string"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "type" : {
            "type" : "string"
          },
          "urls" : {
            "type" : "array",
            "description" : "List of URLs",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "RKeyCredential" : {
        "type" : "object",
        "required" : [ "name", "keyContent" ],
        "properties" : {
          "businessId" : {
            "type" : "string",
            "description" : "The businessId is a UUID of the form xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx (8-4-4-4-12)\n It can be set only when the credential is created and will be used if it is unique\n in the participant owning the credential.\n If no businessId is given at creation time, a random UUID will be generated."
          },
          "isPrivateKey" : {
            "type" : "boolean"
          },
          "keyContent" : {
            "type" : "string"
          },
          "keyPassword" : {
            "type" : "string",
            "description" : "The passport needed for private keys"
          },
          "name" : {
            "type" : "string"
          },
          "publicKeyContent" : {
            "type" : "string"
          },
          "state" : {
            "type" : "string"
          },
          "type" : {
            "type" : "string"
          }
        }
      },
      "RKeyData" : {
        "type" : "object",
        "properties" : {
          "algorithm" : {
            "type" : "string"
          },
          "format" : {
            "type" : "string"
          },
          "hash" : {
            "type" : "string"
          },
          "md5Fingerprint" : {
            "type" : "string"
          },
          "size" : {
            "type" : "string"
          }
        }
      },
      "RObject" : {
        "type" : "object",
        "properties" : {
          "businessId" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "type" : {
            "type" : "string"
          }
        }
      },
      "RObjectError" : {
        "type" : "object",
        "properties" : {
          "cause" : {
            "type" : "string"
          },
          "onObjects" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/RObject"
            }
          }
        }
      },
      "RPart" : {
        "type" : "object",
        "properties" : {
          "businessId" : {
            "type" : "string"
          },
          "meta" : {
            "$ref" : "#/components/schemas/Metadata"
          },
          "part" : {
            "$ref" : "#/components/schemas/RReference"
          },
          "selectedLinks" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/RReference"
            }
          },
          "type" : {
            "type" : "string"
          }
        }
      },
      "RParticipant" : {
        "type" : "object",
        "required" : [ "role", "businessId" ],
        "properties" : {
          "businessId" : {
            "type" : "string"
          },
          "comProfileAckId" : {
            "type" : "string"
          },
          "comProfileId" : {
            "type" : "string"
          },
          "comProfileType" : {
            "type" : "string",
            "enum" : [ "CLIENT", "SERVER" ]
          },
          "contact" : {
            "$ref" : "#/components/schemas/RContact"
          },
          "context" : {
            "$ref" : "#/components/schemas/RFLowPatternContext"
          },
          "description" : {
            "type" : "string"
          },
          "extraContextParams" : {
            "$ref" : "#/components/schemas/Map"
          },
          "host" : {
            "type" : "string"
          },
          "linkedProductId" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "participantType" : {
            "type" : "string"
          },
          "productComProfileAckId" : {
            "type" : "string"
          },
          "productComProfileId" : {
            "type" : "string"
          },
          "protocol" : {
            "type" : "string"
          },
          "role" : {
            "type" : "string"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "RPartner" : {
        "type" : "object",
        "properties" : {
          "businessId" : {
            "type" : "string"
          },
          "clientAddress" : {
            "type" : "string"
          },
          "communicationProfiles" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/RComProfile"
            }
          },
          "contact" : {
            "$ref" : "#/components/schemas/RContact"
          },
          "customAttributes" : {
            "$ref" : "#/components/schemas/Map"
          },
          "description" : {
            "type" : "string"
          },
          "meta" : {
            "$ref" : "#/components/schemas/Metadata"
          },
          "name" : {
            "type" : "string"
          },
          "passwordStoredLocally" : {
            "type" : "boolean"
          },
          "resourcePath" : {
            "type" : "string"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "RPesitClientComProfile" : {
        "type" : "object",
        "properties" : {
          "advancedSecuritySettings" : {
            "description" : "The advanced security settings",
            "allOf" : [ {
              "$ref" : "#/components/schemas/RAdvancedSslSettings"
            } ]
          },
          "businessId" : {
            "type" : "string"
          },
          "certificateAlias" : {
            "type" : "string"
          },
          "certificateContent" : {
            "type" : "string"
          },
          "certificatePassword" : {
            "type" : "string"
          },
          "clientAuthentication" : {
            "type" : "string"
          },
          "configureAdvancedSsl" : {
            "type" : "boolean"
          },
          "customAttributes" : {
            "$ref" : "#/components/schemas/Map"
          },
          "description" : {
            "type" : "string"
          },
          "enablePreconnection" : {
            "type" : "boolean"
          },
          "enableSSL" : {
            "type" : "boolean"
          },
          "enabled" : {
            "type" : "boolean"
          },
          "fipsEnabled" : {
            "type" : "boolean"
          },
          "isPrivateCertificate" : {
            "type" : "boolean"
          },
          "legacySecuredSocketModeEnabled" : {
            "type" : "boolean"
          },
          "meta" : {
            "$ref" : "#/components/schemas/Metadata"
          },
          "name" : {
            "type" : "string"
          },
          "networkProtocol" : {
            "type" : "string",
            "description" : "The network protocol. Allowed values: \"TCP\", \"pTCP\", \"UDT\""
          },
          "networkZone" : {
            "type" : "string"
          },
          "password" : {
            "type" : "string",
            "description" : "The password"
          },
          "passwordStoredLocally" : {
            "type" : "boolean"
          },
          "pesitLogin" : {
            "type" : "string",
            "description" : "The PESIT login. Must match regex ^[A-Z0-9 !$%()+-./:;=?@^_{}~\\\\[\\\\]]*$"
          },
          "preconnection" : {
            "description" : "The preconnection configuration",
            "allOf" : [ {
              "$ref" : "#/components/schemas/RPreconnection"
            } ]
          },
          "properties" : {
            "$ref" : "#/components/schemas/Map"
          },
          "protocol" : {
            "type" : "string"
          },
          "serverCertificateVerified" : {
            "type" : "boolean",
            "description" : "id of the {@link com.axway.axiom.registry.api.participant.Credential} of the communication profile"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "type" : {
            "type" : "string"
          }
        }
      },
      "RPesitComProfile" : {
        "oneOf" : [ {
          "$ref" : "#/components/schemas/RPesitClientComProfile"
        }, {
          "$ref" : "#/components/schemas/RPesitServerComProfile"
        } ]
      },
      "RPesitServerComProfile" : {
        "type" : "object",
        "properties" : {
          "advancedSecuritySettings" : {
            "description" : "The advanced security settings",
            "allOf" : [ {
              "$ref" : "#/components/schemas/RAdvancedSslSettings"
            } ]
          },
          "alternativeAddresses" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/RSiteAlternativeAddress"
            }
          },
          "businessId" : {
            "type" : "string"
          },
          "certificateAlias" : {
            "type" : "string"
          },
          "certificateContent" : {
            "type" : "string"
          },
          "certificatePassword" : {
            "type" : "string"
          },
          "clientAuthentication" : {
            "type" : "string"
          },
          "clientAuthenticationRequired" : {
            "type" : "string"
          },
          "configureAdvancedSsl" : {
            "type" : "boolean"
          },
          "customAttributes" : {
            "$ref" : "#/components/schemas/Map"
          },
          "description" : {
            "type" : "string"
          },
          "enablePreconnection" : {
            "type" : "boolean"
          },
          "enableSSL" : {
            "type" : "boolean"
          },
          "enabled" : {
            "type" : "boolean"
          },
          "fipsEnabled" : {
            "type" : "boolean"
          },
          "hosts" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "isPrivateCertificate" : {
            "type" : "boolean"
          },
          "meta" : {
            "$ref" : "#/components/schemas/Metadata"
          },
          "name" : {
            "type" : "string"
          },
          "networkProtocol" : {
            "type" : "string",
            "description" : "The network protocol. Allowed values: \"TCP\", \"pTCP\", \"UDT\""
          },
          "networkZone" : {
            "type" : "string"
          },
          "password" : {
            "type" : "string",
            "description" : "The password"
          },
          "pesitLogin" : {
            "type" : "string",
            "description" : "The PESIT login. Must match regex ^[A-Z0-9 !$%()+-./:;=?@^_{}~\\\\[\\\\]]*$"
          },
          "port" : {
            "type" : "integer",
            "format" : "int32"
          },
          "preconnection" : {
            "description" : "The preconnection configuration",
            "allOf" : [ {
              "$ref" : "#/components/schemas/RPreconnection"
            } ]
          },
          "properties" : {
            "$ref" : "#/components/schemas/Map"
          },
          "protocol" : {
            "type" : "string"
          },
          "securedSocketMode" : {
            "type" : "string"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "type" : {
            "type" : "string"
          }
        }
      },
      "RPgpKeyCredential" : {
        "type" : "object",
        "required" : [ "name", "content" ],
        "properties" : {
          "businessId" : {
            "type" : "string",
            "description" : "The businessId is a UUID of the form xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx (8-4-4-4-12)\n It can be set only when the credential is created and will be used if it is unique\n in the participant owning the credential.\n If no businessId is given at creation time, a random UUID will be generated."
          },
          "content" : {
            "type" : "string",
            "description" : "The content of the PGP key"
          },
          "name" : {
            "type" : "string"
          },
          "password" : {
            "type" : "string",
            "description" : "The passport needed for private keys"
          },
          "passwordChars" : {
            "type" : "string"
          },
          "privateKey" : {
            "type" : "boolean",
            "description" : "The boolean that specifies if the key can be private or not"
          },
          "state" : {
            "type" : "string"
          },
          "type" : {
            "type" : "string"
          }
        }
      },
      "RPgpKeyData" : {
        "type" : "object",
        "properties" : {
          "algorithm" : {
            "type" : "string"
          },
          "fingerPrint" : {
            "type" : "string"
          },
          "firstSubKey" : {
            "$ref" : "#/components/schemas/RPgpSubKey"
          },
          "keyId" : {
            "type" : "string"
          },
          "notAfter" : {
            "type" : "string"
          },
          "notBefore" : {
            "type" : "string"
          },
          "user" : {
            "type" : "string"
          }
        }
      },
      "RPgpSubKey" : {
        "type" : "object",
        "properties" : {
          "algorithm" : {
            "type" : "string"
          },
          "keyId" : {
            "type" : "string"
          },
          "notAfter" : {
            "type" : "string"
          },
          "notBefore" : {
            "type" : "string"
          }
        }
      },
      "RPkiCertificate" : {
        "type" : "object",
        "properties" : {
          "alias" : {
            "type" : "string"
          },
          "chain" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/RCertificateData"
            }
          },
          "data" : {
            "$ref" : "#/components/schemas/RPkiData"
          },
          "entityId" : {
            "type" : "string"
          },
          "entityName" : {
            "type" : "string"
          },
          "entityType" : {
            "type" : "string"
          },
          "expired" : {
            "type" : "boolean"
          },
          "hasChain" : {
            "type" : "boolean"
          },
          "hasPrivateKey" : {
            "type" : "boolean"
          },
          "path" : {
            "type" : "string"
          },
          "type" : {
            "type" : "string"
          }
        }
      },
      "RPkiData" : {
        "oneOf" : [ {
          "$ref" : "#/components/schemas/RCertificateData"
        }, {
          "$ref" : "#/components/schemas/RKeyData"
        }, {
          "$ref" : "#/components/schemas/RPgpSubKey"
        } ]
      },
      "RPkiObject" : {
        "type" : "object",
        "properties" : {
          "alias" : {
            "type" : "string"
          },
          "data" : {
            "$ref" : "#/components/schemas/RPkiData"
          },
          "entityId" : {
            "type" : "string"
          },
          "entityName" : {
            "type" : "string"
          },
          "entityType" : {
            "type" : "string"
          },
          "expired" : {
            "type" : "boolean"
          },
          "hasPrivateKey" : {
            "type" : "boolean"
          },
          "path" : {
            "type" : "string"
          },
          "type" : {
            "type" : "string"
          }
        }
      },
      "RPluginCapabilities" : {
        "type" : "object",
        "properties" : {
          "flowDeploy" : {
            "type" : "boolean"
          },
          "flowUndeploy" : {
            "type" : "boolean"
          },
          "flowValidate" : {
            "type" : "boolean"
          },
          "productRegister" : {
            "type" : "boolean"
          },
          "productServerProfiles" : {
            "type" : "boolean"
          },
          "productStatus" : {
            "type" : "boolean"
          },
          "productStatusOperations" : {
            "$ref" : "#/components/schemas/Map"
          },
          "productUnregister" : {
            "type" : "boolean"
          }
        }
      },
      "RPluginConnection" : {
        "type" : "object",
        "required" : [ "url" ],
        "properties" : {
          "headers" : {
            "$ref" : "#/components/schemas/Map"
          },
          "pluginCertificate" : {
            "type" : "string"
          },
          "url" : {
            "type" : "string"
          }
        }
      },
      "RPluginUI" : {
        "type" : "object",
        "properties" : {
          "homepage" : {
            "type" : "string"
          },
          "productLink" : {
            "type" : "string"
          },
          "sections" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/RPluginUISection"
            }
          }
        }
      },
      "RPluginUISection" : {
        "type" : "object",
        "properties" : {
          "link" : {
            "type" : "string"
          },
          "title" : {
            "type" : "string"
          }
        }
      },
      "RPortRange" : {
        "type" : "object",
        "properties" : {
          "from" : {
            "type" : "integer",
            "format" : "int32"
          },
          "to" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "RPreconnection" : {
        "type" : "object",
        "required" : [ "id" ],
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The id of {@link RPreconnection}.\n It can contain any symbol and has a maximum length of 8 characters."
          },
          "password" : {
            "type" : "string",
            "description" : "The password of {@link RPreconnection}."
          }
        }
      },
      "RProduct" : {
        "type" : "object",
        "required" : [ "type" ],
        "properties" : {
          "backupProducts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/RBackupProduct"
            }
          },
          "businessId" : {
            "type" : "string"
          },
          "communicationProfiles" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/RComProfile"
            }
          },
          "connectionProperties" : {
            "$ref" : "#/components/schemas/Map"
          },
          "connectionSecretFields" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "contact" : {
            "$ref" : "#/components/schemas/RContactProfile"
          },
          "customAttributes" : {
            "$ref" : "#/components/schemas/Map"
          },
          "description" : {
            "type" : "string"
          },
          "groups" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "host" : {
            "type" : "string"
          },
          "meta" : {
            "$ref" : "#/components/schemas/Metadata"
          },
          "name" : {
            "type" : "string"
          },
          "os" : {
            "type" : "string"
          },
          "productId" : {
            "type" : "string"
          },
          "resourcePath" : {
            "type" : "string"
          },
          "status" : {
            "type" : "string"
          },
          "statusDetail" : {
            "type" : "string"
          },
          "statusTimestamp" : {
            "type" : "integer",
            "format" : "int64"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "type" : {
            "type" : "string"
          },
          "version" : {
            "type" : "string"
          }
        }
      },
      "RProductOperation" : {
        "type" : "object",
        "properties" : {
          "operation" : {
            "type" : "string"
          },
          "productIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "RProductPlugin" : {
        "type" : "object",
        "required" : [ "name", "shortName" ],
        "properties" : {
          "businessId" : {
            "type" : "string"
          },
          "capabilities" : {
            "$ref" : "#/components/schemas/RPluginCapabilities"
          },
          "contextSchema" : {
            "$ref" : "#/components/schemas/Map"
          },
          "customAttributeDefinitions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/RCustomAttributeDef"
            }
          },
          "description" : {
            "type" : "string"
          },
          "encryptionInTransit" : {
            "type" : "string"
          },
          "flowPatternDefinitions" : {
            "$ref" : "#/components/schemas/Map"
          },
          "flowPatternManifest" : {
            "$ref" : "#/components/schemas/RFlowPatternManifest"
          },
          "flowSchema" : {
            "$ref" : "#/components/schemas/Map"
          },
          "meta" : {
            "$ref" : "#/components/schemas/Metadata"
          },
          "name" : {
            "type" : "string"
          },
          "pluginConnection" : {
            "$ref" : "#/components/schemas/RPluginConnection"
          },
          "pluginSSHKey" : {
            "type" : "string"
          },
          "productConnectionSchema" : {
            "$ref" : "#/components/schemas/Map"
          },
          "productType" : {
            "type" : "string"
          },
          "protocols" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/RProtocol"
            }
          },
          "secret" : {
            "type" : "string"
          },
          "serviceDefinitionSchema" : {
            "$ref" : "#/components/schemas/Map"
          },
          "shortName" : {
            "type" : "string"
          },
          "ui" : {
            "$ref" : "#/components/schemas/RPluginUI"
          },
          "version" : {
            "type" : "string"
          }
        }
      },
      "RProtocol" : {
        "type" : "object",
        "properties" : {
          "businessId" : {
            "type" : "string"
          },
          "clientProfileOtherSchema" : {
            "$ref" : "#/components/schemas/Map"
          },
          "clientProfileOwnSchema" : {
            "$ref" : "#/components/schemas/Map"
          },
          "customAttributes" : {
            "$ref" : "#/components/schemas/Map"
          },
          "description" : {
            "type" : "string"
          },
          "flowProtocolFilteringSchema" : {
            "$ref" : "#/components/schemas/Map"
          },
          "flowProtocolSchema" : {
            "$ref" : "#/components/schemas/Map"
          },
          "meta" : {
            "$ref" : "#/components/schemas/Metadata"
          },
          "name" : {
            "type" : "string"
          },
          "productType" : {
            "type" : "string"
          },
          "resourcePath" : {
            "type" : "string"
          },
          "serverProfileOtherSchema" : {
            "$ref" : "#/components/schemas/Map"
          },
          "serverProfileOwnSchema" : {
            "$ref" : "#/components/schemas/Map"
          }
        }
      },
      "RPublishBox" : {
        "type" : "object",
        "properties" : {
          "flowTemplateIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "skipCreateCatalogItem" : {
            "type" : "boolean"
          },
          "teamId" : {
            "type" : "string"
          }
        }
      },
      "RReference" : {
        "type" : "object",
        "properties" : {
          "backupProducts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/RBackupProduct"
            }
          },
          "businessId" : {
            "type" : "string"
          },
          "host" : {
            "type" : "string"
          },
          "meta" : {
            "$ref" : "#/components/schemas/Metadata"
          },
          "name" : {
            "type" : "string"
          }
        }
      },
      "RReferenceProduct" : {
        "type" : "object",
        "properties" : {
          "backupProducts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/RBackupProduct"
            }
          },
          "businessId" : {
            "type" : "string"
          },
          "host" : {
            "type" : "string"
          },
          "meta" : {
            "$ref" : "#/components/schemas/Metadata"
          },
          "name" : {
            "type" : "string"
          },
          "nodeId" : {
            "type" : "string"
          },
          "type" : {
            "type" : "string"
          }
        }
      },
      "RRelay" : {
        "type" : "object",
        "properties" : {
          "businessId" : {
            "type" : "string"
          },
          "communicableType" : {
            "type" : "string",
            "enum" : [ "ORGANIZATION", "APPLICATION", "GROUP", "MANAGED_MIDDLEWARE", "UNMANAGED_MIDDLEWARE" ]
          },
          "id" : {
            "type" : "integer",
            "format" : "int32"
          },
          "meta" : {
            "$ref" : "#/components/schemas/Metadata"
          },
          "product" : {
            "$ref" : "#/components/schemas/RReference"
          },
          "properties" : {
            "$ref" : "#/components/schemas/Map"
          },
          "step" : {
            "$ref" : "#/components/schemas/RStep"
          },
          "storeAndForwardEnabled" : {
            "type" : "boolean"
          },
          "type" : {
            "type" : "string"
          }
        }
      },
      "RRelayList" : {
        "type" : "object",
        "properties" : {
          "businessId" : {
            "type" : "string"
          },
          "meta" : {
            "$ref" : "#/components/schemas/Metadata"
          },
          "relays" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/RRelay"
            }
          }
        }
      },
      "RRoute" : {
        "type" : "object",
        "properties" : {
          "properties" : {
            "$ref" : "#/components/schemas/Map"
          },
          "source" : {
            "$ref" : "#/components/schemas/RReference"
          },
          "target" : {
            "$ref" : "#/components/schemas/RReference"
          }
        }
      },
      "RSFtpServerComProfile" : {
        "type" : "object",
        "properties" : {
          "alternativeAddresses" : {
            "type" : "array",
            "description" : "The list of alternativeAddresses",
            "items" : {
              "$ref" : "#/components/schemas/RSiteAlternativeAddress"
            }
          },
          "businessId" : {
            "type" : "string"
          },
          "clientAuthentication" : {
            "type" : "string",
            "description" : "Possible values are: \"PUBLIC_KEY\", \"PASSWORD\", \"PASSWORD_OR_PUBLIC_KEY\""
          },
          "customAttributes" : {
            "$ref" : "#/components/schemas/Map"
          },
          "description" : {
            "type" : "string"
          },
          "enabled" : {
            "type" : "boolean"
          },
          "fingerprint" : {
            "type" : "string",
            "description" : "The fingerprint that identifies the server"
          },
          "fipsEnabled" : {
            "type" : "boolean"
          },
          "hasPrivateKey" : {
            "type" : "boolean",
            "description" : "need to be set when keyContent contains a private key not encrypted and no separate public content"
          },
          "hosts" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "keyAlias" : {
            "type" : "string"
          },
          "keyContent" : {
            "type" : "string"
          },
          "keyPassword" : {
            "type" : "string"
          },
          "meta" : {
            "$ref" : "#/components/schemas/Metadata"
          },
          "name" : {
            "type" : "string"
          },
          "networkZone" : {
            "type" : "string"
          },
          "port" : {
            "type" : "integer",
            "format" : "int32"
          },
          "properties" : {
            "$ref" : "#/components/schemas/Map"
          },
          "protocol" : {
            "type" : "string"
          },
          "publicKeyContent" : {
            "type" : "string"
          },
          "serverVerification" : {
            "type" : "boolean",
            "description" : "Whether or not the server is verified"
          },
          "storedPublicKey" : {
            "type" : "string",
            "description" : "Used to determine if the authentication is done by key or by fingerprint"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "type" : {
            "type" : "string"
          }
        }
      },
      "RSTProductConfiguration" : {
        "type" : "object",
        "required" : [ "authUserName", "os", "version", "authPassword", "admindCACertificate", "hostname", "port", "accountHome", "name" ],
        "properties" : {
          "accountHome" : {
            "type" : "string"
          },
          "admindCACertificate" : {
            "type" : "string"
          },
          "agentName" : {
            "type" : "string"
          },
          "authPassword" : {
            "type" : "string"
          },
          "authUserName" : {
            "type" : "string"
          },
          "businessId" : {
            "type" : "string"
          },
          "guid" : {
            "type" : "integer",
            "format" : "int32"
          },
          "hostname" : {
            "type" : "string"
          },
          "ip" : {
            "type" : "string"
          },
          "meta" : {
            "$ref" : "#/components/schemas/Metadata"
          },
          "name" : {
            "type" : "string"
          },
          "os" : {
            "type" : "string"
          },
          "port" : {
            "type" : "integer",
            "format" : "int32"
          },
          "uid" : {
            "type" : "integer",
            "format" : "int32"
          },
          "version" : {
            "type" : "string"
          }
        }
      },
      "RServiceDefinition" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "productId" : {
            "type" : "string"
          },
          "productType" : {
            "type" : "string"
          },
          "serviceDefinition" : {
            "$ref" : "#/components/schemas/Map"
          }
        }
      },
      "RSftpClientComProfile" : {
        "type" : "object",
        "properties" : {
          "advancedSecuritySettings" : {
            "description" : "The advanced ssl settings",
            "allOf" : [ {
              "$ref" : "#/components/schemas/RAdvancedSshSettings"
            } ]
          },
          "businessId" : {
            "type" : "string"
          },
          "clientAuthentication" : {
            "type" : "string",
            "description" : "Possible values are: \"PUBLIC_KEY\", \"PASSWORD\", \"PASSWORD_OR_PUBLIC_KEY\""
          },
          "configureAdvancedSsh" : {
            "type" : "boolean"
          },
          "customAttributes" : {
            "$ref" : "#/components/schemas/Map"
          },
          "description" : {
            "type" : "string"
          },
          "enabled" : {
            "type" : "boolean"
          },
          "fingerPrint" : {
            "type" : "string"
          },
          "fingerPrintVerified" : {
            "type" : "boolean"
          },
          "fipsEnabled" : {
            "type" : "boolean"
          },
          "hasPrivateKey" : {
            "type" : "boolean",
            "description" : "need to be set when keyContent contains a private key not encrypted and no separate public content"
          },
          "keyAlias" : {
            "type" : "string"
          },
          "keyContent" : {
            "type" : "string"
          },
          "keyPassword" : {
            "type" : "string"
          },
          "login" : {
            "type" : "string"
          },
          "meta" : {
            "$ref" : "#/components/schemas/Metadata"
          },
          "name" : {
            "type" : "string"
          },
          "networkZone" : {
            "type" : "string"
          },
          "password" : {
            "type" : "string"
          },
          "passwordChars" : {
            "type" : "string"
          },
          "passwordStoredLocally" : {
            "type" : "boolean"
          },
          "properties" : {
            "$ref" : "#/components/schemas/Map"
          },
          "protocol" : {
            "type" : "string"
          },
          "publicKeyContent" : {
            "type" : "string"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "type" : {
            "type" : "string"
          }
        }
      },
      "RSftpComProfile" : {
        "oneOf" : [ {
          "$ref" : "#/components/schemas/RSFtpServerComProfile"
        }, {
          "$ref" : "#/components/schemas/RSftpClientComProfile"
        } ]
      },
      "RSiteAlternativeAddress" : {
        "type" : "object",
        "properties" : {
          "host" : {
            "type" : "string"
          },
          "port" : {
            "type" : "integer",
            "format" : "int32"
          },
          "position" : {
            "type" : "integer",
            "format" : "int32"
          },
          "url" : {
            "type" : "string"
          }
        }
      },
      "RSslComProfile" : {
        "oneOf" : [ {
          "$ref" : "#/components/schemas/RFlowComProfile"
        }, {
          "$ref" : "#/components/schemas/RFtpComProfile"
        }, {
          "$ref" : "#/components/schemas/RHttpComProfile"
        }, {
          "$ref" : "#/components/schemas/RPesitComProfile"
        } ]
      },
      "RStatus" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "string"
          },
          "deployed" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "deployedInError" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "deploying" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "details" : {
            "type" : "string"
          },
          "removed" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "removedInError" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "timestamp" : {
            "type" : "integer",
            "format" : "int64"
          }
        }
      },
      "RStep" : {
        "type" : "object",
        "properties" : {
          "commonProperties" : {
            "$ref" : "#/components/schemas/Map"
          },
          "middlewareIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "propertiesForMiddlewares" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/RStepMiddlewareProperties"
            }
          },
          "propertiesForSources" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/RStepProperties"
            }
          },
          "propertiesForTargets" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/RStepProperties"
            }
          },
          "routes" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/RRoute"
            }
          }
        }
      },
      "RStepMiddlewareProperties" : {
        "type" : "object",
        "properties" : {
          "middleware" : {
            "$ref" : "#/components/schemas/RReference"
          },
          "properties" : {
            "$ref" : "#/components/schemas/Map"
          }
        }
      },
      "RStepProperties" : {
        "type" : "object",
        "properties" : {
          "properties" : {
            "$ref" : "#/components/schemas/Map"
          },
          "source" : {
            "$ref" : "#/components/schemas/RReference"
          },
          "target" : {
            "$ref" : "#/components/schemas/RReference"
          }
        }
      },
      "RSubscription" : {
        "type" : "object",
        "required" : [ "name" ],
        "properties" : {
          "businessId" : {
            "type" : "string"
          },
          "customAttributes" : {
            "$ref" : "#/components/schemas/Map"
          },
          "description" : {
            "type" : "string"
          },
          "externalId" : {
            "type" : "string"
          },
          "flowId" : {
            "type" : "string"
          },
          "flowName" : {
            "type" : "string"
          },
          "meta" : {
            "$ref" : "#/components/schemas/Metadata"
          },
          "mode" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "parameters" : {
            "$ref" : "#/components/schemas/Map"
          },
          "participants" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/RParticipant"
            }
          },
          "patternId" : {
            "type" : "string"
          },
          "patternName" : {
            "type" : "string"
          },
          "referencedObjectIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "resourcePath" : {
            "type" : "string"
          },
          "serviceDefinitions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/RServiceDefinition"
            }
          },
          "status" : {
            "$ref" : "#/components/schemas/RSubscriptionStatus"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "templateCatalogItemId" : {
            "type" : "string"
          },
          "templateId" : {
            "type" : "string"
          },
          "templateName" : {
            "type" : "string"
          },
          "templateVersion" : {
            "type" : "string"
          },
          "type" : {
            "type" : "string"
          }
        }
      },
      "RSubscriptionApproval" : {
        "type" : "object",
        "required" : [ "action" ],
        "properties" : {
          "action" : {
            "type" : "string"
          },
          "message" : {
            "type" : "string"
          }
        }
      },
      "RSubscriptionStatus" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "string",
            "enum" : [ "DEPLOYED", "DEPLOYED_IN_ERROR", "DEPLOYING", "DEPLOYING_IN_ERROR", "REMOVING", "REMOVED_IN_ERROR", "REMOVED", "SAVED_NOT_DEPLOYED", "SAVED", "WAITING_FOR_APPROVAL", "APPROVED", "REJECTED" ]
          },
          "message" : {
            "type" : "string"
          },
          "timestamp" : {
            "type" : "integer",
            "format" : "int64"
          }
        }
      },
      "RSynchronizationResult" : {
        "type" : "object",
        "properties" : {
          "businessId" : {
            "type" : "string"
          },
          "meta" : {
            "$ref" : "#/components/schemas/Metadata"
          },
          "result" : {
            "type" : "string"
          },
          "synchronizedProductNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "synchronizedProducts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/RBackupProduct"
            }
          }
        }
      },
      "RSynchronizeDifference" : {
        "type" : "object",
        "properties" : {
          "onProductValue" : {
            "type" : "object"
          },
          "property" : {
            "type" : "string"
          },
          "value" : {
            "type" : "object"
          }
        }
      },
      "RSynchronizeResult" : {
        "type" : "object",
        "properties" : {
          "businessId" : {
            "type" : "string"
          },
          "differences" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/RSynchronizeDifference"
            }
          },
          "name" : {
            "type" : "string"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "EQUAL", "DIFFERENT", "ONLY_LOCAL", "ONLY_ON_PRODUCT" ]
          },
          "type" : {
            "type" : "string"
          }
        }
      },
      "RSynchronizeResults" : {
        "type" : "object",
        "properties" : {
          "message" : {
            "type" : "string"
          },
          "results" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/RSynchronizeResult"
            }
          }
        }
      },
      "RTags" : {
        "type" : "object",
        "required" : [ "type" ],
        "properties" : {
          "ids" : {
            "type" : "array",
            "description" : "The ids field represents the list of the resources that will be updated.",
            "items" : {
              "type" : "string"
            }
          },
          "tags" : {
            "type" : "array",
            "description" : "The tags field will overwrite the existing tags of the resources identified by ids.",
            "items" : {
              "type" : "string"
            }
          },
          "type" : {
            "type" : "string",
            "description" : "The type field represents the type of the resources that will be updated. It can take the following values: [\"Products\", \"UnmanagedProducts\", \"Applications\", \"ApplicationGroups\", \"Partners\", \"Flows\"]"
          }
        }
      },
      "RUserInfo" : {
        "type" : "object",
        "properties" : {
          "firstName" : {
            "type" : "string"
          },
          "lastName" : {
            "type" : "string"
          },
          "organization" : {
            "type" : "string"
          },
          "roles" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "tenantId" : {
            "type" : "string"
          },
          "type" : {
            "type" : "string"
          },
          "userID" : {
            "type" : "string"
          }
        }
      },
      "Response" : {
        "type" : "object",
        "properties" : {
          "entity" : {
            "type" : "object"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/MultivaluedMap"
          },
          "status" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "V" : {
        "type" : "object",
        "properties" : { }
      },
      "PrivilegeReference" : {
        "type" : "object",
        "properties" : {
          "businessId" : {
            "type" : "string"
          },
          "meta" : {
            "$ref" : "#/components/schemas/Metadata"
          }
        }
      },
      "RPrivilege" : {
        "type" : "object",
        "properties" : {
          "actions" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "businessId" : {
            "type" : "string"
          },
          "conditionExpression" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "meta" : {
            "$ref" : "#/components/schemas/Metadata"
          },
          "name" : {
            "type" : "string"
          },
          "predefined" : {
            "type" : "boolean"
          },
          "product" : {
            "type" : "string"
          },
          "resource" : {
            "type" : "string"
          }
        }
      },
      "RResource" : {
        "type" : "object",
        "properties" : {
          "availableActions" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "businessId" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "meta" : {
            "$ref" : "#/components/schemas/Metadata"
          },
          "name" : {
            "type" : "string"
          },
          "predefined" : {
            "type" : "boolean"
          },
          "product" : {
            "type" : "string"
          },
          "properties" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "RRole" : {
        "type" : "object",
        "properties" : {
          "businessId" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "externalRoles" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "internalName" : {
            "type" : "string"
          },
          "meta" : {
            "$ref" : "#/components/schemas/Metadata"
          },
          "name" : {
            "type" : "string"
          },
          "predefined" : {
            "type" : "boolean"
          },
          "privileges" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PrivilegeReference"
            }
          }
        }
      },
      "AuthenticationRequest" : {
        "type" : "object",
        "properties" : {
          "newPassword" : {
            "type" : "string"
          },
          "organization" : {
            "type" : "string"
          },
          "password" : {
            "type" : "string"
          },
          "username" : {
            "type" : "string"
          }
        }
      },
      "ResetPasswordRequest" : {
        "type" : "object",
        "properties" : {
          "email" : {
            "type" : "string"
          },
          "login" : {
            "type" : "string"
          },
          "organization" : {
            "type" : "string"
          }
        }
      },
      "IdAndName" : {
        "type" : "object",
        "properties" : {
          "businessId" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          }
        }
      },
      "RISConnection" : {
        "type" : "object",
        "required" : [ "numberOfRetries", "encryptionMode", "serverPort", "authenticationMode", "connectionTimeout" ],
        "properties" : {
          "adminLogin" : {
            "type" : "string"
          },
          "adminPassword" : {
            "type" : "string"
          },
          "authenticationMode" : {
            "type" : "string",
            "description" : "The authenticationMode field represents the LDAP authentication mode. It can take the following values: [\"SIMPLE\",\n \"CRAM_MD5\", \"DIGEST_MD5\"]"
          },
          "certificateAlias" : {
            "type" : "string"
          },
          "certificateContent" : {
            "type" : "string"
          },
          "connectionPooling" : {
            "type" : "boolean"
          },
          "connectionTimeout" : {
            "type" : "string"
          },
          "encryptionMode" : {
            "type" : "string",
            "description" : "The encryptionMode field represents the LDAP encryption mode. It can take the following values: [\"NONE\", \"START_TLS\",\n \"SSL\"]"
          },
          "numberOfRetries" : {
            "type" : "string"
          },
          "realm" : {
            "type" : "string"
          },
          "serverHosts" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "serverPort" : {
            "type" : "string"
          }
        }
      },
      "RIdentityMetadata" : {
        "type" : "object",
        "properties" : {
          "createdTimestamp" : {
            "type" : "integer",
            "format" : "int64"
          },
          "createdUserId" : {
            "type" : "string"
          },
          "href" : {
            "type" : "string"
          },
          "ldapRoles" : {
            "type" : "string"
          },
          "modifiedTimestamp" : {
            "type" : "integer",
            "format" : "int64"
          },
          "modifiedUserId" : {
            "type" : "string"
          },
          "validConnection" : {
            "type" : "string"
          }
        }
      },
      "RIdentityStore" : {
        "type" : "object",
        "required" : [ "name" ],
        "properties" : {
          "businessId" : {
            "type" : "string"
          },
          "connection" : {
            "$ref" : "#/components/schemas/RISConnection"
          },
          "description" : {
            "type" : "string"
          },
          "encryptionKey" : {
            "type" : "string"
          },
          "ldapAuthorization" : {
            "$ref" : "#/components/schemas/RLDAPAuthorization"
          },
          "ldapTree" : {
            "$ref" : "#/components/schemas/RLDAPTree"
          },
          "ldapUserMapping" : {
            "$ref" : "#/components/schemas/RLDAPUserMapping"
          },
          "meta" : {
            "$ref" : "#/components/schemas/Metadata"
          },
          "name" : {
            "type" : "string"
          },
          "numberOfOrganizations" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "RLDAPAuthorization" : {
        "type" : "object",
        "properties" : {
          "cacheTimeout" : {
            "type" : "string"
          },
          "filterRolesFilter" : {
            "type" : "string"
          },
          "groupRolesFilter" : {
            "type" : "string"
          },
          "mappingRoleAttribute" : {
            "type" : "string"
          },
          "roleListFilter" : {
            "type" : "string"
          },
          "userDNFilter" : {
            "type" : "string"
          },
          "userGroupsFilter" : {
            "type" : "string"
          },
          "userRolesFilter" : {
            "type" : "string"
          }
        }
      },
      "RLDAPTree" : {
        "type" : "object",
        "properties" : {
          "activeDirectory" : {
            "type" : "boolean"
          },
          "activeDirectoryDomain" : {
            "type" : "string"
          },
          "baseDN" : {
            "type" : "string"
          },
          "prefix" : {
            "type" : "string"
          },
          "suffix" : {
            "type" : "string"
          }
        }
      },
      "RLDAPUserMapping" : {
        "type" : "object",
        "properties" : {
          "emailAttribute" : {
            "type" : "string"
          },
          "firstNameAttribute" : {
            "type" : "string"
          },
          "lastNameAttribute" : {
            "type" : "string"
          },
          "userFilter" : {
            "type" : "string"
          }
        }
      },
      "ROrganization" : {
        "type" : "object",
        "required" : [ "name" ],
        "properties" : {
          "businessId" : {
            "type" : "string"
          },
          "contact" : {
            "$ref" : "#/components/schemas/RContact"
          },
          "description" : {
            "type" : "string"
          },
          "identityStore" : {
            "$ref" : "#/components/schemas/IdAndName"
          },
          "isDefault" : {
            "type" : "boolean"
          },
          "meta" : {
            "$ref" : "#/components/schemas/Metadata"
          },
          "name" : {
            "type" : "string"
          },
          "numberOfUsers" : {
            "type" : "integer",
            "format" : "int64"
          }
        }
      },
      "RRoleMapping" : {
        "type" : "object",
        "properties" : {
          "businessId" : {
            "type" : "string"
          },
          "meta" : {
            "$ref" : "#/components/schemas/Metadata"
          },
          "organizationBusinessId" : {
            "type" : "string"
          },
          "roleId" : {
            "type" : "string"
          },
          "roles" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "RUser" : {
        "type" : "object",
        "required" : [ "firstName", "organization", "userID" ],
        "properties" : {
          "businessId" : {
            "type" : "string"
          },
          "contactProfile" : {
            "$ref" : "#/components/schemas/RContact"
          },
          "firstName" : {
            "type" : "string"
          },
          "jobTitle" : {
            "type" : "string"
          },
          "lastName" : {
            "type" : "string"
          },
          "locked" : {
            "type" : "boolean"
          },
          "meta" : {
            "$ref" : "#/components/schemas/Metadata"
          },
          "organization" : {
            "type" : "string"
          },
          "roles" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/IdAndName"
            }
          },
          "userID" : {
            "type" : "string"
          }
        }
      },
      "RUserMetadata" : {
        "type" : "object",
        "properties" : {
          "createdTimestamp" : {
            "type" : "integer",
            "format" : "int64"
          },
          "createdUserId" : {
            "type" : "string"
          },
          "href" : {
            "type" : "string"
          },
          "modifiedTimestamp" : {
            "type" : "integer",
            "format" : "int64"
          },
          "modifiedUserId" : {
            "type" : "string"
          },
          "roles" : {
            "type" : "string"
          }
        }
      },
      "RNetworkZone" : {
        "type" : "object",
        "properties" : {
          "fqdn" : {
            "type" : "string"
          },
          "isPrivate" : {
            "type" : "boolean"
          },
          "name" : {
            "type" : "string"
          },
          "nbComProfiles" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "RSTConfiguration" : {
        "type" : "object",
        "properties" : {
          "fqdn" : {
            "type" : "string"
          },
          "port" : {
            "type" : "string"
          }
        }
      },
      "CftDeploymentResponse" : {
        "type" : "object",
        "properties" : {
          "message" : {
            "type" : "string"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "UNDEPLOYED", "DEPLOYED", "DEPLOYING", "DEPLOYED_IN_ERROR", "REMOVING", "REMOVED_IN_ERROR", "DEPLOYED_NEEDS_RESTART", "REMOVED" ]
          }
        }
      },
      "CftDeploymentStatus" : {
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "string"
          }
        }
      },
      "CftUpdate" : {
        "type" : "object",
        "properties" : {
          "lastDeploymentTimestamp" : {
            "type" : "integer",
            "description" : "Last deployment timestamp",
            "format" : "int64"
          },
          "name" : {
            "type" : "string",
            "description" : "Name"
          },
          "os" : {
            "type" : "string",
            "description" : "Operating system"
          },
          "sha1" : {
            "type" : "string",
            "description" : "SHA1 message digest"
          },
          "type" : {
            "type" : "string",
            "description" : "Type"
          },
          "version" : {
            "type" : "string",
            "description" : "Version"
          }
        }
      },
      "CftUpdateDeployment" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "Product name"
          },
          "status" : {
            "type" : "string",
            "description" : "Status: Updated, Updated in error, Updating, Uploaded in error, Uploading",
            "enum" : [ "UPDATED", "UPDATED_IN_ERROR", "UPDATING", "UPLOADED_IN_ERROR", "UPLOADING" ]
          },
          "statusTimestamp" : {
            "type" : "integer",
            "description" : "Status as timestamp",
            "format" : "int64"
          }
        }
      },
      "CftUpdateDeploymentStatus" : {
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "string"
          }
        }
      },
      "CftUpdateProduct" : {
        "type" : "object",
        "properties" : {
          "hostname" : {
            "type" : "string",
            "description" : "Hostname"
          },
          "name" : {
            "type" : "string",
            "description" : "Name"
          },
          "os" : {
            "type" : "string",
            "description" : "Operating system"
          },
          "port" : {
            "type" : "string",
            "description" : "Port"
          },
          "status" : {
            "type" : "string",
            "description" : "Status"
          },
          "statusExplanation" : {
            "type" : "string",
            "description" : "Explanation of status"
          },
          "statusTimestamp" : {
            "type" : "integer",
            "description" : "Timestamp of status",
            "format" : "int64"
          },
          "version" : {
            "type" : "string",
            "description" : "Version"
          }
        }
      },
      "ACKSTATE" : {
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "string"
          }
        }
      },
      "BOOLEAN" : {
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "string"
          }
        }
      },
      "COMMUT" : {
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "string"
          }
        }
      },
      "CertificateType" : {
        "type" : "object",
        "properties" : {
          "label" : {
            "type" : "string"
          }
        }
      },
      "CftConfigurationGet" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ICftObject"
            }
          },
          "links" : {
            "$ref" : "#/components/schemas/Map"
          },
          "meta" : {
            "$ref" : "#/components/schemas/Map"
          }
        }
      },
      "DeploymentAttributes" : {
        "type" : "object",
        "properties" : {
          "objects" : {
            "type" : "string"
          }
        }
      },
      "DeploymentElement" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "id of the object"
          },
          "type" : {
            "type" : "string",
            "description" : "type of the object, available values : partners, receiveProfiles, explicitSendProfiles, implicitSendProfiles, cronjobs"
          }
        }
      },
      "DeploymentElementList" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/DeploymentElement"
            }
          }
        }
      },
      "EXEC" : {
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "string"
          }
        }
      },
      "EXECPOLICY" : {
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "string"
          }
        }
      },
      "EXECRALL" : {
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "string"
          }
        }
      },
      "FACC" : {
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "string"
          }
        }
      },
      "FACTION" : {
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "string"
          }
        }
      },
      "FDISP" : {
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "string"
          }
        }
      },
      "FILEDATACODE" : {
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "string"
          }
        }
      },
      "FILENOTFOUND" : {
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "string"
          }
        }
      },
      "FILTERTYPE" : {
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "string"
          }
        }
      },
      "FORG" : {
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "string"
          }
        }
      },
      "FTYPE" : {
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "string"
          }
        }
      },
      "FilterType" : {
        "type" : "object",
        "properties" : {
          "cftValue" : {
            "type" : "string"
          }
        }
      },
      "ICftObject" : {
        "oneOf" : [ {
          "$ref" : "#/components/schemas/RCftCronjob"
        }, {
          "$ref" : "#/components/schemas/RCftDeployment"
        }, {
          "$ref" : "#/components/schemas/RCftPartner"
        }, {
          "$ref" : "#/components/schemas/RCftReceiveProfile"
        }, {
          "$ref" : "#/components/schemas/RCftSendProfile"
        } ]
      },
      "MACTION" : {
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "string"
          }
        }
      },
      "ModeEnum" : {
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "string"
          }
        }
      },
      "NACK" : {
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "string"
          }
        }
      },
      "NetworkProtocolEnum" : {
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "string"
          }
        }
      },
      "PART" : {
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "string"
          }
        }
      },
      "PESITCertificate" : {
        "type" : "object",
        "properties" : {
          "businessId" : {
            "type" : "string"
          },
          "content" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "password" : {
            "type" : "string"
          }
        }
      },
      "PESITProtocol" : {
        "type" : "object",
        "properties" : {
          "active" : {
            "type" : "boolean",
            "description" : "Status of the protocol"
          },
          "mode" : {
            "type" : "string",
            "description" : "Mode CLIENT, SERVER or BOTH",
            "enum" : [ "CLIENT", "SERVER", "BOTH" ]
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the protocol."
          },
          "net" : {
            "type" : "string",
            "description" : "Network name of the protocol."
          },
          "networkClass" : {
            "type" : "integer",
            "description" : "Network class of the protocol.",
            "format" : "int32"
          },
          "networkProtocol" : {
            "type" : "string",
            "description" : "Network type of the protocol.",
            "enum" : [ "TCP", "PTCP", "UDT" ]
          },
          "port" : {
            "type" : "integer",
            "description" : "Port of the protocol.",
            "format" : "int32"
          },
          "secure" : {
            "type" : "boolean"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "UNDEPLOYED", "DEPLOYED", "DEPLOYING", "DEPLOYED_IN_ERROR", "REMOVING", "REMOVED_IN_ERROR", "DEPLOYED_NEEDS_RESTART", "REMOVED" ]
          },
          "type" : {
            "type" : "string",
            "description" : "Protocol type (PESIT / SFTP)",
            "enum" : [ "PESIT", "SFTP" ]
          }
        }
      },
      "PESITSSLProtocol" : {
        "type" : "object",
        "properties" : {
          "active" : {
            "type" : "boolean",
            "description" : "Status of the protocol"
          },
          "caCertificateAlias" : {
            "type" : "string"
          },
          "certificate" : {
            "$ref" : "#/components/schemas/PESITCertificate"
          },
          "mode" : {
            "type" : "string",
            "description" : "Mode CLIENT, SERVER or BOTH",
            "enum" : [ "CLIENT", "SERVER", "BOTH" ]
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the protocol."
          },
          "net" : {
            "type" : "string",
            "description" : "Network name of the protocol."
          },
          "networkClass" : {
            "type" : "integer",
            "description" : "Network class of the protocol.",
            "format" : "int32"
          },
          "networkProtocol" : {
            "type" : "string",
            "description" : "Network type of the protocol.",
            "enum" : [ "TCP", "PTCP", "UDT" ]
          },
          "port" : {
            "type" : "integer",
            "description" : "Port of the protocol.",
            "format" : "int32"
          },
          "secure" : {
            "type" : "boolean"
          },
          "securityProfile" : {
            "type" : "string"
          },
          "sslParameter" : {
            "type" : "string"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "UNDEPLOYED", "DEPLOYED", "DEPLOYING", "DEPLOYED_IN_ERROR", "REMOVING", "REMOVED_IN_ERROR", "DEPLOYED_NEEDS_RESTART", "REMOVED" ]
          },
          "type" : {
            "type" : "string",
            "description" : "Protocol type (PESIT / SFTP)",
            "enum" : [ "PESIT", "SFTP" ]
          }
        }
      },
      "PRESTATE" : {
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "string"
          }
        }
      },
      "Protocol" : {
        "type" : "object",
        "properties" : {
          "active" : {
            "type" : "boolean",
            "description" : "Status of the protocol"
          },
          "mode" : {
            "type" : "string",
            "description" : "Mode CLIENT, SERVER or BOTH",
            "enum" : [ "CLIENT", "SERVER", "BOTH" ]
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the protocol."
          },
          "net" : {
            "type" : "string",
            "description" : "Network name of the protocol."
          },
          "networkClass" : {
            "type" : "integer",
            "description" : "Network class of the protocol.",
            "format" : "int32"
          },
          "networkProtocol" : {
            "type" : "string",
            "description" : "Network type of the protocol.",
            "enum" : [ "TCP", "PTCP", "UDT" ]
          },
          "port" : {
            "type" : "integer",
            "description" : "Port of the protocol.",
            "format" : "int32"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "UNDEPLOYED", "DEPLOYED", "DEPLOYING", "DEPLOYED_IN_ERROR", "REMOVING", "REMOVED_IN_ERROR", "DEPLOYED_NEEDS_RESTART", "REMOVED" ]
          },
          "type" : {
            "type" : "string",
            "description" : "Protocol type (PESIT / SFTP)",
            "enum" : [ "PESIT", "SFTP" ]
          }
        }
      },
      "RCertificateAuthority" : {
        "type" : "object",
        "properties" : {
          "content" : {
            "type" : "string"
          },
          "password" : {
            "type" : "string"
          },
          "type" : {
            "type" : "string",
            "description" : "Certificate type",
            "enum" : [ "BUSINESS" ]
          }
        }
      },
      "RCertificateAuthorityData" : {
        "type" : "object",
        "properties" : {
          "issuer" : {
            "type" : "string"
          },
          "notafter" : {
            "type" : "string"
          },
          "notbefore" : {
            "type" : "string"
          },
          "serial" : {
            "type" : "string"
          },
          "sigalgo" : {
            "type" : "string"
          },
          "subject" : {
            "type" : "string"
          }
        }
      },
      "RCertificateAuthorityMetaData" : {
        "type" : "object",
        "properties" : {
          "certificate" : {
            "description" : "Certificate end user Meta Datas",
            "allOf" : [ {
              "$ref" : "#/components/schemas/RCertificateAuthorityData"
            } ]
          },
          "chain" : {
            "type" : "array",
            "description" : "Certificate chain Meta Datas",
            "items" : {
              "$ref" : "#/components/schemas/RCertificateAuthorityData"
            }
          }
        }
      },
      "RCertificateAuthorityResponse" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Certificate id (BUSINESS CA)"
          },
          "meta" : {
            "description" : "Certificate Meta Datas",
            "allOf" : [ {
              "$ref" : "#/components/schemas/RCertificateAuthorityMetaData"
            } ]
          },
          "type" : {
            "type" : "string",
            "description" : "Certificate type (BUSINESS)",
            "enum" : [ "BUSINESS" ]
          }
        }
      },
      "RCftCronjob" : {
        "type" : "object",
        "required" : [ "attributes" ],
        "properties" : {
          "attributes" : {
            "$ref" : "#/components/schemas/RCftCronjobAttributes"
          },
          "id" : {
            "type" : "string",
            "description" : "Object ID."
          },
          "links" : {
            "$ref" : "#/components/schemas/Map"
          },
          "meta" : {
            "$ref" : "#/components/schemas/Map"
          },
          "relationships" : {
            "$ref" : "#/components/schemas/Map"
          },
          "type" : {
            "type" : "string",
            "description" : "Object type"
          }
        }
      },
      "RCftCronjobAttributes" : {
        "type" : "object",
        "properties" : {
          "comment" : {
            "type" : "string",
            "description" : "Free comment"
          },
          "crontab" : {
            "type" : "string",
            "description" : "Identifier that associates a CRONTAB with the CFTPARM object - Case Insensitive"
          },
          "exec" : {
            "type" : "string",
            "description" : "Physical job name - Case sensitive"
          },
          "execContent" : {
            "type" : "string",
            "description" : "Base64 encoded content of the script, if an upload is needed"
          },
          "execpolicy" : {
            "type" : "string",
            "description" : "Node policy for executing a job when working with multiple nodes - default INSTANCE",
            "enum" : [ "INSTANCE", "ALLNODES" ]
          },
          "parm" : {
            "type" : "string",
            "description" : "The PARM to be used in the job execution - Case sensitive"
          },
          "state" : {
            "type" : "string",
            "description" : "Activation - default ACTIVE",
            "enum" : [ "ACTIVE", "NOACTIVE" ]
          },
          "time" : {
            "type" : "string",
            "description" : "Activation time for the CRONJOB"
          },
          "userid" : {
            "type" : "string",
            "description" : "The user for this job procedure"
          }
        }
      },
      "RCftCronjobData" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "$ref" : "#/components/schemas/RCftCronjob"
          },
          "links" : {
            "$ref" : "#/components/schemas/Map"
          }
        }
      },
      "RCftCronjobDataList" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/RCftCronjob"
            }
          },
          "links" : {
            "$ref" : "#/components/schemas/Map"
          }
        }
      },
      "RCftDeployment" : {
        "type" : "object",
        "properties" : {
          "attributes" : {
            "$ref" : "#/components/schemas/DeploymentAttributes"
          },
          "id" : {
            "type" : "string",
            "description" : "Object ID."
          },
          "links" : {
            "$ref" : "#/components/schemas/Map"
          },
          "meta" : {
            "$ref" : "#/components/schemas/Map"
          },
          "relationships" : {
            "$ref" : "#/components/schemas/Map"
          },
          "type" : {
            "type" : "string",
            "description" : "Object type"
          }
        }
      },
      "RCftDeploymentList" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/RCftDeployment"
            }
          },
          "links" : {
            "$ref" : "#/components/schemas/Map"
          }
        }
      },
      "RCftExplicitSendProfile" : {
        "type" : "object",
        "properties" : {
          "attributes" : {
            "$ref" : "#/components/schemas/RCftSendProfileAttributes"
          },
          "id" : {
            "type" : "string",
            "description" : "Object ID."
          },
          "links" : {
            "$ref" : "#/components/schemas/Map"
          },
          "meta" : {
            "$ref" : "#/components/schemas/Map"
          },
          "relationships" : {
            "$ref" : "#/components/schemas/Map"
          },
          "type" : {
            "type" : "string",
            "description" : "Object type"
          }
        }
      },
      "RCftExplicitSendProfileData" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "$ref" : "#/components/schemas/RCftExplicitSendProfile"
          },
          "links" : {
            "$ref" : "#/components/schemas/Map"
          }
        }
      },
      "RCftExplicitSendProfileDataList" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/RCftExplicitSendProfile"
            }
          },
          "links" : {
            "$ref" : "#/components/schemas/Map"
          }
        }
      },
      "RCftImplicitSendProfile" : {
        "type" : "object",
        "properties" : {
          "attributes" : {
            "$ref" : "#/components/schemas/RCftSendProfileAttributes"
          },
          "id" : {
            "type" : "string",
            "description" : "Object ID."
          },
          "links" : {
            "$ref" : "#/components/schemas/Map"
          },
          "meta" : {
            "$ref" : "#/components/schemas/Map"
          },
          "relationships" : {
            "$ref" : "#/components/schemas/Map"
          },
          "type" : {
            "type" : "string",
            "description" : "Object type"
          }
        }
      },
      "RCftImplicitSendProfileData" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "$ref" : "#/components/schemas/RCftImplicitSendProfile"
          },
          "links" : {
            "$ref" : "#/components/schemas/Map"
          }
        }
      },
      "RCftImplicitSendProfileDataList" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/RCftImplicitSendProfile"
            }
          },
          "links" : {
            "$ref" : "#/components/schemas/Map"
          }
        }
      },
      "RCftMetadata" : {
        "type" : "object",
        "properties" : {
          "href" : {
            "type" : "string"
          }
        }
      },
      "RCftPartner" : {
        "type" : "object",
        "properties" : {
          "attributes" : {
            "$ref" : "#/components/schemas/RCftPartnerAttributes"
          },
          "id" : {
            "type" : "string",
            "description" : "Object ID."
          },
          "links" : {
            "$ref" : "#/components/schemas/Map"
          },
          "meta" : {
            "$ref" : "#/components/schemas/Map"
          },
          "relationships" : {
            "$ref" : "#/components/schemas/Map"
          },
          "type" : {
            "type" : "string",
            "description" : "Object type"
          }
        }
      },
      "RCftPartnerAttributes" : {
        "type" : "object",
        "required" : [ "tcps", "protocols" ],
        "properties" : {
          "comment" : {
            "type" : "string",
            "description" : "Free comment"
          },
          "commut" : {
            "type" : "string",
            "description" : "Type of switching supported for this partner.<br>\n Case insensitive. default YES",
            "enum" : [ "YES", "NO", "SERVER", "PART" ]
          },
          "cos" : {
            "type" : "string",
            "description" : "Class Of Service for bandwidth control<br>\n Optional"
          },
          "ctrlpart" : {
            "type" : "string",
            "description" : "Relevant only in server mode<br>\n\n Case Insensitive. default IGNORE",
            "enum" : [ "IGNORE", "ALL", "SPART", "RPART" ]
          },
          "fcharset" : {
            "type" : "string",
            "description" : "Local file encoding.<br>\n Optional"
          },
          "fprefix" : {
            "type" : "string",
            "description" : "File name prefix<br>\n The z/OS, IBM i, and OpenVMS platforms are case insensitive; place the value between double quotes to ensure case sensitivity"
          },
          "group" : {
            "type" : "string",
            "description" : "Group the partner belongs to<br>\n Optional, Case Insensitive"
          },
          "idf" : {
            "type" : "string",
            "description" : "Default identifier of the file for the partner<br>\n Optional, Case Insensitive"
          },
          "imaxtime" : {
            "type" : "string",
            "description" : "Maximum time after which the partner cannot call<br>\n Default 23595999"
          },
          "imintime" : {
            "type" : "string",
            "description" : "Minimum time before which the partner cannot call<br>\n Default 00000000"
          },
          "ipart" : {
            "type" : "string",
            "description" : "Local identifier of an intermediate partner<br>\n Case Insensitive"
          },
          "nack" : {
            "type" : "string",
            "description" : "Enables the negative acknowledgment feature<br>\n Default ' '",
            "enum" : [ " ", "YES", "NO" ]
          },
          "ncharset" : {
            "type" : "string",
            "description" : "Destination file encoding"
          },
          "nrpart" : {
            "type" : "string",
            "description" : "Partner network identifier identifying the partner for incoming calls<br>\n Case Insensitive, except if for an SFTP parameter the value is delimited by double quotes"
          },
          "nrpassw" : {
            "type" : "string",
            "description" : "Partner sign-on password, authorizing a local site access right check<br>\n Case Insensitive, except if value is delimited by double quotes"
          },
          "nspart" : {
            "type" : "string",
            "description" : "Network identifier used by the local Transfer CFT to identify itself to its partner<br>\n Case Insensitive, except if value is delimited by double quotes"
          },
          "nspassw" : {
            "type" : "string",
            "description" : "Partner sign-on password, authorizing a local site access right check"
          },
          "omaxtime" : {
            "type" : "string",
            "description" : "Maximum time after which the partner can no longer be called<br>\n default 23595999"
          },
          "omintime" : {
            "type" : "string",
            "description" : "Minimum time before which the partner may not be called<br>\n default 00000000"
          },
          "protocols" : {
            "type" : "array",
            "description" : "List of protocols ( prot / sap )<br>\n prot: communication protocols (CFTPROT identifiers) authorized to communicate with this partner<br>\n sap:  remote SAPs, service access points, associated with each of the protocols defined by the PROT parameter",
            "items" : {
              "$ref" : "#/components/schemas/RCftPartnerProtocol"
            }
          },
          "rauth" : {
            "type" : "string",
            "description" : "CFTAUTH command ID (identifier) designating a list of IDFs authorized for the receive transfers with this partner<br>\n Case Insensitive"
          },
          "sauth" : {
            "type" : "string",
            "description" : "CFTAUTH command ID (identifier) designating a list of IDFs authorized for send transfers to this partner<br>\n Case Insensitive"
          },
          "srdmz" : {
            "type" : "string",
            "description" : "Secure relay multi RA support<br>\n Case Insensitive"
          },
          "ssh" : {
            "type" : "string",
            "description" : "SSH profile identifier used for security profiles<br>\n Case Insensitive, Valid only on platform supporting SFTP protocol (Unix, Windows)"
          },
          "ssl" : {
            "type" : "string",
            "description" : "SSL profile identifier used for security profiles<br>\n Case Insensitive"
          },
          "state" : {
            "type" : "string",
            "description" : "RCftPartner state<br>\n Default ACTIVEBOTH",
            "enum" : [ "ACTIVEBOTH", "ACTIVEREQ", "ACTIVESERV", "NOACTIVE" ]
          },
          "syst" : {
            "type" : "string",
            "description" : "Type of operating system supported by the partner<br>\n default 'UNIX'",
            "enum" : [ " ", "MSDOS", "OS2", "OS400", "GCOS7", "GCOS8", "CTOS", "VSE", "VM", "MVS", "UNIX", "VMS", "GUARD", "BS2000", "WINNT", "WIN3X", "NETW", "WIN95", "OS2200" ]
          },
          "tcps" : {
            "type" : "array",
            "description" : "List of TCP definitions associated with the partner.<br/>\n Max TCP definitions : 8",
            "items" : {
              "$ref" : "#/components/schemas/RCftPartnerNetworkParameters"
            }
          },
          "trk" : {
            "type" : "string",
            "description" : "Detail provided to Sentinel about transfers<br>\n Case Insensitive, default UNDEFINED",
            "enum" : [ "UNDEFINED", "ALL", "SUMMARY", "NO", "ERROR" ]
          },
          "xlate" : {
            "type" : "string",
            "description" : "Translation table identifier used for transfers with this partner<br>\n Case Insensitive"
          }
        }
      },
      "RCftPartnerData" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "$ref" : "#/components/schemas/RCftPartner"
          },
          "links" : {
            "$ref" : "#/components/schemas/Map"
          }
        }
      },
      "RCftPartnerDataList" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/RCftPartner"
            }
          },
          "links" : {
            "$ref" : "#/components/schemas/Map"
          }
        }
      },
      "RCftPartnerNetworkParameters" : {
        "type" : "object",
        "properties" : {
          "class" : {
            "type" : "integer",
            "format" : "int32"
          },
          "cnxin" : {
            "type" : "integer",
            "description" : "Maximum number of sessions for input connections<br/>\n The maximum value is 990 for z/OS platform and 1000 for other platforms. default 2",
            "format" : "int32"
          },
          "cnxinout" : {
            "type" : "integer",
            "description" : "Maximum number of communication sessions<br/>\n The maximum value is 990 for z/OS platform and 1000 for other platforms. default 2",
            "format" : "int32"
          },
          "cnxout" : {
            "type" : "integer",
            "description" : "Maximum number of sessions for output connections<br/>\n Default 2",
            "format" : "int32"
          },
          "comment" : {
            "type" : "string",
            "description" : "Free comment"
          },
          "host" : {
            "type" : "array",
            "description" : "Host name<br/>\n The z/OS, IBM i, and OpenVMS platforms are case insensitive; place the value between double quotes to ensure case sensitivity",
            "items" : {
              "type" : "string"
            }
          },
          "id" : {
            "type" : "string"
          },
          "imaxtime" : {
            "type" : "string",
            "description" : "Last time for accepting incoming calls<br/>\n default 23595999"
          },
          "imintime" : {
            "type" : "string",
            "description" : "Initial time for accepting incoming calls<br/>\n default 00000000"
          },
          "omaxtime" : {
            "type" : "string",
            "description" : "Last time for giving outgoing calls<br/>\n default 23595999"
          },
          "omintime" : {
            "type" : "string",
            "description" : "Initial time for giving outgoing calls<br/>\n default 00000000"
          },
          "retrym" : {
            "type" : "integer",
            "description" : "Maximum number of retries<br/>\n default 12",
            "format" : "int32"
          },
          "retryn" : {
            "type" : "integer",
            "description" : "Maximum number of retries by period<br/>\n default 4",
            "format" : "int32"
          },
          "retryw" : {
            "type" : "integer",
            "description" : "Time between two retries<br/>\n default 1",
            "format" : "int32"
          },
          "verify" : {
            "type" : "integer",
            "description" : "Verifies the IP address (HOST) of an incoming connection request (checks the first 'n' digits of the caller number)\n <br/>\n default 0",
            "format" : "int32"
          }
        }
      },
      "RCftPartnerProtocol" : {
        "type" : "object",
        "properties" : {
          "prot" : {
            "type" : "string"
          },
          "sap" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "RCftProfileIdf" : {
        "type" : "object",
        "properties" : {
          "comment" : {
            "type" : "string",
            "description" : "Free comment"
          },
          "nidf" : {
            "type" : "string",
            "description" : "File network identifier"
          },
          "part" : {
            "type" : "string"
          }
        }
      },
      "RCftReceiveProfile" : {
        "type" : "object",
        "required" : [ "attributes" ],
        "properties" : {
          "attributes" : {
            "$ref" : "#/components/schemas/RCftReceiveProfileAttributes"
          },
          "id" : {
            "type" : "string",
            "description" : "Object ID."
          },
          "links" : {
            "$ref" : "#/components/schemas/Map"
          },
          "meta" : {
            "$ref" : "#/components/schemas/Map"
          },
          "relationships" : {
            "$ref" : "#/components/schemas/Map"
          },
          "type" : {
            "type" : "string",
            "description" : "Object type"
          }
        }
      },
      "RCftReceiveProfileAttributes" : {
        "type" : "object",
        "properties" : {
          "ackexec" : {
            "type" : "string",
            "description" : "Name of the file describing the procedure to be executed when receiving an acknowledgment reply for the transfer\n <br>\n The z/OS, IBM i, and OpenVMS platforms are case insensitive; place the value between double quotes to ensure case sensitivity."
          },
          "ackexecContent" : {
            "type" : "string",
            "description" : "Script content - in BASE64- to upload and use in ackexec"
          },
          "ackmindate" : {
            "type" : "string",
            "description" : "Acknowledgment exec file can be launched from this date\n <br>\n Between 0 and 99991231. <b>Default 10000101.</b>"
          },
          "ackmintime" : {
            "type" : "string",
            "description" : "Acknowledgment exec file can be launched from this time\n <br>\n Between 0 and 23595999. <b>Default 0.</b>"
          },
          "ackstate" : {
            "type" : "string",
            "description" : "Wait for ACK/NACK to enter the X phase\n <br>\n REQUIRE, IGNORE. <b>Default : IGNORE.</b>",
            "enum" : [ "REQUIRE", "IGNORE" ]
          },
          "acktimeout" : {
            "type" : "integer",
            "description" : "Timeout before switching phase step to K if no END is received\n <br>\n Between 0 and 3600.<b>Default 0.</b>",
            "format" : "int32"
          },
          "attsuser" : {
            "type" : "string",
            "description" : "Additional information specifically related to the <strong>fname</strong> parameter.\n <br>\n Max lenth 512<br>\n Valid only if the Transfer CFT is on a z/OS system or a HP NonStop system using Native files."
          },
          "comment" : {
            "type" : "string",
            "description" : "Free comment\n <br>\n Max length : 160."
          },
          "cos" : {
            "type" : "integer",
            "description" : "Class Of Service for bandwidth control\n <br>\n Between 0 and 32.",
            "format" : "int32"
          },
          "cycdate" : {
            "type" : "string",
            "description" : "Upper final date for activating the first transfer of a cycle.\n <br>\n Between 0 and 99991231. <b>Default 0.</b>"
          },
          "cyctime" : {
            "type" : "string",
            "description" : "Cyclic transfer time.\n <br>\n Between 0 and 23595999. <b>Default 0</b>"
          },
          "delete" : {
            "type" : "string",
            "description" : "Automatic deletion of catalog entries in the \"T\" state (terminated) for the corresponding IDF",
            "enum" : [ "YES", "NO" ]
          },
          "dirnb" : {
            "type" : "integer",
            "description" : "Number of directory blocks used to create a directory\n <br>\n Between 0 and 999 999. Default 0",
            "format" : "int32"
          },
          "duplicat" : {
            "type" : "string",
            "description" : "Automatic detection of duplicate transfers\n <br>\n Max length 512."
          },
          "exec" : {
            "type" : "string",
            "description" : "File that describes the end-of-transfer procedure\n <br>\n The z/OS, IBM i, and OpenVMS platforms are case insensitive; place the value between double quotes to ensure case sensitivity."
          },
          "execContent" : {
            "type" : "string",
            "description" : "Script content - in BASE64- to upload and use in exec"
          },
          "exece" : {
            "type" : "string",
            "description" : "File to execute when an error leads to the K PHASESTEP\n <br>\n The z/OS, IBM i, and OpenVMS platforms are case insensitive; place the value between double quotes to ensure case sensitivity."
          },
          "execeContent" : {
            "type" : "string",
            "description" : "Script content - in BASE64- to upload and use in exece"
          },
          "execrall" : {
            "type" : "string",
            "description" : "Submission policy of the post-processing procedure to launch, when receiving in mode FILE=ALL",
            "enum" : [ "ALL", "PARENT", "CHILDREN" ]
          },
          "exit" : {
            "type" : "string",
            "description" : "Identifier of the CFTEXIT command associated with this transfer\n <br>\n Max length 32"
          },
          "facc" : {
            "type" : "string",
            "description" : "File access method.\n <br>\n The values <strong>VSH0</strong> are only valid if the Transfer CFT is on a <strong>z/OS</strong> platform.",
            "enum" : [ " ", "V", "S", "H", "0" ]
          },
          "faction" : {
            "type" : "string",
            "description" : "Action on the file prior to a receive transfer except when using RENAME or RETRYRENAME, which are post transfer actions.\n <br>\n The <strong>RENAME</strong> action is only valid on Unix platforms and on HP NonStop if used in an OSS environment.",
            "enum" : [ " ", "ERASE", "DELETE", "VERIFY", "CONCAT", "RENAME", "RETRYRENAME" ]
          },
          "fblksize" : {
            "type" : "integer",
            "description" : "Block size, in bytes, of the file to be created\n <br>\n     Between 0 and 62536. Default 0",
            "format" : "int32"
          },
          "fcharset" : {
            "type" : "string",
            "description" : "Local file encoding\n <br>\n Max length 32"
          },
          "fcheck" : {
            "type" : "string",
            "description" : "Reject incoming transfer if local file attributes don't match the virtual file attributes'\n <br>\n  Default : NO",
            "enum" : [ "YES", "NO" ]
          },
          "fcode" : {
            "type" : "string",
            "description" : "Local file data code\n <br>\n     Default : \\\" \\\"",
            "enum" : [ " ", "ASCII", "EBCDIC", "BINARY" ]
          },
          "fdb" : {
            "type" : "string",
            "description" : "Name of the VFM base containing the logical file\n <br>\n Max length 64"
          },
          "fdelete" : {
            "type" : "string",
            "description" : "Enable file deletion based on the transfer state Case Insensitive\n <br>\n Allowed characters : \" *CDKHTX\", Max length 6"
          },
          "fdisp" : {
            "type" : "string",
            "description" : "File sharing option",
            "enum" : [ "OLD", "NEW", "BOTH" ]
          },
          "filenotfound" : {
            "type" : "string",
            "description" : "Manages the desired behavior if a file is not found when performing a transfer",
            "enum" : [ "ABORT", "IGNORE" ]
          },
          "fkeylen" : {
            "type" : "integer",
            "description" : "Key length (in bytes) of an indexed file\n <br>\n     Between 0 and 3277. Default 0",
            "format" : "int32"
          },
          "fkeypos" : {
            "type" : "integer",
            "description" : "Key position (in bytes), relative to 0, in the records of an indexed file\n <br>\n Between 0 and 3277. Default : 0",
            "format" : "int32"
          },
          "flowname" : {
            "type" : "string",
            "description" : "Local flow descriptor\n <br>\n     Max length 100<br>\n Case Insensitive, except if value in delimited by double quotes"
          },
          "flrecl" : {
            "type" : "integer",
            "description" : "Length of the record\n <br>\n Between 0 and 32767. Default : 0",
            "format" : "int32"
          },
          "fname" : {
            "type" : "string",
            "description" : "Name of the physical receiver file, filename or complete path name, of the directory\n <br>\n Max length 512"
          },
          "force" : {
            "type" : "string",
            "description" : "Determines the priority with which the parameters set in CFTRECV are taken into account relative to the parameters set in an associated RECV command.",
            "enum" : [ "YES", "NO" ]
          },
          "forg" : {
            "type" : "string",
            "description" : "Organization of the file to be transferred.\n <br>\n The partitioned organization (PART) is only supported on z/OS systems.",
            "enum" : [ " ", "SEQ", "INDEXED", "DIRECT", "PART" ]
          },
          "fpad" : {
            "type" : "string",
            "description" : "Padding character at the file level\n <br>\n     Max length 16"
          },
          "frecfm" : {
            "type" : "string",
            "description" : "Record format of the receiver file",
            "enum" : [ "", "F", "V", "U" ]
          },
          "fspace" : {
            "type" : "integer",
            "description" : "Size of the local file, in Kbytes\n <br>\n     Between 0 and 9 999 999 999. Default :0",
            "format" : "int64"
          },
          "ftype" : {
            "type" : "string",
            "description" : "File type, which is platform dependent. Windows: \" BVTOXFJ\"  OS400: \" DESZJ\" UNIX: \" BVTOXJ\" TANDEM: \" BVTOXJEN\" z/OS: \" ABMST_1J\"",
            "enum" : [ " ", "_", "B", "V", "T", "O", "X", "F", "J", "A", "M", "S", "I", "E", "D", "Z", "1", "N", "" ]
          },
          "groupid" : {
            "type" : "string",
            "description" : "Information completing the USERID of the CFTSEND or CFTRECV command.\n <br>\n     Max length 32<br>\n The z/OS, IBM i, and OpenVMS platforms are case insensitive; place the value between double quotes to ensure case sensitivity."
          },
          "idf" : {
            "type" : "array",
            "description" : "List of ProfileIdf definitions associated with the transfer model.",
            "items" : {
              "$ref" : "#/components/schemas/RCftProfileIdf"
            }
          },
          "maction" : {
            "type" : "string",
            "description" : "Action on the files transferred by COPY at the time of creation\n <br>\n  Allowed values : \\\" \\\", REPLACE",
            "enum" : [ " ", "REPLACE" ]
          },
          "maxdate" : {
            "type" : "string",
            "description" : "Final date for transfer validity\n <br>\n Between 0 and 99991231. <b>Default 99991231.</b>"
          },
          "maxduration" : {
            "type" : "integer",
            "description" : "The file transfer timeout\n <br>\n Between 0 and 32767. <b>Default 0.</b>",
            "format" : "int32"
          },
          "maxtime" : {
            "type" : "string",
            "description" : "Transfer validity time limit on the final date.\n  <br>\n Between 0 and 23595999. <b>Default 23595999.</b>"
          },
          "mindate" : {
            "type" : "string",
            "description" : "Minimum transfer validity date\n <br>\n Between 0 and 99991231. <b>Default 10000101.</b>"
          },
          "mintime" : {
            "type" : "string",
            "description" : "Initial validity time for the transfer on the first day\n <br>\n Between 0 and 23595999. <b>Default 0.</b>"
          },
          "ncharset" : {
            "type" : "string",
            "description" : "Destination file encoding\n <br>\n     Max length 32"
          },
          "ncode" : {
            "type" : "string",
            "description" : "Network file data code\n <br>\n     Default : \\\" \\\"",
            "enum" : [ " ", "ASCII", "EBCDIC", "BINARY" ]
          },
          "ncomp" : {
            "type" : "integer",
            "description" : "Transmission compression level\n <br>\n     Between 0 and 31. Default 15",
            "format" : "int32"
          },
          "netband" : {
            "type" : "integer",
            "description" : "Outgoing port range\n <br>\n     Between 1 and 16. Default 1",
            "format" : "int32"
          },
          "notify" : {
            "type" : "string",
            "description" : "Defines the destination of the messages associated with the send transfer selected from the log file messages, by the value of the OPERMSG parameter\n <br>\n Max length 8\n <br>\n The z/OS, IBM i, and OpenVMS platforms are case insensitive; place the value between double quotes to ensure case sensitivity."
          },
          "opermsg" : {
            "type" : "integer",
            "description" : "Categories of transfer information messages intended for the operator, with all the messages also being written in the log file\n <br>\n  Between 0 and 255. Default 0",
            "format" : "int32"
          },
          "part" : {
            "type" : "string",
            "description" : "Partner identifier"
          },
          "postmindate" : {
            "type" : "string",
            "description" : "Post-processing exec file can be launched from this date\n <br>\n Between 0 and 99991231. <b>Default 10000101.</b>"
          },
          "postmintime" : {
            "type" : "string",
            "description" : "Post-processing exec file can be launched from this time\n <br>\n Between 0 and 23595999. <b>Default 0.</b>"
          },
          "poststate" : {
            "type" : "string",
            "description" : "The transfer phase step as it enters the Y phase\n <br>\n Available value : DISP",
            "enum" : [ "DISP" ]
          },
          "posttimeout" : {
            "type" : "integer",
            "description" : "Timeout before changing the phase step to K if no END is received during post-processing\n <br>\n     Between 0 and 3600. Default 0",
            "format" : "int32"
          },
          "pri" : {
            "type" : "integer",
            "description" : "Priority of scheduled transfers\n <br>\n     Between 0 and 255. Default 128",
            "format" : "int32"
          },
          "rappl" : {
            "type" : "string",
            "description" : "Identifier of the file receiver application\n <br>\n Max length 48<br>\n Case Insensitive, except if value in delimited by double quotes"
          },
          "rkerror" : {
            "type" : "string",
            "description" : "Action to be taken if a transfer aborts during the selection phase in server mode",
            "enum" : [ "", "KEEP", "DELETE" ]
          },
          "rpasswd" : {
            "type" : "string",
            "description" : "Password for the user who is receiving the file"
          },
          "ruser" : {
            "type" : "string",
            "description" : "Identifier for the user who is receiving the file\n <br>\n Max length 32<br>\n Case Insensitive, except if value in delimited by double quotes"
          },
          "sappl" : {
            "type" : "string",
            "description" : "Identifier of the file sender application\n <br>\n Max length 48<br>\n Case Insensitive, except if value in delimited by double quotes"
          },
          "serial" : {
            "type" : "string",
            "description" : "Parameter to enable file transfer serialization in flow definitions",
            "enum" : [ " ", "X", "Y" ]
          },
          "sourceappl" : {
            "type" : "string",
            "description" : "Identifier of the file sender application\n <br>\n Max length 100<br>\n Case Insensitive, except if value in delimited by double quotes"
          },
          "spasswd" : {
            "type" : "string",
            "description" : "Password for the user who is sending the file"
          },
          "state" : {
            "type" : "string",
            "description" : "Transfer request state Case Insensitive",
            "enum" : [ "DISP", "HOLD", "KEEP" ]
          },
          "storageaccount" : {
            "type" : "string",
            "description" : "Storage account\n <br>\n     Max length 32"
          },
          "suser" : {
            "type" : "string",
            "description" : "Identifier for the user who is sending the file\n <br>\n Max length 32<br>\n Case Insensitive, except if value in delimited by double quotes"
          },
          "targetappl" : {
            "type" : "string",
            "description" : "Identifier of the local file receiver application\n <br>\n Max length 100<br>\n Case Insensitive, except if value in delimited by double quotes"
          },
          "trk" : {
            "type" : "string",
            "description" : "Details provided to Sentinel about transfers",
            "enum" : [ "UNDEFINED", "ALL", "SUMMARY", "NO", "ERROR" ]
          },
          "userid" : {
            "type" : "string",
            "description" : "Identifier of the transfer owner\n <br>\n Max length 32<br>\n The z/OS, IBM i, and OpenVMS platforms are case insensitive; place the value between double quotes to ensure case sensitivity."
          },
          "wfname" : {
            "type" : "string",
            "description" : "Name of the temporary file used to send a group of files selected in line with the generic name specified in FNAME\n <br>\n  Max length 512"
          },
          "workingdir" : {
            "type" : "string",
            "description" : "Working directory\n <br>\n  Max length 512"
          },
          "xlate" : {
            "type" : "string",
            "description" : "Identifier of the CFTXLATE object defining the translation table used for the transfers\n <br>\n     Max length 32"
          }
        }
      },
      "RCftReceiveProfileData" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "$ref" : "#/components/schemas/RCftReceiveProfile"
          },
          "links" : {
            "$ref" : "#/components/schemas/Map"
          }
        }
      },
      "RCftReceiveProfileDataList" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/RCftReceiveProfile"
            }
          },
          "links" : {
            "$ref" : "#/components/schemas/Map"
          }
        }
      },
      "RCftSendProfile" : {
        "type" : "object",
        "properties" : {
          "attributes" : {
            "$ref" : "#/components/schemas/RCftSendProfileAttributes"
          },
          "id" : {
            "type" : "string",
            "description" : "Object ID."
          },
          "links" : {
            "$ref" : "#/components/schemas/Map"
          },
          "meta" : {
            "$ref" : "#/components/schemas/Map"
          },
          "relationships" : {
            "$ref" : "#/components/schemas/Map"
          },
          "type" : {
            "type" : "string",
            "description" : "Object type"
          }
        }
      },
      "RCftSendProfileAttributes" : {
        "type" : "object",
        "properties" : {
          "ackexec" : {
            "type" : "string",
            "description" : "Name of the file describing the procedure to be executed when receiving an acknowledgment reply for the transfer\n <br>\n The z/OS, IBM i, and OpenVMS platforms are case insensitive; place the value between double quotes to ensure case sensitivity."
          },
          "ackexecContent" : {
            "type" : "string",
            "description" : "Script content - in BASE64- to upload and use in ackexec"
          },
          "ackmindate" : {
            "type" : "string",
            "description" : "Acknowledgment exec file can be launched from this date\n <br>\n Between 0 and 99991231. <b>Default 10000101.</b>"
          },
          "ackmintime" : {
            "type" : "string",
            "description" : "Acknowledgment exec file can be launched from this time\n <br>\n Between 0 and 23595999. <b>Default 0.</b>"
          },
          "ackstate" : {
            "type" : "string",
            "description" : "Wait for ACK/NACK to enter the X phase\n <br>\n REQUIRE, IGNORE. <b>Default : IGNORE.</b>",
            "enum" : [ "REQUIRE", "IGNORE" ]
          },
          "acktimeout" : {
            "type" : "integer",
            "description" : "Timeout before switching phase step to K if no END is received\n <br>\n Between 0 and 3600.<b>Default 0.</b>",
            "format" : "int32"
          },
          "archivefname" : {
            "type" : "string",
            "description" : "Name of the archive file\n <br>\n     Only available on CFT version &gt;=3.6\n <br>\n Max length 512"
          },
          "comment" : {
            "type" : "string",
            "description" : "Free comment\n <br>\n Max length : 160."
          },
          "cos" : {
            "type" : "integer",
            "description" : "Class Of Service for bandwidth control\n <br>\n Between 0 and 32.",
            "format" : "int32"
          },
          "cycdate" : {
            "type" : "string",
            "description" : "Upper final date for activating the first transfer of a cycle.\n <br>\n Between 0 and 99991231. <b>Default 0.</b>"
          },
          "cycle" : {
            "type" : "integer",
            "description" : "Number of units defining the transfer cycle period\n <br>\n Between 0 and 32767. Default 0",
            "format" : "int32"
          },
          "cyctime" : {
            "type" : "string",
            "description" : "Cyclic transfer time.\n <br>\n Between 0 and 23595999. <b>Default 0</b>"
          },
          "delete" : {
            "type" : "string",
            "description" : "Automatic deletion of catalog entries in the \"T\" state (terminated) for the corresponding IDF",
            "enum" : [ "YES", "NO" ]
          },
          "duplicat" : {
            "type" : "string",
            "description" : "Automatic detection of duplicate transfers\n <br>\n Max length 512."
          },
          "exec" : {
            "type" : "string",
            "description" : "File that describes the end-of-transfer procedure\n <br>\n The z/OS, IBM i, and OpenVMS platforms are case insensitive; place the value between double quotes to ensure case sensitivity."
          },
          "execContent" : {
            "type" : "string",
            "description" : "Script content - in BASE64- to upload and use in exec"
          },
          "exece" : {
            "type" : "string",
            "description" : "File to execute when an error leads to the K PHASESTEP\n <br>\n The z/OS, IBM i, and OpenVMS platforms are case insensitive; place the value between double quotes to ensure case sensitivity."
          },
          "execeContent" : {
            "type" : "string",
            "description" : "Script content - in BASE64- to upload and use in exece"
          },
          "execsub" : {
            "type" : "string",
            "description" : "Submission policy of the end-of-transfer procedure to launch when sending a group of files",
            "enum" : [ "LIST", "FILE", "SUBF" ]
          },
          "execsuba" : {
            "type" : "string",
            "description" : "Submission policy of the procedure to launch receiving acknowledgment when sending a group of files",
            "enum" : [ "LIST", "FILE", "SUBF" ]
          },
          "execsubpre" : {
            "type" : "string",
            "description" : "Submission policy of the preprocessing procedure when sending a group of files",
            "enum" : [ "LIST", "FILE", "SUBF" ]
          },
          "exit" : {
            "type" : "string",
            "description" : "Identifier of the CFTEXIT command associated with this transfer\n <br>\n Max length 32"
          },
          "facc" : {
            "type" : "string",
            "description" : "File access method.\n <br>\n The values <strong>VSH0</strong> are only valid if the Transfer CFT is on a <strong>z/OS</strong> platform.",
            "enum" : [ " ", "V", "S", "H", "0" ]
          },
          "faction" : {
            "type" : "string",
            "description" : "Action on the file after a send transfer.\n <br>\n The <strong>ARCHIVE</strong> is not valid for the following operations: <br>\n     - Send in server mode <br>\n     - Homogeneous group of files<br>\n     - Broadcasting   <br>\n OS-specific limitations:<br>\n - z/OS: VSAM, PDS, and GDG files are not supported <br>\n - HP NonStop: ARCHIVE is not supported with Guardian files.",
            "enum" : [ "ERASE", "DELETE", "NONE", "ROTATE", "ARCHIVE" ]
          },
          "fblksize" : {
            "type" : "integer",
            "description" : "Block size, in bytes, of the file to be created\n <br>\n     Between 0 and 65535. Default 0",
            "format" : "int32"
          },
          "fcharset" : {
            "type" : "string",
            "description" : "Local file encoding\n <br>\n Max length 32"
          },
          "fcode" : {
            "type" : "string",
            "description" : "Local file data code\n <br>\n     Default : \\\" \\\"",
            "enum" : [ " ", "ASCII", "EBCDIC", "BINARY" ]
          },
          "fdb" : {
            "type" : "string",
            "description" : "Name of the VFM base containing the logical file\n <br>\n Max length 64"
          },
          "fdelete" : {
            "type" : "string",
            "description" : "Enable file deletion based on the transfer state Case Insensitive\n <br>\n Allowed characters : \" *CDKHTX\", Max length 6"
          },
          "fdisp" : {
            "type" : "string",
            "description" : "File sharing option",
            "enum" : [ "OLD", "SHR", "CHECK" ]
          },
          "filenotfound" : {
            "type" : "string",
            "description" : "Manages the desired behavior if a file is not found when performing a transfer",
            "enum" : [ "ABORT", "IGNORE" ]
          },
          "filter" : {
            "type" : "string",
            "description" : "Filter REGEX pattern to use for file name filtering\n <br>\n Max length 256"
          },
          "filtertype" : {
            "type" : "string",
            "description" : "Pattern matching algorithm to use for file name filtering",
            "enum" : [ "STRJCMP", "EREGEX" ]
          },
          "fkeylen" : {
            "type" : "integer",
            "description" : "Key length (in bytes) of an indexed file\n <br>\n     Between 0 and 3277. Default 0",
            "format" : "int32"
          },
          "fkeypos" : {
            "type" : "integer",
            "description" : "Key position (in bytes), relative to 0, in the records of an indexed file\n <br>\n Between 0 and 3277. Default : 0",
            "format" : "int32"
          },
          "flowname" : {
            "type" : "string",
            "description" : "Local flow descriptor\n <br>\n     Max length 100<br>\n Case Insensitive, except if value in delimited by double quotes"
          },
          "flrecl" : {
            "type" : "integer",
            "description" : "Length of the record\n <br>\n Between 0 and 32767. Default : 0",
            "format" : "int32"
          },
          "fname" : {
            "type" : "string",
            "description" : "Local file, directory, indirection file, selection mask, or selection directory to be sent\n <br>\n Max length 512"
          },
          "force" : {
            "type" : "string",
            "description" : "Determines the priority with which the parameters set in CFTSEND are taken into account relative to the parameters set in an associated SEND command.",
            "enum" : [ "YES", "NO" ]
          },
          "forg" : {
            "type" : "string",
            "description" : "Organization of the file to be transferred.\n <br>\n The partitioned organization (PART) is only supported on z/OS systems.",
            "enum" : [ " ", "SEQ", "INDEXED", "DIRECT", "PART" ]
          },
          "fpad" : {
            "type" : "string",
            "description" : "Padding character at the file level\n <br>\n     Max length 16"
          },
          "frecfm" : {
            "type" : "string",
            "description" : "Record format of the receiver file",
            "enum" : [ " ", "F", "V", "U" ]
          },
          "fspace" : {
            "type" : "integer",
            "description" : "Size of the local file, in Kbytes\n <br>\n     Between 0 and 9 999 999 999. Default :0",
            "format" : "int64"
          },
          "ftype" : {
            "type" : "string",
            "description" : "File type, which is platform dependent. Windows: \" BVTOXFJ\"  OS400: \" DESZJ\" UNIX: \" BVTOXJ\" TANDEM: \" BVTOXJEN\" z/OS: \" ABMST_1J\"",
            "enum" : [ " ", "_", "B", "V", "T", "O", "X", "F", "J", "A", "M", "S", "I", "E", "D", "Z", "1", "N", "" ]
          },
          "groupid" : {
            "type" : "string",
            "description" : "Information completing the USERID of the CFTSEND or CFTRECV command.\n <br>\n     Max length 32<br>\n The z/OS, IBM i, and OpenVMS platforms are case insensitive; place the value between double quotes to ensure case sensitivity."
          },
          "ida" : {
            "type" : "string",
            "description" : "Local transfer identifier assigned by the user or user application\n <br>\n     Only available for CFT version &gt;= 3.4\n <br>\n Max length 64<br>\n Case Insensitive, except if value in delimited by double quotes"
          },
          "idf" : {
            "type" : "array",
            "description" : "List of ProfileIdf definitions associated with the transfer model.",
            "items" : {
              "$ref" : "#/components/schemas/RCftProfileIdf"
            }
          },
          "maxdate" : {
            "type" : "string",
            "description" : "Final date for transfer validity\n <br>\n Between 0 and 99991231. <b>Default 99991231.</b>"
          },
          "maxduration" : {
            "type" : "integer",
            "description" : "The file transfer timeout\n <br>\n Between 0 and 32767. <b>Default 0.</b>",
            "format" : "int32"
          },
          "maxtime" : {
            "type" : "string",
            "description" : "Transfer validity time limit on the final date.\n  <br>\n Between 0 and 23595999. <b>Default 23595999.</b>"
          },
          "mindate" : {
            "type" : "string",
            "description" : "Minimum transfer validity date\n <br>\n Between 0 and 99991231. <b>Default 10000101.</b>"
          },
          "mintime" : {
            "type" : "string",
            "description" : "Initial validity time for the transfer on the first day\n <br>\n Between 0 and 23595999. <b>Default 0.</b>"
          },
          "nblksize" : {
            "type" : "integer",
            "description" : "File block size in protocol terms\n <br>\n     Between 0 and 65535. Default 0",
            "format" : "int32"
          },
          "ncharset" : {
            "type" : "string",
            "description" : "Destination file encoding\n <br>\n     Max length 32"
          },
          "ncode" : {
            "type" : "string",
            "description" : "Network file data code\n <br>\n     Default : \\\" \\\"",
            "enum" : [ " ", "ASCII", "EBCDIC", "BINARY" ]
          },
          "ncomp" : {
            "type" : "integer",
            "description" : "Transmission compression level\n <br>\n     Between 0 and 31. Default 15",
            "format" : "int32"
          },
          "netband" : {
            "type" : "integer",
            "description" : "Outgoing port range\n <br>\n     Between 1 and 16. Default 1",
            "format" : "int32"
          },
          "nfname" : {
            "type" : "string",
            "description" : "Name of the physical file at the receiver partner site\n <br>\n Max length 512"
          },
          "nkeylen" : {
            "type" : "integer",
            "description" : "Length, in bytes, of the indexed file's key\n <br>\n     Between 0 and 32767. Default 0",
            "format" : "int32"
          },
          "nkeypos" : {
            "type" : "integer",
            "description" : "Location, in bytes, of the key in the records of an indexed file\n <br>\n Between 0 and 32767. Default 0",
            "format" : "int32"
          },
          "nlrecl" : {
            "type" : "integer",
            "description" : "Length of the record of the receiver file\n <br>\n Between 0 and 32767. Default 0",
            "format" : "int32"
          },
          "notify" : {
            "type" : "string",
            "description" : "Defines the destination of the messages associated with the send transfer selected from the log file messages, by the value of the OPERMSG parameter\n <br>\n Max length 8\n <br>\n The z/OS, IBM i, and OpenVMS platforms are case insensitive; place the value between double quotes to ensure case sensitivity."
          },
          "npad" : {
            "type" : "string",
            "description" : "Padding character at the network level\n <br>\n Max length 16"
          },
          "nrecfm" : {
            "type" : "string",
            "description" : "File record format defined in protocol terms",
            "enum" : [ " ", "F", "V", "U" ]
          },
          "nspace" : {
            "type" : "integer",
            "description" : "File size, in protocol terms, expressed as a number of blocks of 1 K bytes\n <br>\n Between 0 and 9 999 999 999. Default 0",
            "format" : "int64"
          },
          "ntype" : {
            "type" : "string",
            "description" : "File type, in protocol terms"
          },
          "opermsg" : {
            "type" : "integer",
            "description" : "Categories of transfer information messages intended for the operator, with all the messages also being written in the log file\n <br>\n  Between 0 and 255. Default 0",
            "format" : "int32"
          },
          "parm" : {
            "type" : "string",
            "description" : "User parameter sent to the receiver\n <br>\n Max length 512"
          },
          "part" : {
            "type" : "string",
            "description" : "Partner identifier"
          },
          "postmindate" : {
            "type" : "string",
            "description" : "Post-processing exec file can be launched from this date\n <br>\n Between 0 and 99991231. <b>Default 10000101.</b>"
          },
          "postmintime" : {
            "type" : "string",
            "description" : "Post-processing exec file can be launched from this time\n <br>\n Between 0 and 23595999. <b>Default 0.</b>"
          },
          "poststate" : {
            "type" : "string",
            "description" : "The transfer phase step as it enters the Y phase\n <br>\n Available value : DISP",
            "enum" : [ "DISP" ]
          },
          "posttimeout" : {
            "type" : "integer",
            "description" : "Timeout before changing the phase step to K if no END is received during post-processing\n <br>\n     Between 0 and 3600. Default 0",
            "format" : "int32"
          },
          "preexec" : {
            "type" : "string",
            "description" : "The preprocessing exec file\n <br>\n Max length 512<br>\n The z/OS, IBM i, and OpenVMS platforms are case insensitive; place the value between double quotes to ensure case sensitivity."
          },
          "preexecContent" : {
            "type" : "string",
            "description" : "Script content -in BASE64- for preexec"
          },
          "premindate" : {
            "type" : "string",
            "description" : "Execute the preprocessing file as of this date\n <br>\n     Between 0 and 99991231. Default 10000101"
          },
          "premintime" : {
            "type" : "string",
            "description" : "Execute the preprocessing file as of this time\n <br>\n Between 0 and 23595999. Default 0"
          },
          "prestate" : {
            "type" : "string",
            "description" : "The transfer phase step as it enters the A phase",
            "enum" : [ " ", "DISP", "HOLD" ]
          },
          "pretimeout" : {
            "type" : "integer",
            "description" : "Timeout before switching phase step to K if no END is received during preprocessing\n <br>\n Between 0 and 3600. Default 0",
            "format" : "int32"
          },
          "pri" : {
            "type" : "integer",
            "description" : "Priority of scheduled transfers\n <br>\n     Between 0 and 255. Default 128",
            "format" : "int32"
          },
          "rappl" : {
            "type" : "string",
            "description" : "Identifier of the file receiver application\n <br>\n Max length 48<br>\n Case Insensitive, except if value in delimited by double quotes"
          },
          "rpasswd" : {
            "type" : "string",
            "description" : "Password for the user who is receiving the file"
          },
          "ruser" : {
            "type" : "string",
            "description" : "Identifier for the user who is receiving the file\n <br>\n Max length 32<br>\n Case Insensitive, except if value in delimited by double quotes"
          },
          "sappl" : {
            "type" : "string",
            "description" : "Identifier of the file sender application\n <br>\n Max length 48<br>\n Case Insensitive, except if value in delimited by double quotes"
          },
          "selfname" : {
            "type" : "string",
            "description" : "Name of a file that contains a list of files selected for sending\n <br>\n Max length 512"
          },
          "serial" : {
            "type" : "string",
            "description" : "Parameter to enable file transfer serialization in flow definitions",
            "enum" : [ " ", "X", "Y" ]
          },
          "sigfname" : {
            "type" : "string",
            "description" : "Name of the signature file\n <br>\n Max length 512"
          },
          "sourceappl" : {
            "type" : "string",
            "description" : "Identifier of the file sender application\n <br>\n Max length 100<br>\n Case Insensitive, except if value in delimited by double quotes"
          },
          "spart" : {
            "type" : "string",
            "description" : "Network designation by which the local Transfer CFT identifies itself to its partner\n <br>\n Max length 64"
          },
          "spasswd" : {
            "type" : "string",
            "description" : "Password for the user who is sending the file"
          },
          "state" : {
            "type" : "string",
            "description" : "Transfer request state Case Insensitive",
            "enum" : [ "DISP", "HOLD", "KEEP" ]
          },
          "storageaccount" : {
            "type" : "string",
            "description" : "Storage account\n <br>\n     Max length 32"
          },
          "suser" : {
            "type" : "string",
            "description" : "Identifier for the user who is sending the file\n <br>\n Max length 32<br>\n Case Insensitive, except if value in delimited by double quotes"
          },
          "targetappl" : {
            "type" : "string",
            "description" : "Identifier of the local file receiver application\n <br>\n Max length 100<br>\n Case Insensitive, except if value in delimited by double quotes"
          },
          "tcycle" : {
            "type" : "string",
            "description" : "Transfer cycle period unit",
            "enum" : [ "MIN", "DAY", "MONTH" ]
          },
          "trk" : {
            "type" : "string",
            "description" : "Details provided to Sentinel about transfers",
            "enum" : [ "UNDEFINED", "ALL", "SUMMARY", "NO", "ERROR" ]
          },
          "userid" : {
            "type" : "string",
            "description" : "Identifier of the transfer owner\n <br>\n Max length 32<br>\n The z/OS, IBM i, and OpenVMS platforms are case insensitive; place the value between double quotes to ensure case sensitivity."
          },
          "wfname" : {
            "type" : "string",
            "description" : "Name of the temporary file used to send a group of files selected in line with the generic name specified in FNAME\n <br>\n  Max length 512"
          },
          "workingdir" : {
            "type" : "string",
            "description" : "Working directory\n <br>\n  Max length 512"
          },
          "xlate" : {
            "type" : "string",
            "description" : "Identifier of the CFTXLATE object defining the translation table used for the transfers\n <br>\n     Max length 32"
          }
        }
      },
      "RECORDFORMAT" : {
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "string"
          }
        }
      },
      "RFolder" : {
        "type" : "object",
        "required" : [ "part", "idf", "workdir", "scandir", "id" ],
        "properties" : {
          "archivedir" : {
            "type" : "string",
            "description" : "Absolute path name of the top level directory to archive file"
          },
          "enablesubdir" : {
            "type" : "string",
            "description" : "Indicates if the subfolders are also monitored &lt;YES&gt;  ('YES','NO')",
            "enum" : [ "YES", "NO" ]
          },
          "excludefilter" : {
            "type" : "string",
            "description" : "Files whose names match this pattern are not monitored"
          },
          "filecount" : {
            "type" : "integer",
            "description" : "Maximum number of file submissions for each scan",
            "format" : "int32"
          },
          "fileidledelay" : {
            "type" : "integer",
            "description" : "If the state of a file has not changed within this delay in seconds, the file becomes a candidate for submission",
            "format" : "int32"
          },
          "filesizemax" : {
            "type" : "integer",
            "description" : "Files larger than this value, in bytes, are not candidates for submission",
            "format" : "int64"
          },
          "filesizemin" : {
            "type" : "integer",
            "description" : "Files shorter than this value, in bytes, are not candidates for submission",
            "format" : "int64"
          },
          "filtertype" : {
            "type" : "string",
            "description" : "Pattern matching algorithm to use for file name filtering  [&lt;WILDMAT&gt; ('STRJCMP','WILDMAT','EREGEX') for windows and unix]  [&lt;STRJCMP&gt; ('STRJCMP','EREGEX') for others systems]",
            "enum" : [ "WILDMAT", "STRJCMP", "EREGEX" ]
          },
          "id" : {
            "type" : "string",
            "description" : "The folder name"
          },
          "idf" : {
            "type" : "string",
            "description" : "File type identifier"
          },
          "includefilter" : {
            "type" : "string",
            "description" : "Only files whose names match this pattern are monitored"
          },
          "interval" : {
            "type" : "integer",
            "description" : "Interval in seconds between two scans of the directory files",
            "format" : "int32"
          },
          "meta" : {
            "description" : "Metadata for link to self",
            "allOf" : [ {
              "$ref" : "#/components/schemas/RFolderMetadata"
            } ]
          },
          "method" : {
            "type" : "string",
            "description" : "Indicates if the files are moved from the scan folder to the work folder or left &lt;MOVE&gt;  ('MOVE','FILE')",
            "enum" : [ "MOVE", "FILE" ]
          },
          "part" : {
            "type" : "string",
            "description" : "Partner identifier"
          },
          "renamemethod" : {
            "type" : "string",
            "description" : "Adds nothing, or a timestamp of the pattern YYYYMMDDHHMMSS, at the end of the name of the renamed file &lt;TIMESTAMP&gt;  ('NONE','TIMESTAMP')",
            "enum" : [ "TIMESTAMP", "NONE" ]
          },
          "renameseparator" : {
            "type" : "string",
            "description" : "The first character defines the separator before the timestamp. The second character, when present, defines the separator after the timestamp &lt;.&gt;"
          },
          "resubmitchanges" : {
            "type" : "string",
            "description" : "Indicates if the changed files must be resubmitted &lt;YES&gt;  ('YES','NO')",
            "enum" : [ "YES", "NO" ]
          },
          "scandir" : {
            "type" : "string",
            "description" : "Absolute path name of the top level directory to scan."
          },
          "state" : {
            "type" : "string",
            "description" : "Activation status &lt;NOACTIVE&gt;  ('ACTIVE','NOACTIVE')",
            "enum" : [ "ACTIVE", "NOACTIVE" ]
          },
          "usefsevents" : {
            "type" : "string",
            "description" : "Indicates if file-system events are used to trigger folder scans &lt;NO&gt;  ('YES','NO') <b>only available on windows and linux</b>",
            "enum" : [ "YES", "NO" ]
          },
          "workdir" : {
            "type" : "string",
            "description" : "Absolute path name of the top level directory available for file state information"
          }
        }
      },
      "RFolderMetadata" : {
        "type" : "object",
        "properties" : {
          "href" : {
            "type" : "string"
          },
          "usedInFlows" : {
            "type" : "boolean"
          }
        }
      },
      "RKERROR" : {
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "string"
          }
        }
      },
      "RParameter" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The internal id of the parameter"
          },
          "value" : {
            "type" : "object",
            "description" : "The value of the parameter"
          }
        }
      },
      "RSharedSecret" : {
        "type" : "object",
        "properties" : {
          "active" : {
            "type" : "boolean"
          },
          "businessId" : {
            "type" : "string"
          },
          "creationDate" : {
            "type" : "integer",
            "format" : "int64"
          },
          "secret" : {
            "type" : "string"
          }
        }
      },
      "RSynchronizationResponse" : {
        "type" : "object",
        "properties" : {
          "businessId" : {
            "type" : "string",
            "description" : "The businessId of the synchronization request"
          },
          "errors" : {
            "$ref" : "#/components/schemas/Map"
          },
          "message" : {
            "type" : "string",
            "description" : "The deployment message."
          },
          "meta" : {
            "description" : "Metadata",
            "allOf" : [ {
              "$ref" : "#/components/schemas/RCftMetadata"
            } ]
          },
          "notSynchReasons" : {
            "description" : "Reasons for failed synchronizations.",
            "allOf" : [ {
              "$ref" : "#/components/schemas/Map"
            } ]
          },
          "results" : {
            "$ref" : "#/components/schemas/Map"
          },
          "statuses" : {
            "description" : "Statuses of the requests.",
            "allOf" : [ {
              "$ref" : "#/components/schemas/Map"
            } ]
          },
          "timestamp" : {
            "type" : "integer",
            "format" : "int64"
          }
        }
      },
      "RenamingMethod" : {
        "type" : "object",
        "properties" : {
          "cftValue" : {
            "type" : "string"
          }
        }
      },
      "SERIAL" : {
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "string"
          }
        }
      },
      "SFTPProtocol" : {
        "type" : "object",
        "properties" : {
          "active" : {
            "type" : "boolean",
            "description" : "Status of the protocol"
          },
          "keyAlias" : {
            "type" : "string"
          },
          "mode" : {
            "type" : "string",
            "description" : "Mode CLIENT, SERVER or BOTH",
            "enum" : [ "CLIENT", "SERVER", "BOTH" ]
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the protocol."
          },
          "net" : {
            "type" : "string",
            "description" : "Network name of the protocol."
          },
          "networkClass" : {
            "type" : "integer",
            "description" : "Network class of the protocol.",
            "format" : "int32"
          },
          "networkProtocol" : {
            "type" : "string",
            "description" : "Network type of the protocol.",
            "enum" : [ "TCP", "PTCP", "UDT" ]
          },
          "port" : {
            "type" : "integer",
            "description" : "Port of the protocol.",
            "format" : "int32"
          },
          "securityProfile" : {
            "type" : "string"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "UNDEPLOYED", "DEPLOYED", "DEPLOYING", "DEPLOYED_IN_ERROR", "REMOVING", "REMOVED_IN_ERROR", "DEPLOYED_NEEDS_RESTART", "REMOVED" ]
          },
          "type" : {
            "type" : "string",
            "description" : "Protocol type (PESIT / SFTP)",
            "enum" : [ "PESIT", "SFTP" ]
          }
        }
      },
      "STATE" : {
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "string"
          }
        }
      },
      "SYST" : {
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "string"
          }
        }
      },
      "StatusEnum" : {
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "string"
          }
        }
      },
      "SubmissionMethod" : {
        "type" : "object",
        "properties" : {
          "cftValue" : {
            "type" : "string"
          }
        }
      },
      "T" : {
        "type" : "object",
        "properties" : { }
      },
      "TCYCLE" : {
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "string"
          }
        }
      },
      "TRK" : {
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "string"
          }
        }
      },
      "TypeEnum" : {
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "string"
          }
        }
      }
    }
  },
  "openapi" : "3.0.9"
}