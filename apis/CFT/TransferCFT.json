{
  "openapi": "3.0.3",
  "info": {
    "title": "AMPLIFY Transfer CFT API v1.7",
    "description": "- New features in v1.7\n  - Improved OpenAPI definitions\n    - Added operid on all requests\n    - Use of \"oneOf\" for cftprot, cftcom and cftaccnt objects\n  - New query parameters for \"Get /transfers\"\n  - New CFTUIPREF object (experimental)\n- New features in v1.6\n  - Reconfig commands added\n  - Act/inact action on objects CFTPART, CFTFOLDER, CFTRON\n- New features in v1.5\n  - PKI Administration commands\n  - Multi-node commands\n  - New Parameters for CFTCOM, CFTSEND, CFTFOLDER\n- New features in v1.4\n  - Administration commands\n  - CFTIDF and CFTXLATE objects (Miscellaneous)\n  - Login/Logout (Miscellaneous)\n  - Bearer authentication",
    "version": "1.7.0",
    "x-audience": "axway-customer",
    "x-api-id": "ff04f643-16f3-4a6e-a9b7-9e24f9bc854c",
    "contact": {
      "email": "support@axway.com"
    },
    "license": {
      "name": "Copyright Axway 2021. All rights reserved."
    }
  },
  "servers": [
    {
      "url": "https://ptx140.demo.axway.com:2768/cft/api/v1"
    }
  ],
  "tags": [
    {
      "name": "Transfers",
      "description": "Manages transfers"
    },
    {
      "name": "Logs",
      "description": "Displays the log"
    },
    {
      "name": "Access Management",
      "description": "Manages role and privilege definitions"
    },
    {
      "name": "Flows",
      "description": "Manages flow-related definitions"
    },
    {
      "name": "General Parameters",
      "description": "Manages general settings"
    },
    {
      "name": "Partners",
      "description": "Manages partner definitions"
    },
    {
      "name": "PKI",
      "description": "Manages Transfer CFT PKI database"
    },
    {
      "name": "Networks and Protocols",
      "description": "Manages network and protocol definitions"
    },
    {
      "name": "Administration",
      "description": "Administration operations"
    },
    {
      "name": "Miscellaneous",
      "description": "Other operations"
    }
  ],
  "security": [
    {
      "basicAuth": []
    },
    {
      "bearerAuth": []
    }
  ],
  "paths": {
    "/about": {
      "get": {
        "tags": [
          "Miscellaneous"
        ],
        "summary": "Gets the version of Transfer CFT  (experimental).",
        "operationId": "AboutGet",
        "description": "Get the version of Transfer CFT",
        "responses": {
          "200": {
            "description": "Informations about Transfer CFT",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "version": {
                      "type": "string",
                      "description": "the version of CFT"
                    },
                    "level": {
                      "type": "string",
                      "description": "the level of CFT, SP and patch"
                    },
                    "system": {
                      "type": "string",
                      "description": "System running CFT"
                    },
                    "server_time": {
                      "type": "string",
                      "description": "Local time on CFT server"
                    },
                    "server_utc": {
                      "type": "string",
                      "description": "UTC Timezone on CFT server"
                    },
                    "multinode_enabled": {
                      "type": "boolean",
                      "description": "CFT is in mutinode mode"
                    },
                    "cg_enabled": {
                      "type": "boolean",
                      "description": "CFT is controlled by CG"
                    },
                    "ui_readonly": {
                      "type": "boolean",
                      "description": "Indicate if CFT UI allow command others than view or CFT objects definitions."
                    },
                    "instance_id": {
                      "type": "string",
                      "description": "The instance ID of CFT"
                    },
                    "user_name": {
                      "type": "string",
                      "description": "Name of connected user"
                    }
                  },
                  "example": {
                    "version": "3.8",
                    "level": "",
                    "system": "unix",
                    "server_time": "1526301034000",
                    "server_utc": "2",
                    "multinode_enabled": false,
                    "cg_enabled": false,
                    "ui_readonly": true,
                    "instance_id": "workstationaddress",
                    "user_name": "johndoe"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/logs": {
      "get": {
        "tags": [
          "Logs"
        ],
        "summary": "Retrieves a list of log messages",
        "operationId": "LogsGet",
        "description": "Retrieves a list of log messages",
        "parameters": [
          {
            "name": "severity",
            "in": "query",
            "description": "Severity of the log to return",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "maxLength": 1,
              "enum": [
                "F",
                "E",
                "W",
                "I"
              ]
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of lines to display  (entering zero uses the default value)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "maximum": 10000,
              "default": 10000
            }
          },
          {
            "name": "datetimemin",
            "in": "query",
            "description": "Use to display logs that happened on or after this start date and time YYYY-MM-DDThh:mm:ssZ",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "minLength": 20,
              "maxLength": 20
            }
          },
          {
            "name": "datetimemax",
            "in": "query",
            "description": "Use to display logs that happened on or before this end date and time YYYY-MM-DDThh:mm:ssZ",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "minLength": 20,
              "maxLength": 20
            }
          },
          {
            "name": "pattern",
            "in": "query",
            "description": "Only displays the log lines that match this specific pattern ; enter any pattern with a maximum of 63 characters",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "maxLength": 63
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of log messages",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "logs": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "node": {
                            "type": "string",
                            "description": "the Transfer CFT node"
                          },
                          "severity": {
                            "type": "string",
                            "description": "message severity"
                          },
                          "code": {
                            "type": "string",
                            "description": "message code"
                          },
                          "date": {
                            "type": "string",
                            "description": "message type"
                          },
                          "message": {
                            "type": "string",
                            "description": "the message"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/transfers": {
      "get": {
        "tags": [
          "Transfers"
        ],
        "summary": "Retrieves a list of transfers",
        "operationId": "TransfersGet",
        "description": "<p>\n  Retrieves a list of transfers.\n  <br>\n  If no fields are given in the request, the default value for the field is still sent by the server.\n  <br>\n  numberOfSelectedRecords count specifies the number of transfers corresponding to the selection.\n  <br>\n  numberOfUsedRecords count specifies the number of transfers currently present in the catalog.\n  <br>\n  The model below represents the response when the default fields are selected. Any field which appears in the get/idtu response can be selected.\n</p>",
        "parameters": [
          {
            "name": "ida",
            "in": "query",
            "description": "Transfer-related identifier.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "maxLength": 64
            }
          },
          {
            "name": "idtu",
            "in": "query",
            "description": "Transfer ID.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "pattern": "[A-Z][A-Z0-9]{7}",
              "minLength": 8,
              "maxLength": 8
            }
          },
          {
            "name": "idt",
            "in": "query",
            "description": "Protocol transfer ID.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "pattern": "[A-Z][0-9]{7}",
              "minLength": 8,
              "maxLength": 8
            }
          },
          {
            "name": "nidt",
            "in": "query",
            "description": "Network protocol transfer ID.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "pattern": "[A-Z][0-9]{7}",
              "minLength": 8,
              "maxLength": 8
            }
          },
          {
            "name": "part",
            "in": "query",
            "description": "Partner associated with the transfer.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "maxLength": 64
            }
          },
          {
            "name": "idf",
            "in": "query",
            "description": "Flow ID.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "maxLength": 32
            }
          },
          {
            "name": "phase",
            "in": "query",
            "description": "Transfer phase.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "A",
                "T",
                "Y",
                "Z",
                "X"
              ],
              "minLength": 1,
              "maxLength": 1
            }
          },
          {
            "name": "phasestep",
            "in": "query",
            "description": "Transfer phasestep.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "D",
                "C",
                "E",
                "K",
                "H",
                "X"
              ],
              "minLength": 1,
              "maxLength": 1
            }
          },
          {
            "name": "diagi",
            "in": "query",
            "description": "Diagnostic code selection (Default None)\n- 0 Only sucessfull transfers\n- -1 Only transfers in error\n- nnn Transfers in error with the specified code",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": -1,
              "maximum": 999
            }
          },
          {
            "name": "suser",
            "in": "query",
            "description": "The user who is sending the file.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "maxLength": 32
            }
          },
          {
            "name": "ruser",
            "in": "query",
            "description": "The user who is receiving the file.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "maxLength": 32
            }
          },
          {
            "name": "direct",
            "in": "query",
            "description": "Transfer direction.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "BOTH",
                "SEND",
                "RECV"
              ]
            }
          },
          {
            "name": "sentinel",
            "in": "query",
            "description": "Use to select the transfers whose Sentinel state coresponds to one the following values:          \n-  TO_EXECUTE, CREATED, SENDING, RECEIVING, SENT, RECEIVED\n-  ACKED,  NACKED, ENDED_TO_ACK, ENDED_TO_NACK, TO_ROUTE\n-  CONSUMED, CANCELED, SUSPENDED, INTERRUPTED\n-  PRE_PROC, PRE_PROC_ABORT,\n-  POST_PROC, POST_PROC_ABORT, POST_PROC_ACK, POST_PROC_ACK_ABORT\n-  AVAILABLE, ACK_EXPECTED, COMPLETED, ROUTED            ",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "minItems": 1,
              "maxItems": 30,
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "datetimemin",
            "in": "query",
            "description": "Use to select the transfers created on or after this start date and time.\nTwo formats are accepted\n- absolute, format is the standard date-time\n\n  ex 2021-01-31T23:10:50\n- relative to current date/time, format is -nn(t) where t is D(d)ays, M(m)inutes or H(h)ours. D is the default.\n\n  ex -30M for last 30 minutes",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "maxLength": 19
            }
          },
          {
            "name": "datetimemax",
            "in": "query",
            "description": "Use to select the transfers created on or before this end date and time.\nTwo formats are accepted\n- absolute, format is the standard date-time\n\n  ex 2021-01-31T23:10:50\n- relative to current date/time, format is -nn(t) where t is D(d)ays, M(m)inutes or H(h)ours. D is the default.\n\n  ex -30M for last 30 minutes",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "maxLength": 19
            }
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Catalog offset.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of transfers to return.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of transfers.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "transfers": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/TransferDetailsList"
                      }
                    },
                    "numberOfSelectedRecords": {
                      "type": "integer",
                      "description": "Number of selected catalog records."
                    },
                    "numberOfUsedRecords": {
                      "type": "integer",
                      "description": "Number of used records in the catalog file."
                    },
                    "numberOfRecords": {
                      "type": "integer",
                      "description": "Total number of records in the catalog file."
                    },
                    "offset": {
                      "type": "integer",
                      "description": "Catalog offset integer."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/transfers/{idtu}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/idtu"
        }
      ],
      "get": {
        "tags": [
          "Transfers"
        ],
        "summary": "Retrieves a given transfer",
        "operationId": "TransferIdtuGet",
        "description": "Retrieves a given transfer.",
        "responses": {
          "200": {
            "description": "Transfer details upon successful query.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransferDetails"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/TransferNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      },
      "delete": {
        "tags": [
          "Transfers"
        ],
        "summary": "Deletes a given transfer",
        "operationId": "TransferIdtuDelete",
        "description": "Deletes a given transfer.",
        "responses": {
          "200": {
            "description": "Successfully deleted the transfer."
          },
          "202": {
            "description": "The command was accepted, but not executed."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/TransferNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/transfers/{idtu}/halt": {
      "parameters": [
        {
          "$ref": "#/components/parameters/idtu"
        }
      ],
      "put": {
        "tags": [
          "Transfers"
        ],
        "summary": "Interrupts a given transfer",
        "operationId": "TransferIdtuHaltPut",
        "description": "Interrupts a given transfer. The interrupted transfer is set to H phasestep.",
        "responses": {
          "200": {
            "description": "Transfer interrupted."
          },
          "202": {
            "description": "The command was accepted, but not executed."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/TransferNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/transfers/{idtu}/keep": {
      "parameters": [
        {
          "$ref": "#/components/parameters/idtu"
        }
      ],
      "put": {
        "tags": [
          "Transfers"
        ],
        "summary": "Suspends a given transfer",
        "operationId": "TransferIdtuKeepPut",
        "description": "Suspends a given transfer. The suspended transfer is set to K phasestep.",
        "responses": {
          "200": {
            "description": "Transfer suspended."
          },
          "202": {
            "description": "The command was accepted, but not executed"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/TransferNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/transfers/{idtu}/start": {
      "parameters": [
        {
          "$ref": "#/components/parameters/idtu"
        }
      ],
      "put": {
        "tags": [
          "Transfers"
        ],
        "summary": "Restarts a given transfer",
        "operationId": "TransferIdtuRestartPut",
        "description": "Restarts a given transfer. Transfers in the H or K phasestep in the catalog change to the D phasestep after this command is executed.",
        "responses": {
          "200": {
            "description": "Transfer restarted."
          },
          "202": {
            "description": "The command was accepted, but not executed."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/TransferNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/transfers/{idtu}/resume": {
      "parameters": [
        {
          "$ref": "#/components/parameters/idtu"
        }
      ],
      "put": {
        "tags": [
          "Transfers"
        ],
        "summary": "Resumes a given transfer",
        "operationId": "TransferIdtuResumePut",
        "description": "Resumes a given transfer. This command retrieves, in server mode, a blocked send request that has a hold phasestep, and has a diagnostic codes other than zero.",
        "responses": {
          "200": {
            "description": "Resumed transfer."
          },
          "202": {
            "description": "The command was accepted, but not executed."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/TransferNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/transfers/{idtu}/submit": {
      "parameters": [
        {
          "$ref": "#/components/parameters/idtu"
        }
      ],
      "put": {
        "tags": [
          "Transfers"
        ],
        "summary": "Submits a processing procedure for a given transfer",
        "operationId": "TransferIdtuSubmitPut",
        "description": "Submits a processing procedure for a given transfer. <br> You can start, or restart, this procedure when the file or message transfer is in the T phasestep. <br> This command has no effect on transfers belonging to a broadcasting list, even if these transfers are in the T phasestep. <br> Alternatively, it can be applied to a generic transfer, whose PART parameter equals the broadcasting list identifier, when it is in the T phasestep.",
        "responses": {
          "200": {
            "description": "Submitted procedure."
          },
          "202": {
            "description": "The command was accepted, but not executed."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/TransferNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/transfers/{idtu}/ack": {
      "parameters": [
        {
          "$ref": "#/components/parameters/idtu"
        }
      ],
      "put": {
        "tags": [
          "Transfers"
        ],
        "summary": "Acknowledges a given transfer",
        "operationId": "TransferIdtuAckPut",
        "description": "Acknowledges a given transfer. This command initiates the sending of a positive acknowledgement to the remote partner. <br> You MUST provide the MSG field in the body.",
        "parameters": [
          {
            "name": "idm",
            "in": "query",
            "description": "Message identifier.",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "maxLength": 32
            }
          }
        ],
        "requestBody": {
          "description": "Transfer parameters.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransferRequestSendReplyBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Acknowledged the transfer."
          },
          "202": {
            "description": "The command was accepted, but not executed."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/TransferNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/transfers/{idtu}/nack": {
      "parameters": [
        {
          "$ref": "#/components/parameters/idtu"
        }
      ],
      "put": {
        "tags": [
          "Transfers"
        ],
        "summary": "Acknowledges negatively a given transfer",
        "operationId": "TransferIdtuNackPut",
        "description": "Negatively acknowledges a given transfer. This command initiates the sending of a negative acknowledgement to the remote partner. <br> You MUST provide the MSG field in the body.",
        "parameters": [
          {
            "name": "idm",
            "in": "query",
            "description": "Message identifier.",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "maxLength": 32
            }
          }
        ],
        "requestBody": {
          "description": "Transfer parameters.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransferRequestSendNackBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Completed negative acknowledgement."
          },
          "202": {
            "description": "The command was accepted, but not executed."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/TransferNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/transfers/{idtu}/end": {
      "parameters": [
        {
          "$ref": "#/components/parameters/idtu"
        }
      ],
      "put": {
        "tags": [
          "Transfers"
        ],
        "summary": "Ends a given transfer",
        "operationId": "TransferIdtuEndPut",
        "description": "Ends a given transfer.",
        "requestBody": {
          "description": "Transfer parameters.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransferRequestEndBody"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Ended transfer."
          },
          "202": {
            "description": "The command was accepted, but not executed."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/TransferNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/transfers/files/outgoings": {
      "post": {
        "tags": [
          "Transfers"
        ],
        "summary": "Creates a new send file transfer request",
        "operationId": "TransferFilesOutgoingPost",
        "description": "Creates a new send file transfer request <br> If the IDA is not given in the request, it is generated by the server and returned if the operation is successful (code 201) or accepted (code 202).",
        "parameters": [
          {
            "name": "part",
            "in": "query",
            "description": "Partner.",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "maxLength": 64
            }
          },
          {
            "name": "idf",
            "in": "query",
            "description": "Flow ID.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "maxLength": 32
            }
          },
          {
            "name": "apitimeout",
            "in": "query",
            "description": "Command timeout.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": -1,
              "maximum": 120
            }
          }
        ],
        "requestBody": {
          "description": "Send transfer request parameters.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransferRequestSendFileBody"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "The transfer is a duplicate, but as DACTION parameter was set to RESUME the request is valid but no new entry is added in the catalog. The body response contains the original transfer information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransferRequestResult"
                }
              }
            }
          },
          "201": {
            "description": "Return transfer information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransferRequestResult"
                }
              }
            }
          },
          "202": {
            "description": "Accepted, but processing not complete.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransferRequestResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/transfers/files/incomings": {
      "post": {
        "tags": [
          "Transfers"
        ],
        "summary": "Creates a new receive file transfer request",
        "operationId": "TransferFilesIncomingPost",
        "description": "Creates a new receive file transfer request. <br> If the IDA is not given in the request, it is generated by the server and returned if operation is successful (code 201) or accepted (code 202).",
        "parameters": [
          {
            "name": "part",
            "in": "query",
            "description": "Partner.",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "maxLength": 64
            }
          },
          {
            "name": "idf",
            "in": "query",
            "description": "Flow ID.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "maxLength": 32
            }
          },
          {
            "name": "apitimeout",
            "in": "query",
            "description": "Command timeout.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": -1,
              "maximum": 120
            }
          }
        ],
        "requestBody": {
          "description": "Receive transfer request parameters.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransferRequestReceiveFileBody"
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "description": "Transfer details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransferRequestResult"
                }
              }
            }
          },
          "202": {
            "description": "Accepted, but processing not completed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransferRequestResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/transfers/messages": {
      "post": {
        "tags": [
          "Transfers"
        ],
        "summary": "Creates a new message transfer request",
        "operationId": "TransferMessagesPost",
        "description": "Creates a new message transfer request. <br> If the IDA is not given in the request, it is generated by the server and returned if operation is successful (code 201) or accepted (code 202). <br> You MUST provide the MSG field in the body.",
        "parameters": [
          {
            "name": "part",
            "in": "query",
            "description": "Partner.",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "maxLength": 64
            }
          },
          {
            "name": "idm",
            "in": "query",
            "description": "Message ID.",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "maxLength": 32
            }
          },
          {
            "name": "apitimeout",
            "in": "query",
            "description": "Command timeout.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": -1,
              "maximum": 120
            }
          }
        ],
        "requestBody": {
          "description": "Message transfer request parameters.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransferRequestSendMessageBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Transfer details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransferRequestResult"
                }
              }
            }
          },
          "202": {
            "description": "Accepted, but processing not completed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransferRequestResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/objects": {
      "get": {
        "tags": [
          "Miscellaneous"
        ],
        "summary": "Retrieves all Transfer CFT configuration objects.",
        "operationId": "ObjectsGet",
        "description": "Retrieves all Transfer CFT configuration objects.",
        "parameters": [
          {
            "$ref": "#/components/parameters/selectanyid"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of objects",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "links": {
                      "$ref": "#/components/schemas/ObjectSelfLinks"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "type",
                          "id",
                          "attributes"
                        ],
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "type": {
                            "$ref": "#/components/schemas/CftEnumObjectsType"
                          },
                          "attributes": {
                            "$ref": "#/components/schemas/CftEnumObjectsTypeSchema"
                          },
                          "links": {
                            "$ref": "#/components/schemas/ObjectSelfLinks"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftuconf": {
      "get": {
        "tags": [
          "General Parameters"
        ],
        "summary": "Retrieves a list of cftuconf parameters.",
        "operationId": "ObjectsCftuconfGet",
        "description": "Retrieves a list of cftuconf parameters.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Uconf parameter ID.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "minLength": 1,
              "maxLength": 512
            }
          },
          {
            "name": "scope",
            "in": "query",
            "description": "Filter according to the UCONF setting.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "ALL",
                "USER",
                "DEFAULT"
              ]
            }
          },
          {
            "name": "content",
            "in": "query",
            "description": "Information details.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "BRIEF",
                "FULL"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of cftuconf parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftuconfList"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftuconf/{uconfid}": {
      "parameters": [
        {
          "name": "uconfid",
          "in": "path",
          "description": "Uconf parameter ID.",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "type": "string",
            "minLength": 1,
            "maxLength": 512
          }
        }
      ],
      "get": {
        "tags": [
          "General Parameters"
        ],
        "summary": "Retrieves the cftuconf parameter.",
        "operationId": "ObjectsCftuconfIdGet",
        "description": "Retrieves the cftuconf parameter.",
        "responses": {
          "200": {
            "description": "cftuconf parameter details upon successful query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftuconfGet"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      },
      "put": {
        "tags": [
          "General Parameters"
        ],
        "summary": "Modifies the cftuconf parameter.",
        "operationId": "ObjectsCftuconfIdPut",
        "description": "Modifies the cftuconf parameter.",
        "requestBody": {
          "description": "cftuconf object parameters.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "type",
                  "id",
                  "attributes"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "cftuconf"
                    ]
                  },
                  "id": {
                    "$ref": "#/components/schemas/CftObjectUconfId"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/CftObjectsCftuconfSet"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "cftuconf parameter details upon successful modification",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftuconfGet"
                }
              }
            }
          },
          "201": {
            "description": "cftuconf parameter details upon successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftuconfGet"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      },
      "delete": {
        "tags": [
          "General Parameters"
        ],
        "summary": "Resets the parameter to the default value.",
        "operationId": "ObjectsCftuconfIdDelete",
        "description": "Resets the parameter to the default value.",
        "responses": {
          "200": {
            "$ref": "#/components/responses/ObjectDeleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/cft/state": {
      "get": {
        "tags": [
          "Administration"
        ],
        "summary": "Transfer CFT Status",
        "operationId": "CftStateGet",
        "description": "Transfer CFT Status",
        "responses": {
          "200": {
            "$ref": "#/components/responses/CftCmdStateDetails"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "Transfer CFT not running."
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/cft/start": {
      "put": {
        "tags": [
          "Administration"
        ],
        "summary": "Starts Transfer CFT",
        "operationId": "CftStartPut",
        "description": "Starts Transfer CFT",
        "responses": {
          "202": {
            "description": "Command in progress."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/cft/stop": {
      "put": {
        "tags": [
          "Administration"
        ],
        "summary": "Stops the Transfer CFT",
        "operationId": "CftStopPut",
        "description": "Stop Transfer CFT. Transfers in progress are stopped.",
        "responses": {
          "202": {
            "description": "Command in progress."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/cft/restart": {
      "put": {
        "tags": [
          "Administration"
        ],
        "summary": "Stops and restarts the Transfer CFT",
        "operationId": "CftRestartPut",
        "description": "Stops and restarts the Transfer CFT",
        "responses": {
          "202": {
            "description": "Command in progress."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/cft/nodes": {
      "get": {
        "tags": [
          "Administration"
        ],
        "summary": "Lists the Transfer CFT nodes",
        "operationId": "CftNodesGet",
        "description": "Lists the Transfer CFT nodes",
        "responses": {
          "200": {
            "$ref": "#/components/responses/CftCmdNodesList"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "Transfer CFT not running."
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      },
      "post": {
        "tags": [
          "Administration"
        ],
        "summary": "Adds a new Transfer CFT node (multinode instance only)",
        "operationId": "CftNodesPost",
        "description": "Adds a new Transfer CFT node (multinode instance only)",
        "responses": {
          "200": {
            "description": "new Node added."
          },
          "201": {
            "$ref": "#/components/responses/CftCmdNodeDetails"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/cft/nodes/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/nodeid"
        }
      ],
      "delete": {
        "tags": [
          "Administration"
        ],
        "summary": "Deletes the node (multinode instance only)",
        "operationId": "CftNodesIdDelete",
        "description": "Remove a node, the node must be stopped first and then disabled.",
        "responses": {
          "200": {
            "description": "Node Deleted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/cft/nodes/{id}/disable": {
      "parameters": [
        {
          "$ref": "#/components/parameters/nodeid"
        }
      ],
      "put": {
        "tags": [
          "Administration"
        ],
        "summary": "Disables node (multinode instance only)",
        "operationId": "CftNodesIdDisablePut",
        "description": "Disables node (multinode instance only)",
        "responses": {
          "202": {
            "description": "Command in progress."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/cft/nodes/{id}/enable": {
      "parameters": [
        {
          "$ref": "#/components/parameters/nodeid"
        }
      ],
      "put": {
        "tags": [
          "Administration"
        ],
        "summary": "Enables node (multinode instance only)",
        "operationId": "CftNodesIdEnablePut",
        "description": "Enables node (multinode instance only)",
        "responses": {
          "202": {
            "description": "Command in progress."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/cft/nodes/{id}/start": {
      "parameters": [
        {
          "$ref": "#/components/parameters/nodeid"
        }
      ],
      "put": {
        "tags": [
          "Administration"
        ],
        "summary": "Starts the node (multinode instance only)",
        "operationId": "CftNodesIdStartPut",
        "description": "Starts the node (multinode instance only)",
        "responses": {
          "202": {
            "description": "Command in progress."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/cft/nodes/{id}/stop": {
      "parameters": [
        {
          "$ref": "#/components/parameters/nodeid"
        }
      ],
      "put": {
        "tags": [
          "Administration"
        ],
        "summary": "Stops the node (multinode instance only)",
        "operationId": "CftNodesIdStopPut",
        "description": "Stop the node. Transfers in progress are stopped.",
        "responses": {
          "202": {
            "description": "Command in progress."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/cft/nodes/{id}/restart": {
      "parameters": [
        {
          "$ref": "#/components/parameters/nodeid"
        }
      ],
      "put": {
        "tags": [
          "Administration"
        ],
        "summary": "Stops and restarts the node (multinode instance only)",
        "operationId": "CftNodesIdRestartPut",
        "description": "Stops and restarts the node (multinode instance only)",
        "responses": {
          "202": {
            "description": "Command in progress."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/cft/hosts": {
      "get": {
        "tags": [
          "Administration"
        ],
        "summary": "Lists the hostnames",
        "operationId": "CftHostsGet",
        "description": "List the hostnames on which the Transfer CFT nodes may run.",
        "responses": {
          "200": {
            "$ref": "#/components/responses/CftCmdHostsList"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "Transfer CFT not running."
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      },
      "post": {
        "tags": [
          "Administration"
        ],
        "summary": "Adds a new hostname (multinode instance only)",
        "operationId": "CftHostsPost",
        "description": "Add a new host on which the Transfer CFT nodes may run.",
        "requestBody": {
          "description": "Host request parameters.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CftCmdNewHostDetails"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "New hostname added."
          },
          "201": {
            "$ref": "#/components/responses/CftCmdHostDetails"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/cft/hosts/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/hostid"
        }
      ],
      "delete": {
        "tags": [
          "Administration"
        ],
        "summary": "Removes a hostname (multinode instance only)",
        "operationId": "CftHostsIdDelete",
        "description": "Removes a hostname. Transfer CFT nodes can no longer run on the host.",
        "responses": {
          "200": {
            "description": "Host Deleted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/cft/reconfig/am": {
      "put": {
        "tags": [
          "Administration"
        ],
        "summary": "Reloads security roles and privileges.",
        "operationId": "CftReconfigAmPut",
        "description": "The security roles and privileges are reloaded by the server.\n",
        "responses": {
          "202": {
            "description": "Command accepted"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/cft/reconfig/cron": {
      "put": {
        "tags": [
          "Administration"
        ],
        "summary": "Reloads CFTCRON objects.",
        "operationId": "CftReconfigCronPut",
        "description": "<p>The server reloads the active CFTCRON objects. You must execute this command if a CFTCRON object has been modified by:</p>\n<ul>\n<li>Inserting a new cronjob (with a CRONTAB value that matches the CRONTABS list)</li>\n<li>Deleting a new cronjob</li>\n<li>Modifying a cronjob</li>\n</ul>\n<p>Messages are then displayed in the log (CFTI36I and CFTI37I)</p>\n",
        "responses": {
          "202": {
            "description": "Command accepted"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/cft/reconfig/folder": {
      "put": {
        "tags": [
          "Administration"
        ],
        "summary": "Reloads CFTFOLDER objects.",
        "operationId": "CftReconfigFolderPut",
        "description": "The server reloads the active CFTFOLDER objects.\n",
        "responses": {
          "202": {
            "description": "Command accepted"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/cft/reconfig/parmcache": {
      "put": {
        "tags": [
          "Administration"
        ],
        "summary": "Reloads cft objects cache.",
        "operationId": "CftReconfigParmcachePut",
        "description": "Clear the dynamic objects cache while Transfer CFT is running.\\\nAfter the command execution, all changes applied to dynamic objects are taken into account, without restarting Transfer CFT.\n",
        "responses": {
          "202": {
            "description": "Command accepted"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/cft/reconfig/uconf": {
      "put": {
        "tags": [
          "Administration"
        ],
        "summary": "Reloads UCONF reconfigurable parameters.",
        "operationId": "CftReconfigUconfPut",
        "description": "The UCONF reconfigurable parameters are reloaded.\\\nMessages are then displayed in the log (CFTS43I).\\\nNote that only the UCONF parameters flagged with RECONFIG/IRECONFIG are affected.\n",
        "responses": {
          "202": {
            "description": "Command accepted"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/cft/container/export": {
      "put": {
        "tags": [
          "Administration"
        ],
        "summary": "Dump the databases. (experimental)",
        "operationId": "CftContainerExportPut",
        "description": "In the container deployment context this service allows to dump the databases prior to upgrade the Transfer CFT service.",
        "responses": {
          "200": {
            "description": "Databases successfully exported."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/login": {
      "post": {
        "tags": [
          "Miscellaneous"
        ],
        "summary": "Login",
        "operationId": "loginPost",
        "description": "Log on the API server and receive a session token that is used by the Transfer CFT Web-based UI.\\\nThis resource is reserved for the Transfer CFT Web-based UI.\\\nAs an application, you must use an API token instead of a session token.\\\nFor application authentication, please refer to the Client Authentication topic in the User Guide, or refer to the /objects/cfttoken resource.",
        "responses": {
          "200": {
            "description": "Login Information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftLoginDetails"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/logout": {
      "get": {
        "tags": [
          "Miscellaneous"
        ],
        "summary": "Logout.",
        "operationId": "LogoutGet",
        "description": "Close the current session with the API server.\\\nThe session token becomes invalid and cannot be used for future calls.",
        "responses": {
          "200": {
            "$ref": "#/components/responses/ObjectDeleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftpart": {
      "get": {
        "tags": [
          "Partners"
        ],
        "summary": "Retrieves the partner lists",
        "operationId": "BUILD_ObjectsCftpartGet",
        "description": "<p>\nRetrieves a list of CFTPART objects.\n</p>",
        "parameters": [
          {
            "$ref": "#/components/parameters/selectpartid"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of cftpart",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftpartList"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      },
      "post": {
        "tags": [
          "Partners"
        ],
        "summary": "Adds a new partner",
        "operationId": "BUILD_ObjectIdCftpartPost",
        "description": "Adds a new CFTPART object.",
        "requestBody": {
          "description": "cftpart object parameters.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "type",
                  "id",
                  "attributes"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "cftpart"
                    ]
                  },
                  "id": {
                    "$ref": "#/components/schemas/CftPartnerId"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/CftObjectsCftpartAttributes"
                  }
                },
                "example": {
                  "id": "paris",
                  "type": "cftpart",
                  "attributes": {
                    "prot": [
                      "pesit"
                    ],
                    "comment": "Definition sample",
                    "idf": "txt"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "cftpart details upon successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftpartGet"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftpart/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/objectpartid"
        }
      ],
      "get": {
        "tags": [
          "Partners"
        ],
        "summary": "Retrieves a specific partner definition",
        "operationId": "BUILD_ObjectsIdCftpartGet",
        "description": "<p>\nRetrieves a specific CFTPART object.\n</p>",
        "responses": {
          "200": {
            "description": "cftpart details upon successful query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftpartGet"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      },
      "put": {
        "tags": [
          "Partners"
        ],
        "summary": "Adds or modifies a partner definition.",
        "operationId": "BUILD_ObjectIdCftpartPut",
        "description": "Adds or modifies a partner definition.",
        "requestBody": {
          "description": "cftpart object parameters.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "type",
                  "id",
                  "attributes"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "cftpart"
                    ]
                  },
                  "id": {
                    "$ref": "#/components/schemas/CftPartnerId"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/CftObjectsCftpartAttributes"
                  }
                },
                "example": {
                  "id": "paris",
                  "type": "cftpart",
                  "attributes": {
                    "prot": [
                      "pesit"
                    ],
                    "comment": "Definition sample",
                    "idf": "txt"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "cftpart details upon successful modification",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftpartGet"
                }
              }
            }
          },
          "201": {
            "description": "cftpart details upon successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftpartGet"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      },
      "delete": {
        "tags": [
          "Partners"
        ],
        "summary": "Deletes a partner definition",
        "operationId": "BUILD_ObjectIdCftpartDelete",
        "description": "Deletes a CFTPART object.\nThis operation deletes all existing TCP definitions related to the partner to delete.",
        "responses": {
          "200": {
            "$ref": "#/components/responses/ObjectDeleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftpart/{id}/act": {
      "parameters": [
        {
          "$ref": "#/components/parameters/objectpartid"
        }
      ],
      "put": {
        "tags": [
          "Partners"
        ],
        "summary": "Reactivates a partner definition.",
        "operationId": "ObjectsCftpartIdActPut",
        "description": "The ACT command cannot be applied to the partner if its definition was provided or modified by a directory EXIT.\nWhen the partner is reactivated, transfer requests that were suspended by the INACT command:\n- Are restarted automatically in requester mode (diagnostics code 430)\n- Must be restarted with the START command in all other cases",
        "requestBody": {
          "description": "Optional Parameters.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CftObjectsCftPartActDetails"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Definition has status ACT."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftpart/{id}/inact": {
      "parameters": [
        {
          "$ref": "#/components/parameters/objectpartid"
        }
      ],
      "put": {
        "tags": [
          "Partners"
        ],
        "summary": "Deactivates a partner definition.",
        "operationId": "ObjectsCftpartIdInactPut",
        "description": "When a partner is deactivated, transfers awaiting processing are:\n- Suspended in requester mode\n- Refused in server mode\n\nThe state of a transfer request awaiting execution in **requester mode** for a deactivated partner remains **D**, with a diagnostic code **430** and a protocol diagnostic **INACT**.\\\nThe state of a transfer request awaiting execution in **server mode** for a deactivated partner remains **D**, with a diagnostic code **930** and a protocol diagnostic **RCO 312**, or **ABO 312** if the session is already open.\\\nThe state of transfers that are interrupted by an INACT command when *FORCE=YES* is **H**, with a diagnostic code **121** and a protocol diagnostic **OPER**.\\\nThis command cannot be applied to partners whose definition was provided or modified by a directory EXIT.\\\nA partner that has been deactivated by the INACT command can only be reactivated using the ACT command.",
        "requestBody": {
          "description": "Optional Parameters.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CftObjectsCftPartInactDetails"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Definition has status INACT."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftpart/{partnerid}/tcp": {
      "parameters": [
        {
          "$ref": "#/components/parameters/partnerid"
        }
      ],
      "get": {
        "tags": [
          "Partners"
        ],
        "summary": "Retrieves all partner TCP definitions\"",
        "operationId": "BUILD_ObjectsCfttcpGet",
        "description": "Retrieves all CFTTCP objects.",
        "parameters": [
          {
            "$ref": "#/components/parameters/selectclass"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of cfttcp",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCfttcpList"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      },
      "post": {
        "tags": [
          "Partners"
        ],
        "summary": "Adds a new TCP definition for a partner connection",
        "operationId": "BUILD_ObjectIdCfttcpPost",
        "description": "Adds a new TCP definition for a partner connection",
        "requestBody": {
          "description": "cfttcp object parameters.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "type",
                  "id",
                  "attributes"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "cfttcp"
                    ]
                  },
                  "id": {
                    "$ref": "#/components/schemas/CftTcpClassId"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/CftObjectsCfttcpAttributes"
                  }
                },
                "example": {
                  "type": "cfttcp",
                  "id": "1",
                  "attributes": {
                    "cnxin": 2,
                    "cnxout": 2,
                    "comment": "Default destination for the Paris office",
                    "host": [
                      "paris.office"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "cfttcp details upon successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCfttcpGet"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftpart/{partnerid}/tcp/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/partnerid"
        },
        {
          "$ref": "#/components/parameters/classid"
        }
      ],
      "get": {
        "tags": [
          "Partners"
        ],
        "summary": "Retrieves a specific partner TCP definition",
        "operationId": "BUILD_ObjectsIdCfttcpGet",
        "description": "Retrieves a specific partner TCP definition",
        "responses": {
          "200": {
            "description": "cfttcp details upon successful query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCfttcpGet"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      },
      "put": {
        "tags": [
          "Partners"
        ],
        "summary": "Adds or modifies a TCP definition for a partner connection",
        "operationId": "BUILD_ObjectIdCfttcpPut",
        "description": "Adds or modifies a TCP definition for a partner connection",
        "requestBody": {
          "description": "cfttcp object parameters.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "type",
                  "id",
                  "attributes"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "cfttcp"
                    ]
                  },
                  "id": {
                    "$ref": "#/components/schemas/CftTcpClassId"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/CftObjectsCfttcpAttributes"
                  }
                },
                "example": {
                  "type": "cfttcp",
                  "id": "1",
                  "attributes": {
                    "cnxin": 2,
                    "cnxout": 2,
                    "comment": "Default destination for the Paris office",
                    "host": [
                      "paris.office"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "cfttcp details upon successful modification",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCfttcpGet"
                }
              }
            }
          },
          "201": {
            "description": "cfttcp details upon successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCfttcpGet"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      },
      "delete": {
        "tags": [
          "Partners"
        ],
        "summary": "Deletes a TCP definition associated with a partner",
        "operationId": "BUILD_ObjectIdCfttcpDelete",
        "description": "Deletes a TCP definition associated with a partner",
        "responses": {
          "200": {
            "$ref": "#/components/responses/ObjectDeleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftsend": {
      "get": {
        "tags": [
          "Flows"
        ],
        "summary": "Retrieves a list of send transfer models",
        "operationId": "BUILD_ObjectsCftsendGet",
        "description": "Retrieves a list of CFTSEND object, where either impl=no (client or server mode) or impl=yes (server mode).",
        "parameters": [
          {
            "$ref": "#/components/parameters/selectid"
          }
        ],
        "responses": {
          "200": {
            "description": "The send transfer model type (cftsendno and cftsendyes).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "links": {
                      "$ref": "#/components/schemas/ObjectSelfLinks"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "type",
                          "id",
                          "attributes"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "cftsendno",
                              "cftsendyes"
                            ]
                          },
                          "id": {
                            "type": "string"
                          },
                          "attributes": {
                            "$ref": "#/components/schemas/CftObjectsCftsendAttributes"
                          },
                          "links": {
                            "$ref": "#/components/schemas/ObjectSelfLinks"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "links": {
                    "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftsend"
                  },
                  "data": [
                    {
                      "type": "cftsendno",
                      "id": "sendanddelete",
                      "attributes": {
                        "delete": "YES",
                        "comment": "Send the file and delete the catalog record after completion",
                        "origin": "DESIGNER"
                      },
                      "links": {
                        "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftsend/implno/sendanddelete"
                      }
                    },
                    {
                      "type": "cftsendyes",
                      "id": "make_available",
                      "attributes": {
                        "fcode": "BINARY",
                        "frecfm": "F",
                        "faction": "NONE",
                        "STATE": "DISP",
                        "comment": "Make a file available when using Transfer CFT in server mode",
                        "origin": "DESIGNER"
                      },
                      "links": {
                        "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftsend/implyes/make_available"
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftsend/implno": {
      "get": {
        "tags": [
          "Flows"
        ],
        "summary": "Retrieves a list of send transfer models",
        "operationId": "BUILD_ObjectsCftsendnoGet",
        "description": "<p>\nRetrieves a list of CFTSEND objects.\n</p>",
        "parameters": [
          {
            "$ref": "#/components/parameters/selectid"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of cftsendno",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftsendListNo"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      },
      "post": {
        "tags": [
          "Flows"
        ],
        "summary": "Adds a new transfer model",
        "operationId": "BUILD_ObjectIdCftsendnoPost",
        "description": "Adds a new transfer model",
        "requestBody": {
          "description": "cftsendno object parameters.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "type",
                  "id",
                  "attributes"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "cftsendno"
                    ]
                  },
                  "id": {
                    "$ref": "#/components/schemas/CftObjectId"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/CftObjectsCftsendAttributes"
                  }
                },
                "example": {
                  "id": "sendanddelete",
                  "type": "cftsendno",
                  "attributes": {
                    "delete": "YES",
                    "comment": "Send the file and delete the catalog record after completion"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "cftsendno details upon successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftsendGetNo"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftsend/implno/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/objectid"
        }
      ],
      "get": {
        "tags": [
          "Flows"
        ],
        "summary": "Retrieves a specific send transfer model",
        "operationId": "BUILD_ObjectsIdCftsendnoGet",
        "description": "<p>\n  Retrieves a specific CFTSEND object.\n</p>",
        "responses": {
          "200": {
            "description": "cftsendno details upon successful query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftsendGetNo"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      },
      "put": {
        "tags": [
          "Flows"
        ],
        "summary": "Adds or modifies a transfer model",
        "operationId": "BUILD_ObjectIdCftsendnoPut",
        "description": "Adds or modifies a transfer model",
        "requestBody": {
          "description": "cftsendno object parameters.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "type",
                  "id",
                  "attributes"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "cftsendno"
                    ]
                  },
                  "id": {
                    "$ref": "#/components/schemas/CftObjectId"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/CftObjectsCftsendAttributes"
                  }
                },
                "example": {
                  "id": "sendanddelete",
                  "type": "cftsendno",
                  "attributes": {
                    "delete": "YES",
                    "comment": "Send the file and delete the catalog record after completion"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "cftsendno details upon successful modification",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftsendGetNo"
                }
              }
            }
          },
          "201": {
            "description": "cftsendno details upon successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftsendGetNo"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      },
      "delete": {
        "tags": [
          "Flows"
        ],
        "summary": "Deletes a send transfer model",
        "operationId": "BUILD_ObjectIdCftsendnoDelete",
        "description": "Deletes a send transfer model",
        "responses": {
          "200": {
            "$ref": "#/components/responses/ObjectDeleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftsend/implno/{idfsendid}/idf": {
      "parameters": [
        {
          "$ref": "#/components/parameters/idfsendid"
        }
      ],
      "get": {
        "tags": [
          "Flows"
        ],
        "summary": "Retrieves a list of cftidfsend objects.",
        "operationId": "BUILD_ObjectsCftidfsendGet",
        "description": "Retrieves a list of cftidfsend objects.",
        "parameters": [
          {
            "$ref": "#/components/parameters/selectid"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of cftidfsend",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftidfListSend"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      },
      "post": {
        "tags": [
          "Flows"
        ],
        "summary": "Creates a cftidfsend object.",
        "operationId": "BUILD_ObjectIdCftidfsendPost",
        "description": "Create a protocol alias for the destination when using the CFTSEND/IMPLNO or CFTSEND/IMPLYES definition referenced by <strong>idfsendid</strong>\n<strong>id</strong> corresponds to \"Local identifier of the partner\" for which the IDF/NIDF correspondence is valid. Same value as the value of the ID parameter of CFTPART.\nAttribute <strong>nidf</strong> corresponds to \"File network identifier\", the value which is sent over the network\"",
        "requestBody": {
          "description": "cftidfsend object parameters.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "type",
                  "id",
                  "attributes"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "cftidfsend"
                    ]
                  },
                  "id": {
                    "$ref": "#/components/schemas/CftObjectId"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/CftObjectsCftidfAttributes"
                  }
                },
                "example": {
                  "type": "cftidfsend",
                  "id": "paris",
                  "attributes": {
                    "nidf": "ALIAS_PARIS",
                    "comment": "When destination is PARIS overide the Identifier"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "cftidfsend details upon successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftidfGetSend"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftsend/implno/{idfsendid}/idf/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/idfsendid"
        },
        {
          "$ref": "#/components/parameters/idfpartid"
        }
      ],
      "get": {
        "tags": [
          "Flows"
        ],
        "summary": "Retrieves a given cftidfsend object.",
        "operationId": "BUILD_ObjectsIdCftidfsendGet",
        "description": "Retrieves a given cftidfsend object",
        "responses": {
          "200": {
            "description": "cftidfsend details upon successful query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftidfGetSend"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      },
      "put": {
        "tags": [
          "Flows"
        ],
        "summary": "Modifies or creates a cftidfsend object.",
        "operationId": "BUILD_ObjectIdCftidfsendPut",
        "description": "Modify a protocol alias for the destination when using the CFTSEND/IMPLNO or CFTSEND/IMPLYES definition referenced by <strong>idfsendid</strong>\n<strong>id</strong> corresponds to \"Local identifier of the partner\" for which the IDF/NIDF correspondence is valid. Same value as the value of the ID parameter of CFTPART.\nAttribute <strong>nidf</strong> corresponds to \"File network identifier\", the value which is sent over the network\"",
        "requestBody": {
          "description": "cftidfsend object parameters.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "type",
                  "id",
                  "attributes"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "cftidfsend"
                    ]
                  },
                  "id": {
                    "$ref": "#/components/schemas/CftObjectId"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/CftObjectsCftidfAttributes"
                  }
                },
                "example": {
                  "type": "cftidfsend",
                  "id": "paris",
                  "attributes": {
                    "nidf": "ALIAS_PARIS",
                    "comment": "When destination is PARIS overide the Identifier"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "cftidfsend details upon successful modification",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftidfGetSend"
                }
              }
            }
          },
          "201": {
            "description": "cftidfsend details upon successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftidfGetSend"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      },
      "delete": {
        "tags": [
          "Flows"
        ],
        "summary": "Deletes a given cftidfsend object.",
        "operationId": "BUILD_ObjectIdCftidfsendDelete",
        "description": "Deletes a given cftidfsend object.",
        "responses": {
          "200": {
            "$ref": "#/components/responses/ObjectDeleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftsend/implyes": {
      "get": {
        "tags": [
          "Flows"
        ],
        "summary": "Retrieves a list of implicit send transfer models",
        "operationId": "BUILD_ObjectsCftsendyesGet",
        "description": "<p>\nRetrieves a list of CFTSEND objects with impl=yes.\n<br>\nYou can use the implicit transfer mode to make a file whose content is frequently changing available to other applications.\nIn this case, the file is always available and applications can retrieve it as many time as necessary.\n</p>",
        "parameters": [
          {
            "$ref": "#/components/parameters/selectid"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of cftsendyes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftsendListYes"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      },
      "post": {
        "tags": [
          "Flows"
        ],
        "summary": "Adds a new send transfer model in server mode",
        "operationId": "BUILD_ObjectIdCftsendyesPost",
        "description": "Adds a new send transfer model in server mode",
        "requestBody": {
          "description": "cftsendyes object parameters.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "type",
                  "id",
                  "attributes"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "cftsendyes"
                    ]
                  },
                  "id": {
                    "$ref": "#/components/schemas/CftObjectId"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/CftObjectsCftsendAttributes"
                  }
                },
                "example": {
                  "id": "make_available",
                  "type": "cftsendyes",
                  "attributes": {
                    "fcode": "BINARY",
                    "frecfm": "F",
                    "faction": "NONE",
                    "STATE": "DISP",
                    "comment": "Make a file available when using Transfer CFT in server mode"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "cftsendyes details upon successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftsendGetYes"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftsend/implyes/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/objectid"
        }
      ],
      "get": {
        "tags": [
          "Flows"
        ],
        "summary": "Retrieves a specific send transfer model in server mode",
        "operationId": "BUILD_ObjectsIdCftsendyesGet",
        "description": "<p>\nRetrieves a specific CFTSEND object (IMPL=YES).\n</p>",
        "responses": {
          "200": {
            "description": "cftsendyes details upon successful query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftsendGetYes"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      },
      "put": {
        "tags": [
          "Flows"
        ],
        "summary": "Adds or modifies a send transfer model in server mode",
        "operationId": "BUILD_ObjectIdCftsendyesPut",
        "description": "Adds or modifies a send transfer model in server mode",
        "requestBody": {
          "description": "cftsendyes object parameters.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "type",
                  "id",
                  "attributes"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "cftsendyes"
                    ]
                  },
                  "id": {
                    "$ref": "#/components/schemas/CftObjectId"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/CftObjectsCftsendAttributes"
                  }
                },
                "example": {
                  "id": "make_available",
                  "type": "cftsendyes",
                  "attributes": {
                    "fcode": "BINARY",
                    "frecfm": "F",
                    "faction": "NONE",
                    "STATE": "DISP",
                    "comment": "Make a file available when using Transfer CFT in server mode"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "cftsendyes details upon successful modification",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftsendGetYes"
                }
              }
            }
          },
          "201": {
            "description": "cftsendyes details upon successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftsendGetYes"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      },
      "delete": {
        "tags": [
          "Flows"
        ],
        "summary": "Deletes an implicit send transfer model",
        "operationId": "BUILD_ObjectIdCftsendyesDelete",
        "description": "Deletes an implicit send transfer model ",
        "responses": {
          "200": {
            "$ref": "#/components/responses/ObjectDeleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftsend/implyes/{idfsendid}/idf": {
      "parameters": [
        {
          "$ref": "#/components/parameters/idfsendid"
        }
      ],
      "get": {
        "tags": [
          "Flows"
        ],
        "summary": "Retrieves a list of cftidfsend objects.",
        "operationId": "BUILD_ObjectsCftidfsendimpyesGet",
        "description": "Retrieves a list of cftidfsend objects.",
        "parameters": [
          {
            "$ref": "#/components/parameters/selectid"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of cftidfsend",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftidfListSend"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      },
      "post": {
        "tags": [
          "Flows"
        ],
        "summary": "Creates a cftidfsend object.",
        "operationId": "BUILD_ObjectIdCftidfsendimpyesPost",
        "description": "Create a protocol alias for the destination when using the CFTSEND/IMPLNO or CFTSEND/IMPLYES definition referenced by <strong>idfsendid</strong>\n<strong>id</strong> corresponds to \"Local identifier of the partner\" for which the IDF/NIDF correspondence is valid. Same value as the value of the ID parameter of CFTPART.\nAttribute <strong>nidf</strong> corresponds to \"File network identifier\", the value which is sent over the network\"",
        "requestBody": {
          "description": "cftidfsend object parameters.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "type",
                  "id",
                  "attributes"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "cftidfsend"
                    ]
                  },
                  "id": {
                    "$ref": "#/components/schemas/CftObjectId"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/CftObjectsCftidfAttributes"
                  }
                },
                "example": {
                  "type": "cftidfsend",
                  "id": "paris",
                  "attributes": {
                    "nidf": "ALIAS_PARIS",
                    "comment": "When destination is PARIS overide the Identifier"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "cftidfsend details upon successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftidfGetSend"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftsend/implyes/{idfsendid}/idf/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/idfsendid"
        },
        {
          "$ref": "#/components/parameters/idfpartid"
        }
      ],
      "get": {
        "tags": [
          "Flows"
        ],
        "summary": "Retrieves a given cftidfsend object.",
        "operationId": "BUILD_ObjectsIdCftidfsendimpyesGet",
        "description": "Retrieves a given cftidfsend object",
        "responses": {
          "200": {
            "description": "cftidfsend details upon successful query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftidfGetSend"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      },
      "put": {
        "tags": [
          "Flows"
        ],
        "summary": "Modifies or creates a cftidfsend object.",
        "operationId": "BUILD_ObjectIdCftidfsendimpyesPut",
        "description": "Modify a protocol alias for the destination when using the CFTSEND/IMPLNO or CFTSEND/IMPLYES definition referenced by <strong>idfsendid</strong>\n<strong>id</strong> corresponds to \"Local identifier of the partner\" for which the IDF/NIDF correspondence is valid. Same value as the value of the ID parameter of CFTPART.\nAttribute <strong>nidf</strong> corresponds to \"File network identifier\", the value which is sent over the network\"",
        "requestBody": {
          "description": "cftidfsend object parameters.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "type",
                  "id",
                  "attributes"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "cftidfsend"
                    ]
                  },
                  "id": {
                    "$ref": "#/components/schemas/CftObjectId"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/CftObjectsCftidfAttributes"
                  }
                },
                "example": {
                  "type": "cftidfsend",
                  "id": "paris",
                  "attributes": {
                    "nidf": "ALIAS_PARIS",
                    "comment": "When destination is PARIS overide the Identifier"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "cftidfsend details upon successful modification",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftidfGetSend"
                }
              }
            }
          },
          "201": {
            "description": "cftidfsend details upon successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftidfGetSend"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      },
      "delete": {
        "tags": [
          "Flows"
        ],
        "summary": "Deletes a given cftidfsend object.",
        "operationId": "BUILD_ObjectIdCftidfsendimpyesDelete",
        "description": "Deletes a given cftidfsend object.",
        "responses": {
          "200": {
            "$ref": "#/components/responses/ObjectDeleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftrecv": {
      "get": {
        "tags": [
          "Flows"
        ],
        "summary": "Retrieves the receive transfer model list",
        "operationId": "BUILD_ObjectsCftrecvGet",
        "description": "<p>\nRetrieves a list of CFTRECV objects.\n</p>",
        "parameters": [
          {
            "$ref": "#/components/parameters/selectid"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of cftrecv",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftrecvList"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      },
      "post": {
        "tags": [
          "Flows"
        ],
        "summary": "Adds a new receive transfer model",
        "operationId": "BUILD_ObjectIdCftrecvPost",
        "description": "Adds a new receive transfer model",
        "requestBody": {
          "description": "cftrecv object parameters.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "type",
                  "id",
                  "attributes"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "cftrecv"
                    ]
                  },
                  "id": {
                    "$ref": "#/components/schemas/CftObjectId"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/CftObjectsCftrecvAttributes"
                  }
                },
                "example": {
                  "id": "make_available",
                  "type": "cftrecv",
                  "attributes": {
                    "frecfm": "F",
                    "comment": "Create a fixed-record-format file; padding occurs"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "cftrecv details upon successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftrecvGet"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftrecv/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/objectid"
        }
      ],
      "get": {
        "tags": [
          "Flows"
        ],
        "summary": "Retrieves a specific receive transfer model",
        "operationId": "BUILD_ObjectsIdCftrecvGet",
        "description": "<p>\nRetrieves a specific CFTRECV object.\n</p>",
        "responses": {
          "200": {
            "description": "cftrecv details upon successful query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftrecvGet"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      },
      "put": {
        "tags": [
          "Flows"
        ],
        "summary": "Adds or modifies a receive transfer model",
        "operationId": "BUILD_ObjectIdCftrecvPut",
        "description": "Adds or modifies a receive transfer model",
        "requestBody": {
          "description": "cftrecv object parameters.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "type",
                  "id",
                  "attributes"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "cftrecv"
                    ]
                  },
                  "id": {
                    "$ref": "#/components/schemas/CftObjectId"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/CftObjectsCftrecvAttributes"
                  }
                },
                "example": {
                  "id": "make_available",
                  "type": "cftrecv",
                  "attributes": {
                    "frecfm": "F",
                    "comment": "Create a fixed-record-format file; padding occurs"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "cftrecv details upon successful modification",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftrecvGet"
                }
              }
            }
          },
          "201": {
            "description": "cftrecv details upon successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftrecvGet"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      },
      "delete": {
        "tags": [
          "Flows"
        ],
        "summary": "Deletes the receive transfer model",
        "operationId": "BUILD_ObjectIdCftrecvDelete",
        "description": "Deletes the receive transfer model",
        "responses": {
          "200": {
            "$ref": "#/components/responses/ObjectDeleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftrecv/{idfrecvid}/idf": {
      "parameters": [
        {
          "$ref": "#/components/parameters/idfrecvid"
        }
      ],
      "get": {
        "tags": [
          "Flows"
        ],
        "summary": "Retrieves a list of cftidfrecv objects.",
        "operationId": "BUILD_ObjectsCftidfrecvGet",
        "description": "Retrieves a list of cftidfrecv objects.",
        "parameters": [
          {
            "$ref": "#/components/parameters/selectid"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of cftidfrecv",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftidfListRecv"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      },
      "post": {
        "tags": [
          "Flows"
        ],
        "summary": "Creates a cftidfrecv object.",
        "operationId": "BUILD_ObjectIdCftidfrecvPost",
        "description": "Create a protocol alias for the destination when using the CFTRECV definition referenced by <strong>idfrecvid</strong>\n<strong>id</strong> corresponds to \"Local identifier of the partner\" for which the IDF/NIDF correspondence is valid. Same value as the value of the ID parameter of CFTPART.\nAttribute <strong>nidf</strong> corresponds to \"File network identifier\", the value which is sent over the network\"",
        "requestBody": {
          "description": "cftidfrecv object parameters.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "type",
                  "id",
                  "attributes"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "cftidfrecv"
                    ]
                  },
                  "id": {
                    "$ref": "#/components/schemas/CftObjectId"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/CftObjectsCftidfAttributes"
                  }
                },
                "example": {
                  "type": "cftidfrecv",
                  "id": "paris",
                  "attributes": {
                    "nidf": "ALIAS_PARIS",
                    "comment": "When destination is PARIS overide the Identifier"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "cftidfrecv details upon successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftidfGetRecv"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftrecv/{idfrecvid}/idf/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/idfrecvid"
        },
        {
          "$ref": "#/components/parameters/idfpartid"
        }
      ],
      "get": {
        "tags": [
          "Flows"
        ],
        "summary": "Retrieves a given cftidfrecv object.",
        "operationId": "BUILD_ObjectsIdCftidfrecvGet",
        "description": "Retrieves a given cftidfrecv object",
        "responses": {
          "200": {
            "description": "cftidfrecv details upon successful query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftidfGetRecv"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      },
      "put": {
        "tags": [
          "Flows"
        ],
        "summary": "Modifies or creates a cftidfrecv object.",
        "operationId": "BUILD_ObjectIdCftidfrecvPut",
        "description": "Modify a protocol alias for the destination when using the CFTRECV definition referenced by <strong>idfrecvid</strong>\n<strong>id</strong> corresponds to \"Local identifier of the partner\" for which the IDF/NIDF correspondence is valid. Same value as the value of the ID parameter of CFTPART.\nAttribute <strong>nidf</strong> corresponds to \"File network identifier\", the value which is sent over the network\"",
        "requestBody": {
          "description": "cftidfrecv object parameters.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "type",
                  "id",
                  "attributes"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "cftidfrecv"
                    ]
                  },
                  "id": {
                    "$ref": "#/components/schemas/CftObjectId"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/CftObjectsCftidfAttributes"
                  }
                },
                "example": {
                  "type": "cftidfrecv",
                  "id": "paris",
                  "attributes": {
                    "nidf": "ALIAS_PARIS",
                    "comment": "When destination is PARIS overide the Identifier"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "cftidfrecv details upon successful modification",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftidfGetRecv"
                }
              }
            }
          },
          "201": {
            "description": "cftidfrecv details upon successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftidfGetRecv"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      },
      "delete": {
        "tags": [
          "Flows"
        ],
        "summary": "Deletes a given cftidfrecv object.",
        "operationId": "BUILD_ObjectIdCftidfrecvDelete",
        "description": "Deletes a given cftidfrecv object.",
        "responses": {
          "200": {
            "$ref": "#/components/responses/ObjectDeleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftdest": {
      "get": {
        "tags": [
          "Partners"
        ],
        "summary": "Retrieves the broadcast lists",
        "operationId": "BUILD_ObjectsCftdestGet",
        "description": "<p>\nRetrieves all broadcast list objects.\n</p>",
        "parameters": [
          {
            "$ref": "#/components/parameters/selectid"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of cftdest",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftdestList"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      },
      "post": {
        "tags": [
          "Partners"
        ],
        "summary": "Adds a new broadcast list",
        "operationId": "BUILD_ObjectIdCftdestPost",
        "description": "Adds a new CFTDEST object.",
        "requestBody": {
          "description": "cftdest object parameters.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "type",
                  "id",
                  "attributes"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "cftdest"
                    ]
                  },
                  "id": {
                    "$ref": "#/components/schemas/CftObjectId"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/CftObjectsCftdestAttributes"
                  }
                },
                "example": {
                  "id": "city",
                  "type": "cftdest",
                  "attributes": {
                    "part": [
                      "PARIS",
                      "NEWYORK"
                    ],
                    "comment": "City definition sample"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "cftdest details upon successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftdestGet"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftdest/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/objectid"
        }
      ],
      "get": {
        "tags": [
          "Partners"
        ],
        "summary": "Retrieves a specific broadcast list",
        "operationId": "BUILD_ObjectsIdCftdestGet",
        "description": "<p>\nRetrieves a specific CFTDEST object.\n</p>",
        "responses": {
          "200": {
            "description": "cftdest details upon successful query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftdestGet"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      },
      "put": {
        "tags": [
          "Partners"
        ],
        "summary": "Adds or modifies a broadcast list",
        "operationId": "BUILD_ObjectIdCftdestPut",
        "description": "Adds or modifies a broadcast list",
        "requestBody": {
          "description": "cftdest object parameters.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "type",
                  "id",
                  "attributes"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "cftdest"
                    ]
                  },
                  "id": {
                    "$ref": "#/components/schemas/CftObjectId"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/CftObjectsCftdestAttributes"
                  }
                },
                "example": {
                  "id": "city",
                  "type": "cftdest",
                  "attributes": {
                    "part": [
                      "PARIS",
                      "NEWYORK"
                    ],
                    "comment": "City definition sample"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "cftdest details upon successful modification",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftdestGet"
                }
              }
            }
          },
          "201": {
            "description": "cftdest details upon successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftdestGet"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      },
      "delete": {
        "tags": [
          "Partners"
        ],
        "summary": "Deletes the broadcast lists",
        "operationId": "BUILD_ObjectIdCftdestDelete",
        "description": "Deletes the broadcast lists",
        "responses": {
          "200": {
            "$ref": "#/components/responses/ObjectDeleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftauth": {
      "get": {
        "tags": [
          "Flows"
        ],
        "summary": "Retrieves a list of authorized file identifiers",
        "operationId": "BUILD_ObjectsCftauthGet",
        "description": "Retrieves a list of authorized file identifiers",
        "parameters": [
          {
            "$ref": "#/components/parameters/selectid"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of cftauth",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftauthList"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      },
      "post": {
        "tags": [
          "Flows"
        ],
        "summary": "Adds a new list of authorized file identifiers",
        "operationId": "BUILD_ObjectIdCftauthPost",
        "description": "Adds a new list of authorized file identifiers",
        "requestBody": {
          "description": "cftauth object parameters.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "type",
                  "id",
                  "attributes"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "cftauth"
                    ]
                  },
                  "id": {
                    "$ref": "#/components/schemas/CftObjectId"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/CftObjectsCftauthAttributes"
                  }
                },
                "example": {
                  "type": "cftauth",
                  "id": "sndfactory",
                  "attributes": {
                    "idf": [
                      "bin",
                      "txt"
                    ],
                    "comment": "List of send IDF defined for partner FACTORY"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "cftauth details upon successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftauthGet"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftauth/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/objectid"
        }
      ],
      "get": {
        "tags": [
          "Flows"
        ],
        "summary": "Retrieves the list of authorized file identifiers",
        "operationId": "BUILD_ObjectsIdCftauthGet",
        "description": "Retrieves the list of authorized file identifiers",
        "responses": {
          "200": {
            "description": "cftauth details upon successful query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftauthGet"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      },
      "put": {
        "tags": [
          "Flows"
        ],
        "summary": "Adds or modifies a list of authorized file identifiers",
        "operationId": "BUILD_ObjectIdCftauthPut",
        "description": "Adds or modifies a list of authorized file identifiers",
        "requestBody": {
          "description": "cftauth object parameters.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "type",
                  "id",
                  "attributes"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "cftauth"
                    ]
                  },
                  "id": {
                    "$ref": "#/components/schemas/CftObjectId"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/CftObjectsCftauthAttributes"
                  }
                },
                "example": {
                  "type": "cftauth",
                  "id": "sndfactory",
                  "attributes": {
                    "idf": [
                      "bin",
                      "txt"
                    ],
                    "comment": "List of send IDF defined for partner FACTORY"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "cftauth details upon successful modification",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftauthGet"
                }
              }
            }
          },
          "201": {
            "description": "cftauth details upon successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftauthGet"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      },
      "delete": {
        "tags": [
          "Flows"
        ],
        "summary": "Deletes a list of authorized file identifiers",
        "operationId": "BUILD_ObjectIdCftauthDelete",
        "description": "Deletes a list of authorized file identifiers",
        "responses": {
          "200": {
            "$ref": "#/components/responses/ObjectDeleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftappl": {
      "get": {
        "tags": [
          "Flows"
        ],
        "summary": "Retrieves a list of transfer owner definitions",
        "operationId": "BUILD_ObjectsCftapplGet",
        "description": "Retrieves a list of CFTAPPL objects, where direction can be BOTH, SEND, or RECV.",
        "parameters": [
          {
            "$ref": "#/components/parameters/selectid"
          }
        ],
        "responses": {
          "200": {
            "description": "The cftappl definition (cftapplboth, cftapplsend, and cftapplrecv).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "links": {
                      "$ref": "#/components/schemas/ObjectSelfLinks"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "type",
                          "id",
                          "attributes"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "cftapplboth",
                              "cftapplsend",
                              "cftapplrecv"
                            ]
                          },
                          "id": {
                            "type": "string"
                          },
                          "attributes": {
                            "$ref": "#/components/schemas/CftObjectsCftapplAttributes"
                          },
                          "links": {
                            "$ref": "#/components/schemas/ObjectSelfLinks"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "links": {
                    "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftappl"
                  },
                  "data": [
                    {
                      "type": "cftapplsend",
                      "id": "factory",
                      "attributes": {
                        "userid": "ORDER",
                        "comment": "Owner set to send files to factories",
                        "origin": "DESIGNER"
                      },
                      "links": {
                        "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftappl/send/factory"
                      }
                    },
                    {
                      "type": "cftapplrecv",
                      "id": "factory",
                      "attributes": {
                        "userid": "RECEIPT",
                        "comment": "Owner set to received files from factories",
                        "origin": "DESIGNER"
                      },
                      "links": {
                        "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftappl/recv/factory"
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftappl/both": {
      "get": {
        "tags": [
          "Flows"
        ],
        "summary": "Retrieves the transfer owner definition set regardless of the direction",
        "operationId": "BUILD_ObjectsCftapplbothGet",
        "description": "Retrieves the transfer owner definition set regardless of the direction",
        "parameters": [
          {
            "$ref": "#/components/parameters/selectid"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of cftapplboth",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftapplListBoth"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      },
      "post": {
        "tags": [
          "Flows"
        ],
        "summary": "Adds a new transfer owner definition set regardless of the direction",
        "operationId": "BUILD_ObjectIdCftapplbothPost",
        "description": "Adds a new transfer owner definition set regardless of the direction",
        "requestBody": {
          "description": "cftapplboth object parameters.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "type",
                  "id",
                  "attributes"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "cftapplboth"
                    ]
                  },
                  "id": {
                    "$ref": "#/components/schemas/CftObjectId"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/CftObjectsCftapplAttributes"
                  }
                },
                "example": {
                  "type": "cftapplboth",
                  "id": "purchase",
                  "attributes": {
                    "userid": "ORDER",
                    "comment": "Owner set to send/received files related to purchase orders"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "cftapplboth details upon successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftapplGetBoth"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftappl/both/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/objectid"
        }
      ],
      "get": {
        "tags": [
          "Flows"
        ],
        "summary": "Retrieves the transfer owner definition set regardless of the direction",
        "operationId": "BUILD_ObjectsIdCftapplbothGet",
        "description": "Retrieves the transfer owner definition set regardless of the direction",
        "responses": {
          "200": {
            "description": "cftapplboth details upon successful query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftapplGetBoth"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      },
      "put": {
        "tags": [
          "Flows"
        ],
        "summary": "Adds or modifies the transfer owner definition set regardless of the direction",
        "operationId": "BUILD_ObjectIdCftapplbothPut",
        "description": "Adds or modifies the transfer owner definition set regardless of the direction",
        "requestBody": {
          "description": "cftapplboth object parameters.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "type",
                  "id",
                  "attributes"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "cftapplboth"
                    ]
                  },
                  "id": {
                    "$ref": "#/components/schemas/CftObjectId"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/CftObjectsCftapplAttributes"
                  }
                },
                "example": {
                  "type": "cftapplboth",
                  "id": "purchase",
                  "attributes": {
                    "userid": "ORDER",
                    "comment": "Owner set to send/received files related to purchase orders"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "cftapplboth details upon successful modification",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftapplGetBoth"
                }
              }
            }
          },
          "201": {
            "description": "cftapplboth details upon successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftapplGetBoth"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      },
      "delete": {
        "tags": [
          "Flows"
        ],
        "summary": "Deletes the transfer owner definition set regardless of the direction",
        "operationId": "BUILD_ObjectIdCftapplbothDelete",
        "description": "Deletes the transfer owner definition set regardless of the direction",
        "responses": {
          "200": {
            "$ref": "#/components/responses/ObjectDeleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftappl/send": {
      "get": {
        "tags": [
          "Flows"
        ],
        "summary": "Retrieves the transfer owner definition set - Send only",
        "operationId": "BUILD_ObjectsCftapplsendGet",
        "description": "Retrieves the transfer owner definition set - Send only",
        "parameters": [
          {
            "$ref": "#/components/parameters/selectid"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of cftapplsend",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftapplListSend"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      },
      "post": {
        "tags": [
          "Flows"
        ],
        "summary": "Adds a new transfer owner definition - Send only",
        "operationId": "BUILD_ObjectIdCftapplsendPost",
        "description": "Adds a new transfer owner definition - Send only",
        "requestBody": {
          "description": "cftapplsend object parameters.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "type",
                  "id",
                  "attributes"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "cftapplsend"
                    ]
                  },
                  "id": {
                    "$ref": "#/components/schemas/CftObjectId"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/CftObjectsCftapplAttributes"
                  }
                },
                "example": {
                  "type": "cftapplsend",
                  "id": "purchase",
                  "attributes": {
                    "userid": "ORDERSEND",
                    "comment": "Owner set to send files related to purchase orders"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "cftapplsend details upon successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftapplGetSend"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftappl/send/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/objectid"
        }
      ],
      "get": {
        "tags": [
          "Flows"
        ],
        "summary": "Retrieves the transfer owner definition set - Send only",
        "operationId": "BUILD_ObjectsIdCftapplsendGet",
        "description": "Retrieves the transfer owner definition set - Send only",
        "responses": {
          "200": {
            "description": "cftapplsend details upon successful query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftapplGetSend"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      },
      "put": {
        "tags": [
          "Flows"
        ],
        "summary": "Adds or modifies a transfer owner definition - Send only",
        "operationId": "BUILD_ObjectIdCftapplsendPut",
        "description": "Adds or modifies a transfer owner definition - Send only",
        "requestBody": {
          "description": "cftapplsend object parameters.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "type",
                  "id",
                  "attributes"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "cftapplsend"
                    ]
                  },
                  "id": {
                    "$ref": "#/components/schemas/CftObjectId"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/CftObjectsCftapplAttributes"
                  }
                },
                "example": {
                  "type": "cftapplsend",
                  "id": "purchase",
                  "attributes": {
                    "userid": "ORDERSEND",
                    "comment": "Owner set to send files related to purchase orders"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "cftapplsend details upon successful modification",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftapplGetSend"
                }
              }
            }
          },
          "201": {
            "description": "cftapplsend details upon successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftapplGetSend"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      },
      "delete": {
        "tags": [
          "Flows"
        ],
        "summary": "Deletes the transfer owner definition set - Send only",
        "operationId": "BUILD_ObjectIdCftapplsendDelete",
        "description": "Deletes the transfer owner definition set - Send only",
        "responses": {
          "200": {
            "$ref": "#/components/responses/ObjectDeleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftappl/recv": {
      "get": {
        "tags": [
          "Flows"
        ],
        "summary": "Retrieves a transfer owner definition - Receive only",
        "operationId": "BUILD_ObjectsCftapplrecvGet",
        "description": "Retrieves a transfer owner definition - Receive only",
        "parameters": [
          {
            "$ref": "#/components/parameters/selectid"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of cftapplrecv",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftapplListRecv"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      },
      "post": {
        "tags": [
          "Flows"
        ],
        "summary": "Adds a new transfer owner definition - Receive only",
        "operationId": "BUILD_ObjectIdCftapplrecvPost",
        "description": "Adds a new transfer owner definition - Receive only",
        "requestBody": {
          "description": "cftapplrecv object parameters.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "type",
                  "id",
                  "attributes"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "cftapplrecv"
                    ]
                  },
                  "id": {
                    "$ref": "#/components/schemas/CftObjectId"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/CftObjectsCftapplAttributes"
                  }
                },
                "example": {
                  "type": "cftapplrecv",
                  "id": "purchase",
                  "attributes": {
                    "userid": "ORDERRECV",
                    "comment": "Owner set to receive files related to purchase orders"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "cftapplrecv details upon successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftapplGetRecv"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftappl/recv/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/objectid"
        }
      ],
      "get": {
        "tags": [
          "Flows"
        ],
        "summary": "Retrieves a transfer owner definition - Receive only",
        "operationId": "BUILD_ObjectsIdCftapplrecvGet",
        "description": "Retrieves a transfer owner definition - Receive only",
        "responses": {
          "200": {
            "description": "cftapplrecv details upon successful query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftapplGetRecv"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      },
      "put": {
        "tags": [
          "Flows"
        ],
        "summary": "Adds or modifies the transfer owner definition - Receive only",
        "operationId": "BUILD_ObjectIdCftapplrecvPut",
        "description": "Adds or modifies the transfer owner definition - Receive only",
        "requestBody": {
          "description": "cftapplrecv object parameters.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "type",
                  "id",
                  "attributes"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "cftapplrecv"
                    ]
                  },
                  "id": {
                    "$ref": "#/components/schemas/CftObjectId"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/CftObjectsCftapplAttributes"
                  }
                },
                "example": {
                  "type": "cftapplrecv",
                  "id": "purchase",
                  "attributes": {
                    "userid": "ORDERRECV",
                    "comment": "Owner set to receive files related to purchase orders"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "cftapplrecv details upon successful modification",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftapplGetRecv"
                }
              }
            }
          },
          "201": {
            "description": "cftapplrecv details upon successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftapplGetRecv"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      },
      "delete": {
        "tags": [
          "Flows"
        ],
        "summary": "Deletes a transfer owner definition - Receive only",
        "operationId": "BUILD_ObjectIdCftapplrecvDelete",
        "description": "Deletes a transfer owner definition - Receive only",
        "responses": {
          "200": {
            "$ref": "#/components/responses/ObjectDeleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftcron": {
      "get": {
        "tags": [
          "Flows"
        ],
        "summary": "Retrieves the scheduler definition list",
        "operationId": "BUILD_ObjectsCftcronGet",
        "description": "Retrieves the scheduler definition list",
        "parameters": [
          {
            "$ref": "#/components/parameters/selectid"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of cftcron",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftcronList"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      },
      "post": {
        "tags": [
          "Flows"
        ],
        "summary": "Adds a new scheduler definition",
        "operationId": "BUILD_ObjectIdCftcronPost",
        "description": "Adds a new scheduler definition",
        "requestBody": {
          "description": "cftcron object parameters.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "type",
                  "id",
                  "attributes"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "cftcron"
                    ]
                  },
                  "id": {
                    "$ref": "#/components/schemas/CftObjectId"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/CftObjectsCftcronAttributes"
                  }
                },
                "example": {
                  "type": "cftcron",
                  "id": "exec_every_5min",
                  "attributes": {
                    "crontab": "CRONTAB1,",
                    "exec": "<CRONCMD>",
                    "time": "m=*/5",
                    "state": "NOACTIVE",
                    "comment": "Execution script <CRONCMD> every 5 minutes"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "cftcron details upon successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftcronGet"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftcron/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/objectid"
        }
      ],
      "get": {
        "tags": [
          "Flows"
        ],
        "summary": "Retrieves a scheduler definition",
        "operationId": "BUILD_ObjectsIdCftcronGet",
        "description": "Retrieves a scheduler definition",
        "responses": {
          "200": {
            "description": "cftcron details upon successful query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftcronGet"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      },
      "put": {
        "tags": [
          "Flows"
        ],
        "summary": "Adds or modifies a scheduler definition",
        "operationId": "BUILD_ObjectIdCftcronPut",
        "description": "Adds or modifies a scheduler definition",
        "requestBody": {
          "description": "cftcron object parameters.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "type",
                  "id",
                  "attributes"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "cftcron"
                    ]
                  },
                  "id": {
                    "$ref": "#/components/schemas/CftObjectId"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/CftObjectsCftcronAttributes"
                  }
                },
                "example": {
                  "type": "cftcron",
                  "id": "exec_every_5min",
                  "attributes": {
                    "crontab": "CRONTAB1,",
                    "exec": "<CRONCMD>",
                    "time": "m=*/5",
                    "state": "NOACTIVE",
                    "comment": "Execution script <CRONCMD> every 5 minutes"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "cftcron details upon successful modification",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftcronGet"
                }
              }
            }
          },
          "201": {
            "description": "cftcron details upon successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftcronGet"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      },
      "delete": {
        "tags": [
          "Flows"
        ],
        "summary": "Deletes a scheduler definition",
        "operationId": "BUILD_ObjectIdCftcronDelete",
        "description": "Deletes a scheduler definition",
        "responses": {
          "200": {
            "$ref": "#/components/responses/ObjectDeleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftcron/{id}/act": {
      "parameters": [
        {
          "$ref": "#/components/parameters/objectid"
        }
      ],
      "put": {
        "tags": [
          "Flows"
        ],
        "summary": "Activates a scheduler definition.",
        "operationId": "BUILD_ActCftcronPutKK",
        "description": "Activates a scheduler definition.",
        "responses": {
          "200": {
            "description": "Definition has status ACT."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftcron/{id}/inact": {
      "parameters": [
        {
          "$ref": "#/components/parameters/objectid"
        }
      ],
      "put": {
        "tags": [
          "Flows"
        ],
        "summary": "Deactivates a scheduler definition.",
        "operationId": "BUILD_InactCftcronPutKK",
        "description": "Deactivates a scheduler definition.",
        "responses": {
          "200": {
            "description": "Definition has status INACT."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftfolder": {
      "get": {
        "tags": [
          "Flows"
        ],
        "summary": "Retrieves a list of cftfolder objects.",
        "operationId": "BUILD_ObjectsCftfolderGet",
        "description": "Retrieves a list of cftfolder objects.",
        "parameters": [
          {
            "$ref": "#/components/parameters/selectid"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of cftfolder",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftfolderList"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      },
      "post": {
        "tags": [
          "Flows"
        ],
        "summary": "Creates a cftfolder object.",
        "operationId": "BUILD_ObjectIdCftfolderPost",
        "description": "Creates a cftfolder object.",
        "requestBody": {
          "description": "cftfolder object parameters.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "type",
                  "id",
                  "attributes"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "cftfolder"
                    ]
                  },
                  "id": {
                    "$ref": "#/components/schemas/CftObjectId"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/CftObjectsCftfolderAttributes"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "cftfolder details upon successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftfolderGet"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftfolder/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/objectid"
        }
      ],
      "get": {
        "tags": [
          "Flows"
        ],
        "summary": "Retrieves a given cftfolder object.",
        "operationId": "BUILD_ObjectsIdCftfolderGet",
        "description": "Retrieves a given cftfolder object",
        "responses": {
          "200": {
            "description": "cftfolder details upon successful query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftfolderGet"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      },
      "put": {
        "tags": [
          "Flows"
        ],
        "summary": "Modifies or creates a cftfolder object.",
        "operationId": "BUILD_ObjectIdCftfolderPut",
        "description": "Modifies or creates a cftfolder object.",
        "requestBody": {
          "description": "cftfolder object parameters.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "type",
                  "id",
                  "attributes"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "cftfolder"
                    ]
                  },
                  "id": {
                    "$ref": "#/components/schemas/CftObjectId"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/CftObjectsCftfolderAttributes"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "cftfolder details upon successful modification",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftfolderGet"
                }
              }
            }
          },
          "201": {
            "description": "cftfolder details upon successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftfolderGet"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      },
      "delete": {
        "tags": [
          "Flows"
        ],
        "summary": "Deletes a given cftfolder object.",
        "operationId": "BUILD_ObjectIdCftfolderDelete",
        "description": "Deletes a given cftfolder object.",
        "responses": {
          "200": {
            "$ref": "#/components/responses/ObjectDeleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftfolder/{id}/act": {
      "parameters": [
        {
          "$ref": "#/components/parameters/objectid"
        }
      ],
      "put": {
        "tags": [
          "Flows"
        ],
        "summary": "Activates a folder definition.",
        "operationId": "BUILD_ActCftfolderPutKK",
        "description": "Activates a folder definition.",
        "responses": {
          "200": {
            "description": "Definition has status ACT."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftfolder/{id}/inact": {
      "parameters": [
        {
          "$ref": "#/components/parameters/objectid"
        }
      ],
      "put": {
        "tags": [
          "Flows"
        ],
        "summary": "Deactivates a folder definition.",
        "operationId": "BUILD_InactCftfolderPutKK",
        "description": "Deactivates a folder definition.",
        "responses": {
          "200": {
            "description": "Definition has status INACT."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftrole": {
      "get": {
        "tags": [
          "Access Management"
        ],
        "summary": "Retrieves the role profile list",
        "operationId": "BUILD_ObjectsCftroleGet",
        "description": "Retrieves the role profile list",
        "parameters": [
          {
            "$ref": "#/components/parameters/selectid"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of cftrole",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftroleList"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      },
      "post": {
        "tags": [
          "Access Management"
        ],
        "summary": "Adds a new role",
        "operationId": "BUILD_ObjectIdCftrolePost",
        "description": "Adds a new role",
        "requestBody": {
          "description": "cftrole object parameters.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "type",
                  "id",
                  "attributes"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "cftrole"
                    ]
                  },
                  "id": {
                    "$ref": "#/components/schemas/CftObjectId"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/CftObjectsCftroleAttributes"
                  }
                },
                "example": {
                  "id": "view_flow",
                  "type": "cftrole",
                  "attributes": {
                    "privs": [
                      "SERVICE:UI_CONNECT",
                      "CONFIGURATION:CFTSEND_VIEW",
                      "CONFIGURATION:CFTRECV_VIEW",
                      "CONFIGURATION:CFTDEST_VIEW"
                    ],
                    "comment": "Only allow access to flow in read mode"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "cftrole details upon successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftroleGet"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftrole/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/objectid"
        }
      ],
      "get": {
        "tags": [
          "Access Management"
        ],
        "summary": "Retrieves a role",
        "operationId": "BUILD_ObjectsIdCftroleGet",
        "description": "Retrieves a role",
        "responses": {
          "200": {
            "description": "cftrole details upon successful query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftroleGet"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      },
      "put": {
        "tags": [
          "Access Management"
        ],
        "summary": "Adds or modifies a role",
        "operationId": "BUILD_ObjectIdCftrolePut",
        "description": "Adds or modifies a role",
        "requestBody": {
          "description": "cftrole object parameters.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "type",
                  "id",
                  "attributes"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "cftrole"
                    ]
                  },
                  "id": {
                    "$ref": "#/components/schemas/CftObjectId"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/CftObjectsCftroleAttributes"
                  }
                },
                "example": {
                  "id": "view_flow",
                  "type": "cftrole",
                  "attributes": {
                    "privs": [
                      "SERVICE:UI_CONNECT",
                      "CONFIGURATION:CFTSEND_VIEW",
                      "CONFIGURATION:CFTRECV_VIEW",
                      "CONFIGURATION:CFTDEST_VIEW"
                    ],
                    "comment": "Only allow access to flow in read mode"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "cftrole details upon successful modification",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftroleGet"
                }
              }
            }
          },
          "201": {
            "description": "cftrole details upon successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftroleGet"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      },
      "delete": {
        "tags": [
          "Access Management"
        ],
        "summary": "Deletes a role profile",
        "operationId": "BUILD_ObjectIdCftroleDelete",
        "description": "Deletes a role profile",
        "responses": {
          "200": {
            "$ref": "#/components/responses/ObjectDeleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftpriv": {
      "get": {
        "tags": [
          "Access Management"
        ],
        "summary": "Retrieves the privilege definition list",
        "operationId": "BUILD_ObjectsCftprivGet",
        "description": "Retrieves the privilege definition list",
        "parameters": [
          {
            "$ref": "#/components/parameters/selectid"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of cftpriv",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftprivList"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      },
      "post": {
        "tags": [
          "Access Management"
        ],
        "summary": "Adds a new privilege definition",
        "operationId": "BUILD_ObjectIdCftprivPost",
        "description": "Adds a new privilege definition",
        "requestBody": {
          "description": "cftpriv object parameters.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "type",
                  "id",
                  "attributes"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "cftpriv"
                    ]
                  },
                  "id": {
                    "$ref": "#/components/schemas/CftObjectId"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/CftObjectsCftprivAttributes"
                  }
                },
                "example": {
                  "id": "make_transfer",
                  "type": "cftpriv",
                  "attributes": {
                    "resource": "transfer",
                    "actions": [
                      "create",
                      "delete",
                      "view",
                      "edit",
                      "cancel",
                      "resume",
                      "pause",
                      "execute",
                      "submit",
                      "end"
                    ],
                    "comment": "Manages transfer"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "cftpriv details upon successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftprivGet"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftpriv/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/objectid"
        }
      ],
      "get": {
        "tags": [
          "Access Management"
        ],
        "summary": "Retrieves a privilege definition",
        "operationId": "BUILD_ObjectsIdCftprivGet",
        "description": "Retrieves a privilege definition",
        "responses": {
          "200": {
            "description": "cftpriv details upon successful query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftprivGet"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      },
      "put": {
        "tags": [
          "Access Management"
        ],
        "summary": "Adds or modifies a privilege definition",
        "operationId": "BUILD_ObjectIdCftprivPut",
        "description": "Adds or modifies a privilege definition",
        "requestBody": {
          "description": "cftpriv object parameters.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "type",
                  "id",
                  "attributes"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "cftpriv"
                    ]
                  },
                  "id": {
                    "$ref": "#/components/schemas/CftObjectId"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/CftObjectsCftprivAttributes"
                  }
                },
                "example": {
                  "id": "make_transfer",
                  "type": "cftpriv",
                  "attributes": {
                    "resource": "transfer",
                    "actions": [
                      "create",
                      "delete",
                      "view",
                      "edit",
                      "cancel",
                      "resume",
                      "pause",
                      "execute",
                      "submit",
                      "end"
                    ],
                    "comment": "Manages transfer"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "cftpriv details upon successful modification",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftprivGet"
                }
              }
            }
          },
          "201": {
            "description": "cftpriv details upon successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftprivGet"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      },
      "delete": {
        "tags": [
          "Access Management"
        ],
        "summary": "Deletes a privilege definition",
        "operationId": "BUILD_ObjectIdCftprivDelete",
        "description": "Deletes a privilege definition",
        "responses": {
          "200": {
            "$ref": "#/components/responses/ObjectDeleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftssl": {
      "get": {
        "tags": [
          "Partners"
        ],
        "summary": "Retrieves a list of SSL definitions (client or server)",
        "operationId": "BUILD_ObjectsCftsslGet",
        "description": "Retrieves a list of CFTSSL objects.",
        "parameters": [
          {
            "$ref": "#/components/parameters/selectid"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of SSL definitions.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "links": {
                      "$ref": "#/components/schemas/ObjectSelfLinks"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "type",
                          "id",
                          "attributes"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "cftsslclient",
                              "cftsslserver"
                            ]
                          },
                          "id": {
                            "type": "string"
                          },
                          "attributes": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/CftObjectsAttributes"
                            }
                          },
                          "links": {
                            "$ref": "#/components/schemas/ObjectSelfLinks"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftssl/client": {
      "get": {
        "tags": [
          "Partners"
        ],
        "summary": "Retrieves a list of SSL definitions for client connections",
        "operationId": "BUILD_ObjectsCftsslclientGet",
        "description": "Retrieves a list of SSL definitions for client connections",
        "parameters": [
          {
            "$ref": "#/components/parameters/selectid"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of cftsslclient",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftsslListClient"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      },
      "post": {
        "tags": [
          "Partners"
        ],
        "summary": "Adds a new client SSL definition",
        "operationId": "BUILD_ObjectIdCftsslclientPost",
        "description": "Adds a new client SSL definition",
        "requestBody": {
          "description": "cftsslclient object parameters.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "type",
                  "id",
                  "attributes"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "cftsslclient"
                    ]
                  },
                  "id": {
                    "$ref": "#/components/schemas/CftObjectId"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/CftObjectsCftsslAttributesClient"
                  }
                },
                "example": {
                  "type": "cftsslclient",
                  "id": "SSL_DEFAULT",
                  "attributes": {
                    "version": "TLSV1COMP",
                    "keyext": "NONE",
                    "ciphlist": [
                      49200,
                      49199
                    ],
                    "usercid": "localuser",
                    "rootcid": [
                      "localroot",
                      "remoteca"
                    ],
                    "verify": "REQUIRED",
                    "comment": "Make a file available when using Transfer CFT in server mode"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "cftsslclient details upon successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftsslGetClient"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftssl/client/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/objectid"
        }
      ],
      "get": {
        "tags": [
          "Partners"
        ],
        "summary": "Retrieves a specific client SSL definition",
        "operationId": "BUILD_ObjectsIdCftsslclientGet",
        "description": "Retrieves a specific client SSL definition",
        "responses": {
          "200": {
            "description": "cftsslclient details upon successful query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftsslGetClient"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      },
      "put": {
        "tags": [
          "Partners"
        ],
        "summary": "Adds or modifies a client SSL definition",
        "operationId": "BUILD_ObjectIdCftsslclientPut",
        "description": "Adds or modifies a client SSL definition",
        "requestBody": {
          "description": "cftsslclient object parameters.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "type",
                  "id",
                  "attributes"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "cftsslclient"
                    ]
                  },
                  "id": {
                    "$ref": "#/components/schemas/CftObjectId"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/CftObjectsCftsslAttributesClient"
                  }
                },
                "example": {
                  "type": "cftsslclient",
                  "id": "SSL_DEFAULT",
                  "attributes": {
                    "version": "TLSV1COMP",
                    "keyext": "NONE",
                    "ciphlist": [
                      49200,
                      49199
                    ],
                    "usercid": "localuser",
                    "rootcid": [
                      "localroot",
                      "remoteca"
                    ],
                    "verify": "REQUIRED",
                    "comment": "Make a file available when using Transfer CFT in server mode"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "cftsslclient details upon successful modification",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftsslGetClient"
                }
              }
            }
          },
          "201": {
            "description": "cftsslclient details upon successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftsslGetClient"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      },
      "delete": {
        "tags": [
          "Partners"
        ],
        "summary": "Deletes the SSL definition for client connections",
        "operationId": "BUILD_ObjectIdCftsslclientDelete",
        "description": "Deletes the SSL definition for client connections",
        "responses": {
          "200": {
            "$ref": "#/components/responses/ObjectDeleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftssl/server": {
      "get": {
        "tags": [
          "Partners"
        ],
        "summary": "Retrieves a list of SSL definitions for server connections",
        "operationId": "BUILD_ObjectsCftsslserverGet",
        "description": "Retrieves a list of SSL definitions for server connections",
        "parameters": [
          {
            "$ref": "#/components/parameters/selectid"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of cftsslserver",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftsslListServer"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      },
      "post": {
        "tags": [
          "Partners"
        ],
        "summary": "Adds a new server SSL definition",
        "operationId": "BUILD_ObjectIdCftsslserverPost",
        "description": "Adds a new server SSL definition",
        "requestBody": {
          "description": "cftsslserver object parameters.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "type",
                  "id",
                  "attributes"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "cftsslserver"
                    ]
                  },
                  "id": {
                    "$ref": "#/components/schemas/CftObjectId"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/CftObjectsCftsslAttributesServer"
                  }
                },
                "example": {
                  "type": "cftsslserver",
                  "id": "SSL_DEFAULT",
                  "attributes": {
                    "version": "TLSV1COMP",
                    "keyext": "NONE",
                    "ciphlist": [
                      49200,
                      49199
                    ],
                    "usercid": "localuser",
                    "rootcid": [
                      "localroot",
                      "remoteca"
                    ],
                    "verify": "REQUIRED",
                    "comment": "Make a file available when using Transfer CFT in server mode"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "cftsslserver details upon successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftsslGetServer"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftssl/server/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/objectid"
        }
      ],
      "get": {
        "tags": [
          "Partners"
        ],
        "summary": "Retrieves a specific server SSL definition",
        "operationId": "BUILD_ObjectsIdCftsslserverGet",
        "description": "Retrieves a specific server SSL definition",
        "responses": {
          "200": {
            "description": "cftsslserver details upon successful query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftsslGetServer"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      },
      "put": {
        "tags": [
          "Partners"
        ],
        "summary": "Adds or modifies a server SSL definition",
        "operationId": "BUILD_ObjectIdCftsslserverPut",
        "description": "Adds or modifies a server SSL definition",
        "requestBody": {
          "description": "cftsslserver object parameters.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "type",
                  "id",
                  "attributes"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "cftsslserver"
                    ]
                  },
                  "id": {
                    "$ref": "#/components/schemas/CftObjectId"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/CftObjectsCftsslAttributesServer"
                  }
                },
                "example": {
                  "type": "cftsslserver",
                  "id": "SSL_DEFAULT",
                  "attributes": {
                    "version": "TLSV1COMP",
                    "keyext": "NONE",
                    "ciphlist": [
                      49200,
                      49199
                    ],
                    "usercid": "localuser",
                    "rootcid": [
                      "localroot",
                      "remoteca"
                    ],
                    "verify": "REQUIRED",
                    "comment": "Make a file available when using Transfer CFT in server mode"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "cftsslserver details upon successful modification",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftsslGetServer"
                }
              }
            }
          },
          "201": {
            "description": "cftsslserver details upon successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftsslGetServer"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      },
      "delete": {
        "tags": [
          "Partners"
        ],
        "summary": "Deletes the SSL definition for server connections",
        "operationId": "BUILD_ObjectIdCftsslserverDelete",
        "description": "Deletes the SSL definition for server connections",
        "responses": {
          "200": {
            "$ref": "#/components/responses/ObjectDeleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftssh": {
      "get": {
        "tags": [
          "Partners"
        ],
        "summary": "Retrieves a list of SSH definitions (client or server)",
        "operationId": "BUILD_ObjectsCftsshGet",
        "description": "Retrieves a list of CFTSSH objects.",
        "parameters": [
          {
            "$ref": "#/components/parameters/selectid"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of CFTSSH objects.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "links": {
                      "$ref": "#/components/schemas/ObjectSelfLinks"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "type",
                          "id",
                          "attributes"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "cftsshclient",
                              "cftsshserver"
                            ]
                          },
                          "id": {
                            "type": "string"
                          },
                          "attributes": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/CftObjectsAttributes"
                            }
                          },
                          "links": {
                            "$ref": "#/components/schemas/ObjectSelfLinks"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftssh/client": {
      "get": {
        "tags": [
          "Partners"
        ],
        "summary": "Retrieves a list of SSH definitions for client connections",
        "operationId": "BUILD_ObjectsCftsshclientGet",
        "description": "Retrieves a list of SSH definitions for client connections",
        "parameters": [
          {
            "$ref": "#/components/parameters/selectid"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of cftsshclient",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftsshListClient"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      },
      "post": {
        "tags": [
          "Partners"
        ],
        "summary": "Adds a new client SSH definition",
        "operationId": "BUILD_ObjectIdCftsshclientPost",
        "description": "Adds a new client SSH definition",
        "requestBody": {
          "description": "cftsshclient object parameters.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "type",
                  "id",
                  "attributes"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "cftsshclient"
                    ]
                  },
                  "id": {
                    "$ref": "#/components/schemas/CftObjectId"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/CftObjectsCftsshAttributesClient"
                  }
                },
                "example": {
                  "type": "cftsshclient",
                  "id": "SSH_DEFAULT",
                  "attributes": {
                    "cliprivkey": "CliPrivKey",
                    "srvpubkey": "PubRSAKey",
                    "ciphlist": [
                      "AES256-CTR",
                      "AES192-CTR"
                    ],
                    "keyexchg": [
                      "CURVE25519-SHA256@LIBSSH.ORG",
                      "ECDH-SHA2-NISTP256"
                    ],
                    "hmac": [
                      "HMAC-SHA2-512",
                      "HMAC-SHA2-256"
                    ],
                    "comment": "Client using key authentication."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "cftsshclient details upon successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftsshGetClient"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftssh/client/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/objectid"
        }
      ],
      "get": {
        "tags": [
          "Partners"
        ],
        "summary": "Retrieves a specific client SSH definition",
        "operationId": "BUILD_ObjectsIdCftsshclientGet",
        "description": "Retrieves a specific client SSH definition",
        "responses": {
          "200": {
            "description": "cftsshclient details upon successful query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftsshGetClient"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      },
      "put": {
        "tags": [
          "Partners"
        ],
        "summary": "Adds or modifies a client SSH definition",
        "operationId": "BUILD_ObjectIdCftsshclientPut",
        "description": "Adds or modifies a client SSH definition",
        "requestBody": {
          "description": "cftsshclient object parameters.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "type",
                  "id",
                  "attributes"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "cftsshclient"
                    ]
                  },
                  "id": {
                    "$ref": "#/components/schemas/CftObjectId"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/CftObjectsCftsshAttributesClient"
                  }
                },
                "example": {
                  "type": "cftsshclient",
                  "id": "SSH_DEFAULT",
                  "attributes": {
                    "cliprivkey": "CliPrivKey",
                    "srvpubkey": "PubRSAKey",
                    "ciphlist": [
                      "AES256-CTR",
                      "AES192-CTR"
                    ],
                    "keyexchg": [
                      "CURVE25519-SHA256@LIBSSH.ORG",
                      "ECDH-SHA2-NISTP256"
                    ],
                    "hmac": [
                      "HMAC-SHA2-512",
                      "HMAC-SHA2-256"
                    ],
                    "comment": "Client using key authentication."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "cftsshclient details upon successful modification",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftsshGetClient"
                }
              }
            }
          },
          "201": {
            "description": "cftsshclient details upon successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftsshGetClient"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      },
      "delete": {
        "tags": [
          "Partners"
        ],
        "summary": "Deletes the SSH definition for client connections",
        "operationId": "BUILD_ObjectIdCftsshclientDelete",
        "description": "Deletes the SSH definition for client connections",
        "responses": {
          "200": {
            "$ref": "#/components/responses/ObjectDeleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftssh/server": {
      "get": {
        "tags": [
          "Partners"
        ],
        "summary": "Retrieves a list of SSH definitions for server connections",
        "operationId": "BUILD_ObjectsCftsshserverGet",
        "description": "Retrieves a list of SSH definitions for server connections",
        "parameters": [
          {
            "$ref": "#/components/parameters/selectid"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of cftsshserver",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftsshListServer"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      },
      "post": {
        "tags": [
          "Partners"
        ],
        "summary": "Adds a new server SSH definition",
        "operationId": "BUILD_ObjectIdCftsshserverPost",
        "description": "Adds a new server SSH definition",
        "requestBody": {
          "description": "cftsshserver object parameters.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "type",
                  "id",
                  "attributes"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "cftsshserver"
                    ]
                  },
                  "id": {
                    "$ref": "#/components/schemas/CftObjectId"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/CftObjectsCftsshAttributesServer"
                  }
                },
                "example": {
                  "type": "cftsshserver",
                  "id": "SSH_DEFAULT",
                  "attributes": {
                    "srvprivkey": "PrivRSAKey",
                    "clipubkey": "CliPubKey",
                    "ciphlist": [
                      "AES256-CTR",
                      "AES192-CTR"
                    ],
                    "keyexchg": [
                      "CURVE25519-SHA256@LIBSSH.ORG",
                      "ECDH-SHA2-NISTP256"
                    ],
                    "hmac": [
                      "HMAC-SHA2-512",
                      "HMAC-SHA2-256"
                    ],
                    "comment": "Server requires client key authentication"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "cftsshserver details upon successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftsshGetServer"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftssh/server/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/objectid"
        }
      ],
      "get": {
        "tags": [
          "Partners"
        ],
        "summary": "Retrieves a specific server SSH definition",
        "operationId": "BUILD_ObjectsIdCftsshserverGet",
        "description": "Retrieves a specific server SSH definition",
        "responses": {
          "200": {
            "description": "cftsshserver details upon successful query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftsshGetServer"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      },
      "put": {
        "tags": [
          "Partners"
        ],
        "summary": "Adds or modifies a server SSH definition",
        "operationId": "BUILD_ObjectIdCftsshserverPut",
        "description": "Adds or modifies a server SSH definition",
        "requestBody": {
          "description": "cftsshserver object parameters.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "type",
                  "id",
                  "attributes"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "cftsshserver"
                    ]
                  },
                  "id": {
                    "$ref": "#/components/schemas/CftObjectId"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/CftObjectsCftsshAttributesServer"
                  }
                },
                "example": {
                  "type": "cftsshserver",
                  "id": "SSH_DEFAULT",
                  "attributes": {
                    "srvprivkey": "PrivRSAKey",
                    "clipubkey": "CliPubKey",
                    "ciphlist": [
                      "AES256-CTR",
                      "AES192-CTR"
                    ],
                    "keyexchg": [
                      "CURVE25519-SHA256@LIBSSH.ORG",
                      "ECDH-SHA2-NISTP256"
                    ],
                    "hmac": [
                      "HMAC-SHA2-512",
                      "HMAC-SHA2-256"
                    ],
                    "comment": "Server requires client key authentication"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "cftsshserver details upon successful modification",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftsshGetServer"
                }
              }
            }
          },
          "201": {
            "description": "cftsshserver details upon successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftsshGetServer"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      },
      "delete": {
        "tags": [
          "Partners"
        ],
        "summary": "Deletes SSH definitions for server connections",
        "operationId": "BUILD_ObjectIdCftsshserverDelete",
        "description": "Deletes SSH definitions for server connections",
        "responses": {
          "200": {
            "$ref": "#/components/responses/ObjectDeleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftcat": {
      "get": {
        "tags": [
          "General Parameters"
        ],
        "summary": "Retrieves the catalog definition list",
        "operationId": "BUILD_ObjectsCftcatGet",
        "description": "Retrieves the catalog definition list",
        "parameters": [
          {
            "$ref": "#/components/parameters/selectid"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of cftcat",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftcatList"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      },
      "post": {
        "tags": [
          "General Parameters"
        ],
        "summary": "Adds a new catalog definition",
        "operationId": "BUILD_ObjectIdCftcatPost",
        "description": "Adds a new catalog definition",
        "requestBody": {
          "description": "cftcat object parameters.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "type",
                  "id",
                  "attributes"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "cftcat"
                    ]
                  },
                  "id": {
                    "$ref": "#/components/schemas/CftObjectId"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/CftObjectsCftcatAttributes"
                  }
                },
                "example": {
                  "id": "cat2",
                  "type": "cftcat",
                  "attributes": {
                    "fname": "catalog_file",
                    "comment": "Transfer CFT catalog file"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "cftcat details upon successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftcatGet"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftcat/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/objectid"
        }
      ],
      "get": {
        "tags": [
          "General Parameters"
        ],
        "summary": "Retrieves a catalog definition",
        "operationId": "BUILD_ObjectsIdCftcatGet",
        "description": "Retrieves a catalog definition",
        "responses": {
          "200": {
            "description": "cftcat details upon successful query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftcatGet"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      },
      "put": {
        "tags": [
          "General Parameters"
        ],
        "summary": "Adds or modifies a catalog definition",
        "operationId": "BUILD_ObjectIdCftcatPut",
        "description": "Adds or modifies a catalog definition",
        "requestBody": {
          "description": "cftcat object parameters.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "type",
                  "id",
                  "attributes"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "cftcat"
                    ]
                  },
                  "id": {
                    "$ref": "#/components/schemas/CftObjectId"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/CftObjectsCftcatAttributes"
                  }
                },
                "example": {
                  "id": "cat2",
                  "type": "cftcat",
                  "attributes": {
                    "fname": "catalog_file",
                    "comment": "Transfer CFT catalog file"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "cftcat details upon successful modification",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftcatGet"
                }
              }
            }
          },
          "201": {
            "description": "cftcat details upon successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftcatGet"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      },
      "delete": {
        "tags": [
          "General Parameters"
        ],
        "summary": "Deletes a catalog definition",
        "operationId": "BUILD_ObjectIdCftcatDelete",
        "description": "Deletes a catalog definition",
        "responses": {
          "200": {
            "$ref": "#/components/responses/ObjectDeleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftcom": {
      "get": {
        "tags": [
          "General Parameters"
        ],
        "summary": "Retrieves the communication media list",
        "operationId": "BUILD_ObjectsCftcomGet",
        "description": "Retrieves the communication media list",
        "parameters": [
          {
            "$ref": "#/components/parameters/selectid"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of cftcom",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftcomList"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      },
      "post": {
        "tags": [
          "General Parameters"
        ],
        "summary": "Adds a new communication media",
        "operationId": "BUILD_ObjectIdCftcomPost",
        "description": "Adds a new communication media",
        "requestBody": {
          "description": "cftcom object parameters.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "type",
                  "id",
                  "attributes"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "cftcom"
                    ]
                  },
                  "id": {
                    "$ref": "#/components/schemas/CftObjectId"
                  },
                  "attributes": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/CftObjectsCftcomAttributesTypeFile"
                      },
                      {
                        "$ref": "#/components/schemas/CftObjectsCftcomAttributesTypeTcpip"
                      }
                    ],
                    "discriminator": {
                      "propertyName": "type",
                      "mapping": {
                        "FILE": "#/components/schemas/CftObjectsCftcomAttributesTypeFile",
                        "TCPIP": "#/components/schemas/CftObjectsCftcomAttributesTypeTcpip"
                      }
                    }
                  }
                },
                "example": {
                  "type": "cftcom",
                  "id": "comfile",
                  "attributes": {
                    "type": "FILE",
                    "comment": "Sample definition for file communication media with a scan every 5 seconds",
                    "wscan": 5,
                    "name": "com_file_name"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "cftcom details upon successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftcomGet"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftcom/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/objectid"
        }
      ],
      "get": {
        "tags": [
          "General Parameters"
        ],
        "summary": "Retrieves a communication media definition",
        "operationId": "BUILD_ObjectsIdCftcomGet",
        "description": "Retrieves a communication media definition",
        "responses": {
          "200": {
            "description": "cftcom details upon successful query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftcomGet"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      },
      "put": {
        "tags": [
          "General Parameters"
        ],
        "summary": "Adds or modifies a communication media",
        "operationId": "BUILD_ObjectIdCftcomPut",
        "description": "Adds or modifies a communication media",
        "requestBody": {
          "description": "cftcom object parameters.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "type",
                  "id",
                  "attributes"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "cftcom"
                    ]
                  },
                  "id": {
                    "$ref": "#/components/schemas/CftObjectId"
                  },
                  "attributes": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/CftObjectsCftcomAttributesTypeFile"
                      },
                      {
                        "$ref": "#/components/schemas/CftObjectsCftcomAttributesTypeTcpip"
                      }
                    ],
                    "discriminator": {
                      "propertyName": "type",
                      "mapping": {
                        "FILE": "#/components/schemas/CftObjectsCftcomAttributesTypeFile",
                        "TCPIP": "#/components/schemas/CftObjectsCftcomAttributesTypeTcpip"
                      }
                    }
                  }
                },
                "example": {
                  "type": "cftcom",
                  "id": "comfile",
                  "attributes": {
                    "type": "FILE",
                    "comment": "Sample definition for file communication media with a scan every 5 seconds",
                    "wscan": 5,
                    "name": "com_file_name"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "cftcom details upon successful modification",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftcomGet"
                }
              }
            }
          },
          "201": {
            "description": "cftcom details upon successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftcomGet"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      },
      "delete": {
        "tags": [
          "General Parameters"
        ],
        "summary": "Deletes a communication media",
        "operationId": "BUILD_ObjectIdCftcomDelete",
        "description": "Deletes a communication media",
        "responses": {
          "200": {
            "$ref": "#/components/responses/ObjectDeleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftlog": {
      "get": {
        "tags": [
          "General Parameters"
        ],
        "summary": "Retrieves the log file definitions",
        "operationId": "BUILD_ObjectsCftlogGet",
        "description": "Retrieves the log file definitions",
        "parameters": [
          {
            "$ref": "#/components/parameters/selectid"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of cftlog",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftlogList"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      },
      "post": {
        "tags": [
          "General Parameters"
        ],
        "summary": "Adds a new log file definition",
        "operationId": "BUILD_ObjectIdCftlogPost",
        "description": "Adds a new log file definition",
        "requestBody": {
          "description": "cftlog object parameters.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "type",
                  "id",
                  "attributes"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "cftlog"
                    ]
                  },
                  "id": {
                    "$ref": "#/components/schemas/CftObjectId"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/CftObjectsCftlogAttributes"
                  }
                },
                "example": {
                  "id": "log2",
                  "type": "cftlog",
                  "attributes": {
                    "afname": "alternate_file",
                    "fname": "log_file",
                    "exec": "Switch_log_procedure",
                    "format": "V24",
                    "comment": "Transfer CFT log file"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "cftlog details upon successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftlogGet"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftlog/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/objectid"
        }
      ],
      "get": {
        "tags": [
          "General Parameters"
        ],
        "summary": "Retrieves a log file definition",
        "operationId": "BUILD_ObjectsIdCftlogGet",
        "description": "Retrieves a log file definition",
        "responses": {
          "200": {
            "description": "cftlog details upon successful query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftlogGet"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      },
      "put": {
        "tags": [
          "General Parameters"
        ],
        "summary": "Adds or modifies a log file definition",
        "operationId": "BUILD_ObjectIdCftlogPut",
        "description": "Adds or modifies a log file definition",
        "requestBody": {
          "description": "cftlog object parameters.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "type",
                  "id",
                  "attributes"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "cftlog"
                    ]
                  },
                  "id": {
                    "$ref": "#/components/schemas/CftObjectId"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/CftObjectsCftlogAttributes"
                  }
                },
                "example": {
                  "id": "log2",
                  "type": "cftlog",
                  "attributes": {
                    "afname": "alternate_file",
                    "fname": "log_file",
                    "exec": "Switch_log_procedure",
                    "format": "V24",
                    "comment": "Transfer CFT log file"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "cftlog details upon successful modification",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftlogGet"
                }
              }
            }
          },
          "201": {
            "description": "cftlog details upon successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftlogGet"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      },
      "delete": {
        "tags": [
          "General Parameters"
        ],
        "summary": "Deletes a log file definition",
        "operationId": "BUILD_ObjectIdCftlogDelete",
        "description": "Deletes a log file definition",
        "responses": {
          "200": {
            "$ref": "#/components/responses/ObjectDeleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftnet": {
      "get": {
        "tags": [
          "Networks and Protocols"
        ],
        "summary": "Retrieves the network definition list",
        "operationId": "BUILD_ObjectsCftnetGet",
        "description": "Retrieves the network definition list",
        "parameters": [
          {
            "$ref": "#/components/parameters/selectid"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of cftnet",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftnetList"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      },
      "post": {
        "tags": [
          "Networks and Protocols"
        ],
        "summary": "Adds a new network definition",
        "operationId": "BUILD_ObjectIdCftnetPost",
        "description": "Adds a new network definition",
        "requestBody": {
          "description": "cftnet object parameters.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "type",
                  "id",
                  "attributes"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "cftnet"
                    ]
                  },
                  "id": {
                    "$ref": "#/components/schemas/CftObjectId"
                  },
                  "attributes": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/CftObjectsCftnetAttributesTypeTcp"
                      }
                    ],
                    "discriminator": {
                      "propertyName": "type",
                      "mapping": {
                        "TCP": "#/components/schemas/CftObjectsCftnetAttributesTypeTcp"
                      }
                    }
                  }
                },
                "example": {
                  "type": "cftnet",
                  "id": "basetcp",
                  "attributes": {
                    "type": "TCP",
                    "comment": "Sample definition for the TCP network",
                    "host": "INADDR_ANY",
                    "maxcnx": 300,
                    "call": "INOUT",
                    "srcports": "5000-65535"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "cftnet details upon successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftnetGet"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftnet/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/objectid"
        }
      ],
      "get": {
        "tags": [
          "Networks and Protocols"
        ],
        "summary": "Retrieves a network definition",
        "operationId": "BUILD_ObjectsIdCftnetGet",
        "description": "Retrieves a network definition",
        "responses": {
          "200": {
            "description": "cftnet details upon successful query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftnetGet"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      },
      "put": {
        "tags": [
          "Networks and Protocols"
        ],
        "summary": "Adds or modifies a network definition",
        "operationId": "BUILD_ObjectIdCftnetPut",
        "description": "Adds or modifies a network definition",
        "requestBody": {
          "description": "cftnet object parameters.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "type",
                  "id",
                  "attributes"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "cftnet"
                    ]
                  },
                  "id": {
                    "$ref": "#/components/schemas/CftObjectId"
                  },
                  "attributes": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/CftObjectsCftnetAttributesTypeTcp"
                      }
                    ],
                    "discriminator": {
                      "propertyName": "type",
                      "mapping": {
                        "TCP": "#/components/schemas/CftObjectsCftnetAttributesTypeTcp"
                      }
                    }
                  }
                },
                "example": {
                  "type": "cftnet",
                  "id": "basetcp",
                  "attributes": {
                    "type": "TCP",
                    "comment": "Sample definition for the TCP network",
                    "host": "INADDR_ANY",
                    "maxcnx": 300,
                    "call": "INOUT",
                    "srcports": "5000-65535"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "cftnet details upon successful modification",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftnetGet"
                }
              }
            }
          },
          "201": {
            "description": "cftnet details upon successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftnetGet"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      },
      "delete": {
        "tags": [
          "Networks and Protocols"
        ],
        "summary": "Deletes a network definition",
        "operationId": "BUILD_ObjectIdCftnetDelete",
        "description": "Deletes a network definition",
        "responses": {
          "200": {
            "$ref": "#/components/responses/ObjectDeleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftparm": {
      "get": {
        "tags": [
          "General Parameters"
        ],
        "summary": "Retrieves the Transfer CFT parameter settings list",
        "operationId": "BUILD_ObjectsCftparmGet",
        "description": "Retrieves the Transfer CFT parameter settings list",
        "parameters": [
          {
            "$ref": "#/components/parameters/selectid"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of cftparm",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftparmList"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      },
      "post": {
        "tags": [
          "General Parameters"
        ],
        "summary": "Adds a Transfer CFT parameter settings definition",
        "operationId": "BUILD_ObjectIdCftparmPost",
        "description": "Adds a Transfer CFT parameter settings definition",
        "requestBody": {
          "description": "cftparm object parameters.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "type",
                  "id",
                  "attributes"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "cftparm"
                    ]
                  },
                  "id": {
                    "$ref": "#/components/schemas/CftObjectId"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/CftObjectsCftparmAttributes"
                  }
                },
                "example": {
                  "id": "idparm2",
                  "type": "cftparm",
                  "attributes": {
                    "cat": "CAT0",
                    "com": [
                      "COM0",
                      "COMS"
                    ],
                    "net": [
                      "NET0"
                    ],
                    "prot": [
                      "PESITANY"
                    ],
                    "log": "LOG0",
                    "part": "LOCAL",
                    "key": "cft.key",
                    "partfnam": "cftpart_file",
                    "pkifname": "pkifile_name",
                    "pkipassw": "pass",
                    "comment": "Transfer CFT central definition"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "cftparm details upon successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftparmGet"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftparm/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/objectid"
        }
      ],
      "get": {
        "tags": [
          "General Parameters"
        ],
        "summary": "Retrieves a Transfer CFT parameter settings definition",
        "operationId": "BUILD_ObjectsIdCftparmGet",
        "description": "Retrieves a Transfer CFT parameter settings definition",
        "responses": {
          "200": {
            "description": "cftparm details upon successful query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftparmGet"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      },
      "put": {
        "tags": [
          "General Parameters"
        ],
        "summary": "Adds or modifies a Transfer CFT parameter settings definition",
        "operationId": "BUILD_ObjectIdCftparmPut",
        "description": "Adds or modifies a Transfer CFT parameter settings definition",
        "requestBody": {
          "description": "cftparm object parameters.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "type",
                  "id",
                  "attributes"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "cftparm"
                    ]
                  },
                  "id": {
                    "$ref": "#/components/schemas/CftObjectId"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/CftObjectsCftparmAttributes"
                  }
                },
                "example": {
                  "id": "idparm2",
                  "type": "cftparm",
                  "attributes": {
                    "cat": "CAT0",
                    "com": [
                      "COM0",
                      "COMS"
                    ],
                    "net": [
                      "NET0"
                    ],
                    "prot": [
                      "PESITANY"
                    ],
                    "log": "LOG0",
                    "part": "LOCAL",
                    "key": "cft.key",
                    "partfnam": "cftpart_file",
                    "pkifname": "pkifile_name",
                    "pkipassw": "pass",
                    "comment": "Transfer CFT central definition"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "cftparm details upon successful modification",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftparmGet"
                }
              }
            }
          },
          "201": {
            "description": "cftparm details upon successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftparmGet"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      },
      "delete": {
        "tags": [
          "General Parameters"
        ],
        "summary": "Deletes a Transfer CFT parameter settings definition",
        "operationId": "BUILD_ObjectIdCftparmDelete",
        "description": "Deletes a Transfer CFT parameter settings definition",
        "responses": {
          "200": {
            "$ref": "#/components/responses/ObjectDeleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftprot": {
      "get": {
        "tags": [
          "Networks and Protocols"
        ],
        "summary": "Retrieves the protocol definition list",
        "operationId": "BUILD_ObjectsCftprotGet",
        "description": "Retrieves the protocol definition list",
        "parameters": [
          {
            "$ref": "#/components/parameters/selectid"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of cftprot",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftprotList"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      },
      "post": {
        "tags": [
          "Networks and Protocols"
        ],
        "summary": "Adds a new protocol definition",
        "operationId": "BUILD_ObjectIdCftprotPost",
        "description": "Adds a new protocol definition",
        "requestBody": {
          "description": "cftprot object parameters.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "type",
                  "id",
                  "attributes"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "cftprot"
                    ]
                  },
                  "id": {
                    "$ref": "#/components/schemas/CftObjectId"
                  },
                  "attributes": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/CftObjectsCftprotAttributesTypeOdette"
                      },
                      {
                        "$ref": "#/components/schemas/CftObjectsCftprotAttributesTypePesitAll"
                      },
                      {
                        "$ref": "#/components/schemas/CftObjectsCftprotAttributesTypeSftp"
                      }
                    ],
                    "discriminator": {
                      "propertyName": "type",
                      "mapping": {
                        "ODETTE": "#/components/schemas/CftObjectsCftprotAttributesTypeOdette",
                        "PESIT": "#/components/schemas/CftObjectsCftprotAttributesTypePesitAll",
                        "SFTP": "#/components/schemas/CftObjectsCftprotAttributesTypeSftp"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "cftprot details upon successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftprotGet"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftprot/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/objectid"
        }
      ],
      "get": {
        "tags": [
          "Networks and Protocols"
        ],
        "summary": "Retrieves a protocol definition",
        "operationId": "BUILD_ObjectsIdCftprotGet",
        "description": "Retrieves a protocol definition",
        "responses": {
          "200": {
            "description": "cftprot details upon successful query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftprotGet"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      },
      "put": {
        "tags": [
          "Networks and Protocols"
        ],
        "summary": "Adds or modifies a protocol definition",
        "operationId": "BUILD_ObjectIdCftprotPut",
        "description": "Adds or modifies a protocol definition",
        "requestBody": {
          "description": "cftprot object parameters.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "type",
                  "id",
                  "attributes"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "cftprot"
                    ]
                  },
                  "id": {
                    "$ref": "#/components/schemas/CftObjectId"
                  },
                  "attributes": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/CftObjectsCftprotAttributesTypeOdette"
                      },
                      {
                        "$ref": "#/components/schemas/CftObjectsCftprotAttributesTypePesitAll"
                      },
                      {
                        "$ref": "#/components/schemas/CftObjectsCftprotAttributesTypeSftp"
                      }
                    ],
                    "discriminator": {
                      "propertyName": "type",
                      "mapping": {
                        "ODETTE": "#/components/schemas/CftObjectsCftprotAttributesTypeOdette",
                        "PESIT": "#/components/schemas/CftObjectsCftprotAttributesTypePesitAll",
                        "SFTP": "#/components/schemas/CftObjectsCftprotAttributesTypeSftp"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "cftprot details upon successful modification",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftprotGet"
                }
              }
            }
          },
          "201": {
            "description": "cftprot details upon successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftprotGet"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      },
      "delete": {
        "tags": [
          "Networks and Protocols"
        ],
        "summary": "Deletes a protocol definition",
        "operationId": "BUILD_ObjectIdCftprotDelete",
        "description": "Deletes a protocol definition",
        "responses": {
          "200": {
            "$ref": "#/components/responses/ObjectDeleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftaccnt": {
      "get": {
        "tags": [
          "General Parameters"
        ],
        "summary": "Retrieves the accounting definition list",
        "operationId": "BUILD_ObjectsCftaccntGet",
        "description": "Retrieves the accounting definition list",
        "parameters": [
          {
            "$ref": "#/components/parameters/selectid"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of cftaccnt",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftaccntList"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      },
      "post": {
        "tags": [
          "General Parameters"
        ],
        "summary": "Adds a new accounting definition",
        "operationId": "BUILD_ObjectIdCftaccntPost",
        "description": "Adds a new accounting definition",
        "requestBody": {
          "description": "cftaccnt object parameters.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "type",
                  "id",
                  "attributes"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "cftaccnt"
                    ]
                  },
                  "id": {
                    "$ref": "#/components/schemas/CftObjectId"
                  },
                  "attributes": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/CftObjectsCftaccntAttributesTypeFile"
                      },
                      {
                        "$ref": "#/components/schemas/CftObjectsCftaccntAttributesTypeSyst"
                      }
                    ],
                    "discriminator": {
                      "propertyName": "type",
                      "mapping": {
                        "FILE": "#/components/schemas/CftObjectsCftaccntAttributesTypeFile",
                        "SYST": "#/components/schemas/CftObjectsCftaccntAttributesTypeSyst"
                      }
                    }
                  }
                },
                "example": {
                  "type": "cftaccnt",
                  "id": "fileaccounting",
                  "attributes": {
                    "comment": "Sample definition file accounting",
                    "type": "FILE",
                    "fname": "accounting_file",
                    "afname": "alternate accounting_file",
                    "exec": "switch_procedure",
                    "maxrec": 5000,
                    "language": "C",
                    "format": "V24"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "cftaccnt details upon successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftaccntGet"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftaccnt/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/objectid"
        }
      ],
      "get": {
        "tags": [
          "General Parameters"
        ],
        "summary": "Retrieves an accounting definition",
        "operationId": "BUILD_ObjectsIdCftaccntGet",
        "description": "Retrieves an accounting definition",
        "responses": {
          "200": {
            "description": "cftaccnt details upon successful query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftaccntGet"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      },
      "put": {
        "tags": [
          "General Parameters"
        ],
        "summary": "Adds or modifies an accounting definition",
        "operationId": "BUILD_ObjectIdCftaccntPut",
        "description": "Adds or modifies an accounting definition",
        "requestBody": {
          "description": "cftaccnt object parameters.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "type",
                  "id",
                  "attributes"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "cftaccnt"
                    ]
                  },
                  "id": {
                    "$ref": "#/components/schemas/CftObjectId"
                  },
                  "attributes": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/CftObjectsCftaccntAttributesTypeFile"
                      },
                      {
                        "$ref": "#/components/schemas/CftObjectsCftaccntAttributesTypeSyst"
                      }
                    ],
                    "discriminator": {
                      "propertyName": "type",
                      "mapping": {
                        "FILE": "#/components/schemas/CftObjectsCftaccntAttributesTypeFile",
                        "SYST": "#/components/schemas/CftObjectsCftaccntAttributesTypeSyst"
                      }
                    }
                  }
                },
                "example": {
                  "type": "cftaccnt",
                  "id": "fileaccounting",
                  "attributes": {
                    "comment": "Sample definition file accounting",
                    "type": "FILE",
                    "fname": "accounting_file",
                    "afname": "alternate accounting_file",
                    "exec": "switch_procedure",
                    "maxrec": 5000,
                    "language": "C",
                    "format": "V24"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "cftaccnt details upon successful modification",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftaccntGet"
                }
              }
            }
          },
          "201": {
            "description": "cftaccnt details upon successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftaccntGet"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      },
      "delete": {
        "tags": [
          "General Parameters"
        ],
        "summary": "Deletes an accounting definition",
        "operationId": "BUILD_ObjectIdCftaccntDelete",
        "description": "Deletes an accounting definition",
        "responses": {
          "200": {
            "$ref": "#/components/responses/ObjectDeleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftxlate": {
      "get": {
        "tags": [
          "Miscellaneous"
        ],
        "summary": "Retrieves a list of translation tables",
        "operationId": "BUILD_ObjectsCftxlateGet",
        "description": "Retrieves a list of translation tables",
        "parameters": [
          {
            "$ref": "#/components/parameters/selectid"
          },
          {
            "$ref": "#/components/parameters/SelectTypeXlate"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of translation tables.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "links": {
                      "$ref": "#/components/schemas/ObjectSelfLinks"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "type",
                          "id",
                          "attributes"
                        ],
                        "properties": {
                          "type": {
                            "$ref": "#/components/schemas/CftEnumXlate"
                          },
                          "id": {
                            "type": "string"
                          },
                          "attributes": {
                            "$ref": "#/components/schemas/CftObjectsCftxlateAttributes"
                          },
                          "links": {
                            "$ref": "#/components/schemas/ObjectSelfLinks"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "links": {
                    "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftxlate"
                  },
                  "data": [
                    {
                      "type": "cftxlatesendasciiebcdic",
                      "id": "sendtozos",
                      "attributes": {
                        "comment": "Convert From ASCII To EBCDIC",
                        "table": "00010203372d2e2f1605250b0c0d0e0f101112133c3d322618193f271c1d1e1f405a7f7b5b6c507d4d5d5c4e6b604b61f0f1f2f3f4f5f6f7f8f97a5e4c7e6e6f7cc1c2c3c4c5c6c7c8c9d1d2d3d4d5d6d7d8d9e2e3e4e5e6e7e8e9ade0bd5f6d79818283848586878889919293949596979899a2a3a4a5a6a7a8a9c06ad0a10780dc08421504171a52530a57568d8e8f901b20cb2122db092324284a9c9d9e9fa0292a2b2c3031333435aa363839aeafb0b1b2fab4b5b6b7b8b9ba3a3b3ebebcab414344bf4546474849ca4fcccdcecf515455585906626364bbac6566dddedf67e16869707172737475eaebecedeeef767778148a8b8c9a9bb3dafbfcfdfeff",
                        "origin": "DESIGNER"
                      },
                      "links": {
                        "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftxlate/send/ascii/ebcdic/sendtozos"
                      }
                    },
                    {
                      "type": "cftxlaterecvebcdicascii",
                      "id": "recvfromzos",
                      "attributes": {
                        "comment": "Convert From EBCDIC To ASCII",
                        "table": "00010203372d2e2f1605250b0c0d0e0f101112133c3d322618193f271c1d1e1f405a7f7b5b6c507d4d5d5c4e6b604b61f0f1f2f3f4f5f6f7f8f97a5e4c7e6e6f7cc1c2c3c4c5c6c7c8c9d1d2d3d4d5d6d7d8d9e2e3e4e5e6e7e8e9ade0bd5f6d79818283848586878889919293949596979899a2a3a4a5a6a7a8a9c06ad0a10780dc08421504171a52530a57568d8e8f901b20cb2122db092324284a9c9d9e9fa0292a2b2c3031333435aa363839aeafb0b1b2fab4b5b6b7b8b9ba3a3b3ebebcab414344bf4546474849ca4fcccdcecf515455585906626364bbac6566dddedf67e16869707172737475eaebecedeeef767778148a8b8c9a9bb3dafbfcfdfeff",
                        "origin": "DESIGNER"
                      },
                      "links": {
                        "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftxlate/recv/ebcdic/ascii/recvfromzos"
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      },
      "post": {
        "tags": [
          "Miscellaneous"
        ],
        "summary": "Creates a cftxlate{direct}{fcode}{ncode} object",
        "operationId": "BUILD_ObjectIdCftxlatesendasciiasciiPost",
        "description": "Creates a cftxlate{direct}{fcode}{ncode} object",
        "requestBody": {
          "description": "cftxlate object parameters.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "type",
                  "id",
                  "attributes"
                ],
                "properties": {
                  "type": {
                    "$ref": "#/components/schemas/CftEnumXlate"
                  },
                  "id": {
                    "$ref": "#/components/schemas/CftObjectId"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/CftObjectsCftxlateAttributes"
                  }
                },
                "example": {
                  "id": "sendtozos",
                  "type": "cftxlatesendasciiebcdic",
                  "attributes": {
                    "comment": "Convert From ASCII To EBCDIC",
                    "table": "00010203372d2e2f1605250b0c0d0e0f101112133c3d322618193f271c1d1e1f405a7f7b5b6c507d4d5d5c4e6b604b61f0f1f2f3f4f5f6f7f8f97a5e4c7e6e6f7cc1c2c3c4c5c6c7c8c9d1d2d3d4d5d6d7d8d9e2e3e4e5e6e7e8e9ade0bd5f6d79818283848586878889919293949596979899a2a3a4a5a6a7a8a9c06ad0a10780dc08421504171a52530a57568d8e8f901b20cb2122db092324284a9c9d9e9fa0292a2b2c3031333435aa363839aeafb0b1b2fab4b5b6b7b8b9ba3a3b3ebebcab414344bf4546474849ca4fcccdcecf515455585906626364bbac6566dddedf67e16869707172737475eaebecedeeef767778148a8b8c9a9bb3dafbfcfdfeff"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "cftxlate details upon successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftxlateGet"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftxlate/send/ascii/ascii/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/objectid"
        }
      ],
      "get": {
        "tags": [
          "Miscellaneous"
        ],
        "summary": "Retrieves a given cftxlatesendasciiascii object.",
        "operationId": "BUILD_ObjectsIdCftxlatesendasciiasciiGet",
        "description": "Retrieves a translation table (sending from ASCII to ASCII).",
        "responses": {
          "200": {
            "description": "cftxlatesendasciiascii details upon successful query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftxlateGet"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      },
      "put": {
        "tags": [
          "Miscellaneous"
        ],
        "summary": "Modifies or creates a cftxlatesendasciiascii object.",
        "operationId": "BUILD_ObjectIdCftxlatesendasciiasciiPut",
        "description": "Adds or modifies a translation table (sending from ASCII to ASCII).",
        "requestBody": {
          "description": "cftxlatesendasciiascii object parameters.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "type",
                  "id",
                  "attributes"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "cftxlatesendasciiascii"
                    ]
                  },
                  "id": {
                    "$ref": "#/components/schemas/CftObjectId"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/CftObjectsCftxlateAttributes"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "cftxlatesendasciiascii details upon successful modification",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftxlateGet"
                }
              }
            }
          },
          "201": {
            "description": "cftxlatesendasciiascii details upon successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftxlateGet"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      },
      "delete": {
        "tags": [
          "Miscellaneous"
        ],
        "summary": "Deletes a given cftxlatesendasciiascii object.",
        "operationId": "BUILD_ObjectIdCftxlatesendasciiasciiDelete",
        "description": "Deletes a translation table (sending from ASCII to ASCII).",
        "responses": {
          "200": {
            "$ref": "#/components/responses/ObjectDeleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftxlate/send/ascii/ebcdic/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/objectid"
        }
      ],
      "get": {
        "tags": [
          "Miscellaneous"
        ],
        "summary": "Retrieves a given cftxlatesendasciiebcdic object.",
        "operationId": "BUILD_ObjectsIdCftxlatesendasciiebcdicGet",
        "description": "Retrieves a translation table (sending from ASCII to EBCDIC).",
        "responses": {
          "200": {
            "description": "cftxlatesendasciiebcdic details upon successful query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftxlateGet"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      },
      "put": {
        "tags": [
          "Miscellaneous"
        ],
        "summary": "Modifies or creates a cftxlatesendasciiebcdic object.",
        "operationId": "BUILD_ObjectIdCftxlatesendasciiebcdicPut",
        "description": "Adds or modifies a translation table (sending from ASCII to EBCDIC).",
        "requestBody": {
          "description": "cftxlatesendasciiebcdic object parameters.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "type",
                  "id",
                  "attributes"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "cftxlatesendasciiebcdic"
                    ]
                  },
                  "id": {
                    "$ref": "#/components/schemas/CftObjectId"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/CftObjectsCftxlateAttributes"
                  }
                },
                "example": {
                  "type": "cftxlatesendasciiebcdic",
                  "id": "SAETEXT",
                  "attributes": {
                    "comment": "Convert From ASCII To EBCDIC",
                    "table": "00010203372d2e2f1605250b0c0d0e0f101112133c3d322618193f271c1d1e1f405a7f7b5b6c507d4d5d5c4e6b604b61f0f1f2f3f4f5f6f7f8f97a5e4c7e6e6f7cc1c2c3c4c5c6c7c8c9d1d2d3d4d5d6d7d8d9e2e3e4e5e6e7e8e9ade0bd5f6d79818283848586878889919293949596979899a2a3a4a5a6a7a8a9c06ad0a10780dc08421504171a52530a57568d8e8f901b20cb2122db092324284a9c9d9e9fa0292a2b2c3031333435aa363839aeafb0b1b2fab4b5b6b7b8b9ba3a3b3ebebcab414344bf4546474849ca4fcccdcecf515455585906626364bbac6566dddedf67e16869707172737475eaebecedeeef767778148a8b8c9a9bb3dafbfcfdfeff"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "cftxlatesendasciiebcdic details upon successful modification",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftxlateGet"
                }
              }
            }
          },
          "201": {
            "description": "cftxlatesendasciiebcdic details upon successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftxlateGet"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      },
      "delete": {
        "tags": [
          "Miscellaneous"
        ],
        "summary": "Deletes a given cftxlatesendasciiebcdic object.",
        "operationId": "BUILD_ObjectIdCftxlatesendasciiebcdicDelete",
        "description": "Deletes a translation table (sending from ASCII to EBCDIC).",
        "responses": {
          "200": {
            "$ref": "#/components/responses/ObjectDeleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftxlate/send/ebcdic/ebcdic/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/objectid"
        }
      ],
      "get": {
        "tags": [
          "Miscellaneous"
        ],
        "summary": "Retrieves a given cftxlatesendebcdicebcdic object.",
        "operationId": "BUILD_ObjectsIdCftxlatesendebcdicebcdicGet",
        "description": "Retrieves a translation table (sending from EBCDIC to EBCDIC).",
        "responses": {
          "200": {
            "description": "cftxlatesendebcdicebcdic details upon successful query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftxlateGet"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      },
      "put": {
        "tags": [
          "Miscellaneous"
        ],
        "summary": "Modifies or creates a cftxlatesendebcdicebcdic object.",
        "operationId": "BUILD_ObjectIdCftxlatesendebcdicebcdicPut",
        "description": "Adds or modifies a translation table (sending from EBCDIC to EBCDIC).",
        "requestBody": {
          "description": "cftxlatesendebcdicebcdic object parameters.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "type",
                  "id",
                  "attributes"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "cftxlatesendebcdicebcdic"
                    ]
                  },
                  "id": {
                    "$ref": "#/components/schemas/CftObjectId"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/CftObjectsCftxlateAttributes"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "cftxlatesendebcdicebcdic details upon successful modification",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftxlateGet"
                }
              }
            }
          },
          "201": {
            "description": "cftxlatesendebcdicebcdic details upon successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftxlateGet"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      },
      "delete": {
        "tags": [
          "Miscellaneous"
        ],
        "summary": "Deletes a given cftxlatesendebcdicebcdic object.",
        "operationId": "BUILD_ObjectIdCftxlatesendebcdicebcdicDelete",
        "description": "Deletes a translation table (sending from EBCDIC to EBCDIC).",
        "responses": {
          "200": {
            "$ref": "#/components/responses/ObjectDeleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftxlate/send/ebcdic/ascii/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/objectid"
        }
      ],
      "get": {
        "tags": [
          "Miscellaneous"
        ],
        "summary": "Retrieves a given cftxlatesendebcdicascii object.",
        "operationId": "BUILD_ObjectsIdCftxlatesendebcdicasciiGet",
        "description": "Retrieves a translation table (sending from EBCDIC to ASCII).",
        "responses": {
          "200": {
            "description": "cftxlatesendebcdicascii details upon successful query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftxlateGet"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      },
      "put": {
        "tags": [
          "Miscellaneous"
        ],
        "summary": "Modifies or creates a cftxlatesendebcdicascii object.",
        "operationId": "BUILD_ObjectIdCftxlatesendebcdicasciiPut",
        "description": "Adds or modifies a translation table (sending from EBCDIC to ASCII).",
        "requestBody": {
          "description": "cftxlatesendebcdicascii object parameters.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "type",
                  "id",
                  "attributes"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "cftxlatesendebcdicascii"
                    ]
                  },
                  "id": {
                    "$ref": "#/components/schemas/CftObjectId"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/CftObjectsCftxlateAttributes"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "cftxlatesendebcdicascii details upon successful modification",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftxlateGet"
                }
              }
            }
          },
          "201": {
            "description": "cftxlatesendebcdicascii details upon successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftxlateGet"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      },
      "delete": {
        "tags": [
          "Miscellaneous"
        ],
        "summary": "Deletes a given cftxlatesendebcdicascii object.",
        "operationId": "BUILD_ObjectIdCftxlatesendebcdicasciiDelete",
        "description": "Deletes a translation table (sending from EBCDIC to ASCII).",
        "responses": {
          "200": {
            "$ref": "#/components/responses/ObjectDeleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftxlate/recv/ascii/ascii/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/objectid"
        }
      ],
      "get": {
        "tags": [
          "Miscellaneous"
        ],
        "summary": "Retrieves a given cftxlaterecvasciiascii object.",
        "operationId": "BUILD_ObjectsIdCftxlaterecvasciiasciiGet",
        "description": "Retrieves a translation table (receiving from ASCII to ASCII).",
        "responses": {
          "200": {
            "description": "cftxlaterecvasciiascii details upon successful query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftxlateGet"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      },
      "put": {
        "tags": [
          "Miscellaneous"
        ],
        "summary": "Modifies or creates a cftxlaterecvasciiascii object.",
        "operationId": "BUILD_ObjectIdCftxlaterecvasciiasciiPut",
        "description": "Adds or modifies a translation table (receiving from ASCII to ASCII).",
        "requestBody": {
          "description": "cftxlaterecvasciiascii object parameters.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "type",
                  "id",
                  "attributes"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "cftxlaterecvasciiascii"
                    ]
                  },
                  "id": {
                    "$ref": "#/components/schemas/CftObjectId"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/CftObjectsCftxlateAttributes"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "cftxlaterecvasciiascii details upon successful modification",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftxlateGet"
                }
              }
            }
          },
          "201": {
            "description": "cftxlaterecvasciiascii details upon successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftxlateGet"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      },
      "delete": {
        "tags": [
          "Miscellaneous"
        ],
        "summary": "Deletes a given cftxlaterecvasciiascii object.",
        "operationId": "BUILD_ObjectIdCftxlaterecvasciiasciiDelete",
        "description": "Deletes a translation table (receiving from ASCII to ASCII).",
        "responses": {
          "200": {
            "$ref": "#/components/responses/ObjectDeleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftxlate/recv/ascii/ebcdic/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/objectid"
        }
      ],
      "get": {
        "tags": [
          "Miscellaneous"
        ],
        "summary": "Retrieves a given cftxlaterecvasciiebcdic object.",
        "operationId": "BUILD_ObjectsIdCftxlaterecvasciiebcdicGet",
        "description": "Retrieves a translation table (receiving from ASCII to EBCDIC).",
        "responses": {
          "200": {
            "description": "cftxlaterecvasciiebcdic details upon successful query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftxlateGet"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      },
      "put": {
        "tags": [
          "Miscellaneous"
        ],
        "summary": "Modifies or creates a cftxlaterecvasciiebcdic object.",
        "operationId": "BUILD_ObjectIdCftxlaterecvasciiebcdicPut",
        "description": "Adds or modifies a translation table (receiving from ASCII to EBCDIC).",
        "requestBody": {
          "description": "cftxlaterecvasciiebcdic object parameters.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "type",
                  "id",
                  "attributes"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "cftxlaterecvasciiebcdic"
                    ]
                  },
                  "id": {
                    "$ref": "#/components/schemas/CftObjectId"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/CftObjectsCftxlateAttributes"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "cftxlaterecvasciiebcdic details upon successful modification",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftxlateGet"
                }
              }
            }
          },
          "201": {
            "description": "cftxlaterecvasciiebcdic details upon successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftxlateGet"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      },
      "delete": {
        "tags": [
          "Miscellaneous"
        ],
        "summary": "Deletes a given cftxlaterecvasciiebcdic object.",
        "operationId": "BUILD_ObjectIdCftxlaterecvasciiebcdicDelete",
        "description": "Deletes a translation table (receiving from ASCII to EBCDIC).",
        "responses": {
          "200": {
            "$ref": "#/components/responses/ObjectDeleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftxlate/recv/ebcdic/ebcdic/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/objectid"
        }
      ],
      "get": {
        "tags": [
          "Miscellaneous"
        ],
        "summary": "Retrieves a given cftxlaterecvebcdicebcdic object.",
        "operationId": "BUILD_ObjectsIdCftxlaterecvebcdicebcdicGet",
        "description": "Retrieves a translation table (receiving from EBCDIC to EBCDIC).",
        "responses": {
          "200": {
            "description": "cftxlaterecvebcdicebcdic details upon successful query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftxlateGet"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      },
      "put": {
        "tags": [
          "Miscellaneous"
        ],
        "summary": "Modifies or creates a cftxlaterecvebcdicebcdic object.",
        "operationId": "BUILD_ObjectIdCftxlaterecvebcdicebcdicPut",
        "description": "Adds or modifies a translation table (receiving from EBCDIC to EBCDIC).",
        "requestBody": {
          "description": "cftxlaterecvebcdicebcdic object parameters.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "type",
                  "id",
                  "attributes"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "cftxlaterecvebcdicebcdic"
                    ]
                  },
                  "id": {
                    "$ref": "#/components/schemas/CftObjectId"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/CftObjectsCftxlateAttributes"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "cftxlaterecvebcdicebcdic details upon successful modification",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftxlateGet"
                }
              }
            }
          },
          "201": {
            "description": "cftxlaterecvebcdicebcdic details upon successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftxlateGet"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      },
      "delete": {
        "tags": [
          "Miscellaneous"
        ],
        "summary": "Deletes a given cftxlaterecvebcdicebcdic object.",
        "operationId": "BUILD_ObjectIdCftxlaterecvebcdicebcdicDelete",
        "description": "Deletes a translation table (receiving from EBCDIC to EBCDIC).",
        "responses": {
          "200": {
            "$ref": "#/components/responses/ObjectDeleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftxlate/recv/ebcdic/ascii/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/objectid"
        }
      ],
      "get": {
        "tags": [
          "Miscellaneous"
        ],
        "summary": "Retrieves a given cftxlaterecvebcdicascii object.",
        "operationId": "BUILD_ObjectsIdCftxlaterecvebcdicasciiGet",
        "description": "Retrieves a translation table (receiving from EBCDIC to ASCII).",
        "responses": {
          "200": {
            "description": "cftxlaterecvebcdicascii details upon successful query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftxlateGet"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      },
      "put": {
        "tags": [
          "Miscellaneous"
        ],
        "summary": "Modifies or creates a cftxlaterecvebcdicascii object.",
        "operationId": "BUILD_ObjectIdCftxlaterecvebcdicasciiPut",
        "description": "Adds or modifies a translation table (receiving from EBCDIC to ASCII).",
        "requestBody": {
          "description": "cftxlaterecvebcdicascii object parameters.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "type",
                  "id",
                  "attributes"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "cftxlaterecvebcdicascii"
                    ]
                  },
                  "id": {
                    "$ref": "#/components/schemas/CftObjectId"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/CftObjectsCftxlateAttributes"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "cftxlaterecvebcdicascii details upon successful modification",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftxlateGet"
                }
              }
            }
          },
          "201": {
            "description": "cftxlaterecvebcdicascii details upon successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftxlateGet"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      },
      "delete": {
        "tags": [
          "Miscellaneous"
        ],
        "summary": "Deletes a given cftxlaterecvebcdicascii object.",
        "operationId": "BUILD_ObjectIdCftxlaterecvebcdicasciiDelete",
        "description": "Deletes a translation table (receiving from EBCDIC to ASCII).",
        "responses": {
          "200": {
            "$ref": "#/components/responses/ObjectDeleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/objects/cfttoken": {
      "get": {
        "tags": [
          "Miscellaneous"
        ],
        "summary": "Retrieves a list of tokens.",
        "operationId": "BUILD_ObjectsCfttokenGet",
        "description": "Retrieves a list of tokens.",
        "parameters": [
          {
            "$ref": "#/components/parameters/selectid"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of cfttoken",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCfttokenList"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      },
      "post": {
        "tags": [
          "Miscellaneous"
        ],
        "summary": "Creates a new token associated with a user.",
        "operationId": "BUILD_ObjectIdCfttokenPost",
        "description": "Creates a new token associated with a user.\\\nOnly <strong>two</strong> tokens can be defined for each user.\\\nThe token is associated with the user who is executing the request. You cannot perform this operation on behalf of another user.",
        "responses": {
          "201": {
            "description": "cfttoken details upon successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCfttokenGet"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/objects/cfttoken/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/objectid"
        }
      ],
      "get": {
        "tags": [
          "Miscellaneous"
        ],
        "summary": "Retrieves the token associated with a user.",
        "operationId": "BUILD_ObjectsIdCfttokenGet",
        "description": "Retrieves the token associated with a user.\\\nThe tokens value are show encrypted, except when the ID corespond to the logged user.",
        "responses": {
          "200": {
            "description": "cfttoken details upon successful query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCfttokenGet"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      },
      "put": {
        "tags": [
          "Miscellaneous"
        ],
        "summary": "Revokes a token.",
        "operationId": "BUILD_ObjectIdCfttokenPut",
        "description": "Modify the list of tokens. The tokens not listed are revoked.\\\nTo revoke all tokens, execute the DELETE operation.",
        "requestBody": {
          "description": "cfttoken object parameters.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "type",
                  "id",
                  "attributes"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "cfttoken"
                    ]
                  },
                  "id": {
                    "$ref": "#/components/schemas/CftObjectId"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/CftObjectsCfttokenAttributes"
                  }
                },
                "example": {
                  "type": "cfttoken",
                  "id": "USER1",
                  "attributes": {
                    "value": [
                      "aa.BB.CC"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "cfttoken details upon successful modification",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCfttokenGet"
                }
              }
            }
          },
          "201": {
            "description": "cfttoken details upon successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCfttokenGet"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      },
      "delete": {
        "tags": [
          "Miscellaneous"
        ],
        "summary": "Deletes the tokens associated with a user.",
        "operationId": "BUILD_ObjectIdCfttokenDelete",
        "description": "Deletes the tokens associated with a user.",
        "responses": {
          "200": {
            "$ref": "#/components/responses/ObjectDeleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftuipref": {
      "get": {
        "tags": [
          "Miscellaneous"
        ],
        "summary": "Retrieves the cftuipref object (experimental).",
        "operationId": "BUILD_ObjectsCftuiprefGet",
        "description": "Retrieves the cftuipref object. <b>(experimental)</b>",
        "parameters": [
          {
            "$ref": "#/components/parameters/selectid"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of cftuipref",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftuiprefList"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/objects/pki/entities": {
      "get": {
        "tags": [
          "PKI"
        ],
        "summary": "Retrieves lists of certificate authority IDs.",
        "operationId": "BUILD_ObjectsPkientityGet",
        "description": "Retrieves lists of certificate authority IDs.",
        "parameters": [
          {
            "$ref": "#/components/parameters/selectid"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of pkientity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsPkientityList"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      },
      "post": {
        "tags": [
          "PKI"
        ],
        "summary": "Creates a new list of certificate authority IDs.",
        "operationId": "BUILD_ObjectIdPkientityPost",
        "description": "Creates a list of certificate authority IDs in the PKI database\nThe maximum number of CAs that you can enter for the ROOTCID parameter of the CFTSSL objects (server or client) is 10.\nTo overcome this limitation, create a list of up to 100 certificate authority IDs and set the list ID as ROOTCID in the CFTSSL object.",
        "requestBody": {
          "description": "pkientity object parameters.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "type",
                  "id",
                  "attributes"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "pkientity"
                    ]
                  },
                  "id": {
                    "$ref": "#/components/schemas/CftObjectId"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/CftObjectsPkientityAttributes"
                  }
                },
                "example": {
                  "type": "pkientity",
                  "id": "COMPANY",
                  "attributes": {
                    "certificates": [
                      "CA_Company",
                      "CA_Company_Europe",
                      "CA_Company_US",
                      "CA_Company_China"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "pkientity details upon successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsPkientityGet"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/objects/pki/entities/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/objectid"
        }
      ],
      "get": {
        "tags": [
          "PKI"
        ],
        "summary": "Retrieves a list of certificate authority IDs.",
        "operationId": "BUILD_ObjectsIdPkientityGet",
        "description": "Retrieves a list of certificate authority IDs.",
        "responses": {
          "200": {
            "description": "pkientity details upon successful query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsPkientityGet"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      },
      "put": {
        "tags": [
          "PKI"
        ],
        "summary": "Modifies a list of certificate authority IDs.",
        "operationId": "BUILD_ObjectIdPkientityPut",
        "description": "Modify a list of certificate authority IDs in the PKI database\nThe maximum number of CAs that you can enter for the ROOTCID parameter of the CFTSSL objects (server or client) is 10.\nTo overcome this limitation, manage a list of up to 100 certificate authority IDs and set the list ID as ROOTCID in the CFTSSL object.",
        "requestBody": {
          "description": "pkientity object parameters.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "type",
                  "id",
                  "attributes"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "pkientity"
                    ]
                  },
                  "id": {
                    "$ref": "#/components/schemas/CftObjectId"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/CftObjectsPkientityAttributes"
                  }
                },
                "example": {
                  "type": "pkientity",
                  "id": "COMPANY",
                  "attributes": {
                    "certificates": [
                      "CA_Company",
                      "CA_Company_Europe",
                      "CA_Company_US",
                      "CA_Company_China",
                      "CA_Company_Africa"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "pkientity details upon successful modification",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsPkientityGet"
                }
              }
            }
          },
          "201": {
            "description": "pkientity details upon successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsPkientityGet"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      },
      "delete": {
        "tags": [
          "PKI"
        ],
        "summary": "Deletes a list of certificate authority IDs.",
        "operationId": "BUILD_ObjectIdPkientityDelete",
        "description": "Deletes a list of certificate authority IDs.",
        "responses": {
          "200": {
            "$ref": "#/components/responses/ObjectDeleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/objects/pki/keys": {
      "get": {
        "tags": [
          "PKI"
        ],
        "summary": "Retrieves list of keys.",
        "operationId": "BUILD_ObjectsPkikeyGet",
        "description": "Retrieves list of keys.",
        "parameters": [
          {
            "$ref": "#/components/parameters/selectid"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of pkikey",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsPkikeyList"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      },
      "post": {
        "tags": [
          "PKI"
        ],
        "summary": "Imports a new key.",
        "operationId": "BUILD_ObjectIdPkikeyPost",
        "description": "The key data must be encoded in Base64.",
        "requestBody": {
          "description": "pkikey object parameters.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "type",
                  "id",
                  "attributes"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "pkikey"
                    ]
                  },
                  "id": {
                    "$ref": "#/components/schemas/CftObjectId"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/CftObjectsPkikeyAttributes"
                  }
                },
                "example": {
                  "type": "pkikey",
                  "id": "PARIS_SFTP",
                  "attributes": {
                    "comment": "Key to work with Paris using SFTP protocol",
                    "ikform": "SSH",
                    "ikdata": "c3No...VJTQQ=="
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "pkikey details upon successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsPkikeyGet"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/objects/pki/keys/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/objectid"
        }
      ],
      "get": {
        "tags": [
          "PKI"
        ],
        "summary": "Retrieves a key.",
        "operationId": "BUILD_ObjectsIdPkikeyGet",
        "description": "Retrieves a key.",
        "responses": {
          "200": {
            "description": "pkikey details upon successful query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsPkikeyGet"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      },
      "put": {
        "tags": [
          "PKI"
        ],
        "summary": "Modifies a key.",
        "operationId": "BUILD_ObjectIdPkikeyPut",
        "description": "The key data must be in base 64 encoding.",
        "requestBody": {
          "description": "pkikey object parameters.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "type",
                  "id",
                  "attributes"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "pkikey"
                    ]
                  },
                  "id": {
                    "$ref": "#/components/schemas/CftObjectId"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/CftObjectsPkikeyAttributes"
                  }
                },
                "example": {
                  "type": "pkikey",
                  "id": "PARIS_SFTP",
                  "attributes": {
                    "comment": "Key to work with Paris using SFTP protocol",
                    "ikform": "SSH",
                    "ikdata": "c3No...VJTQQ=="
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "pkikey details upon successful modification",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsPkikeyGet"
                }
              }
            }
          },
          "201": {
            "description": "pkikey details upon successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsPkikeyGet"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      },
      "delete": {
        "tags": [
          "PKI"
        ],
        "summary": "Deletes a key.",
        "operationId": "BUILD_ObjectIdPkikeyDelete",
        "description": "Deletes a key.",
        "responses": {
          "200": {
            "$ref": "#/components/responses/ObjectDeleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/objects/pki/keys/{id}/act": {
      "parameters": [
        {
          "$ref": "#/components/parameters/objectid"
        }
      ],
      "put": {
        "tags": [
          "PKI"
        ],
        "summary": "Activates a key.",
        "operationId": "BUILD_ActPkikeyPutKK",
        "description": "Activates a key.",
        "responses": {
          "200": {
            "description": "Key has status ACT."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/objects/pki/keys/{id}/inact": {
      "parameters": [
        {
          "$ref": "#/components/parameters/objectid"
        }
      ],
      "put": {
        "tags": [
          "PKI"
        ],
        "summary": "Deactivates a key.",
        "operationId": "BUILD_InactPkikeyPutKK",
        "description": "Deactivates a key.",
        "responses": {
          "200": {
            "description": "Key has status INACT."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/objects/pki/certificates": {
      "get": {
        "tags": [
          "PKI"
        ],
        "summary": "Retrieves list of certificates.",
        "operationId": "BUILD_ObjectsPkicerGet",
        "description": "Retrieves list of certificates.",
        "parameters": [
          {
            "$ref": "#/components/parameters/selcertid"
          },
          {
            "$ref": "#/components/parameters/SelectRootcidCertificate"
          },
          {
            "$ref": "#/components/parameters/SelectTypeCertificate"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of pkicer",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsPkicerList"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      },
      "post": {
        "tags": [
          "PKI"
        ],
        "summary": "Imports a new certificate.",
        "operationId": "BUILD_ObjectIdPkicerPost",
        "description": "The key data must be encoded in Base64.",
        "requestBody": {
          "description": "pkicer object parameters.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "type",
                  "attributes"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "pkicer"
                    ]
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/CftObjectsPkicerAttributes"
                  }
                },
                "example": {
                  "type": "pkicer",
                  "attributes": {
                    "comment": "Sample User Certificate",
                    "idata": "Certificate Data in PEM or Base64 Encoding",
                    "itype": "USER",
                    "rootcid": "2KROOT",
                    "cid": "2KL1UHIGH"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "pkicer details upon successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsPkicerGet"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/objects/pki/certificates/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/certid"
        }
      ],
      "get": {
        "tags": [
          "PKI"
        ],
        "summary": "Retrieves a certificate.",
        "operationId": "BUILD_ObjectsIdPkicerGet",
        "description": "Retrieves a certificate.",
        "responses": {
          "200": {
            "description": "pkicer details upon successful query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsPkicerGet"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      },
      "put": {
        "tags": [
          "PKI"
        ],
        "summary": "Modifies a certificate.",
        "operationId": "BUILD_ObjectIdPkicerPut",
        "description": "The key data must be in base 64 encoding.",
        "requestBody": {
          "description": "pkicer object parameters.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "type",
                  "id",
                  "attributes"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "pkicer"
                    ]
                  },
                  "id": {
                    "$ref": "#/components/schemas/CftObjectId"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/CftObjectsPkicerAttributes"
                  }
                },
                "example": {
                  "type": "pkicer",
                  "id": "2KROOT..2KL1UHIGH..U",
                  "attributes": {
                    "comment": "Sample User Certificate",
                    "idata": "Certificate Data in PEM or Base64 Encoding"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "pkicer details upon successful modification",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsPkicerGet"
                }
              }
            }
          },
          "201": {
            "description": "pkicer details upon successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsPkicerGet"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      },
      "delete": {
        "tags": [
          "PKI"
        ],
        "summary": "Deletes a certificate.",
        "operationId": "BUILD_ObjectIdPkicerDelete",
        "description": "Deletes a certificate.",
        "responses": {
          "200": {
            "$ref": "#/components/responses/ObjectDeleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/objects/pki/certificates/{id}/act": {
      "parameters": [
        {
          "$ref": "#/components/parameters/certid"
        }
      ],
      "put": {
        "tags": [
          "PKI"
        ],
        "summary": "Activates a certificate.",
        "operationId": "BUILD_ActPkicerPutKK",
        "description": "Activates a certificate.",
        "responses": {
          "200": {
            "description": "Certificate has status ACT."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/objects/pki/certificates/{id}/inact": {
      "parameters": [
        {
          "$ref": "#/components/parameters/certid"
        }
      ],
      "put": {
        "tags": [
          "PKI"
        ],
        "summary": "Deactivates a certificate.",
        "operationId": "BUILD_InactPkicerPutKK",
        "description": "Deactivates a certificate.",
        "responses": {
          "200": {
            "description": "Certificate has status INACT."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftexit": {
      "get": {
        "tags": [
          "Flows"
        ],
        "summary": "Retrieves the exit definition list",
        "operationId": "BUILD_ObjectsCftexitGet",
        "description": "Retrieves the exit definition list",
        "parameters": [
          {
            "$ref": "#/components/parameters/selectid"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of cftexit",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftexitList"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      },
      "post": {
        "tags": [
          "Flows"
        ],
        "summary": "Adds a new exit definition",
        "operationId": "BUILD_ObjectIdCftexitPost",
        "description": "Adds a new exit definition",
        "requestBody": {
          "description": "cftexit object parameters.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "type",
                  "id",
                  "attributes"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "cftexit"
                    ]
                  },
                  "id": {
                    "$ref": "#/components/schemas/CftObjectId"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/CftObjectsCftexitAttributes"
                  }
                },
                "example": {
                  "type": "cftexit",
                  "id": "cftexitf",
                  "attributes": {
                    "type": "FILE",
                    "language": "C",
                    "prog": "CFTEXITF",
                    "format": "V24",
                    "comment": "File Exit definition"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "cftexit details upon successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftexitGet"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftexit/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/objectid"
        }
      ],
      "get": {
        "tags": [
          "Flows"
        ],
        "summary": "Retrieves an exit definition",
        "operationId": "BUILD_ObjectsIdCftexitGet",
        "description": "Retrieves an exit definition",
        "responses": {
          "200": {
            "description": "cftexit details upon successful query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftexitGet"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      },
      "put": {
        "tags": [
          "Flows"
        ],
        "summary": "Adds or modifies an exit definition",
        "operationId": "BUILD_ObjectIdCftexitPut",
        "description": "Adds or modifies an exit definition",
        "requestBody": {
          "description": "cftexit object parameters.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "type",
                  "id",
                  "attributes"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "cftexit"
                    ]
                  },
                  "id": {
                    "$ref": "#/components/schemas/CftObjectId"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/CftObjectsCftexitAttributes"
                  }
                },
                "example": {
                  "type": "cftexit",
                  "id": "cftexitf",
                  "attributes": {
                    "type": "FILE",
                    "language": "C",
                    "prog": "CFTEXITF",
                    "format": "V24",
                    "comment": "File Exit definition"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "cftexit details upon successful modification",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftexitGet"
                }
              }
            }
          },
          "201": {
            "description": "cftexit details upon successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CftObjectsCftexitGet"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      },
      "delete": {
        "tags": [
          "Flows"
        ],
        "summary": "Deletes an exit definition",
        "operationId": "BUILD_ObjectIdCftexitDelete",
        "description": "Deletes an exit definition",
        "responses": {
          "200": {
            "$ref": "#/components/responses/ObjectDeleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/components/responses/OtherError"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "basicAuth": {
        "type": "http",
        "description": "HTTP Basic Authentication.",
        "scheme": "basic"
      },
      "bearerAuth": {
        "type": "http",
        "description": "HTTP Bearer Authentication (token authentication)",
        "scheme": "bearer"
      }
    },
    "schemas": {
      "TransferRequestResult": {
        "type": "object",
        "properties": {
          "partner": {
            "type": "string",
            "description": "Remote partner."
          },
          "idf": {
            "type": "string",
            "description": "Flow ID."
          },
          "idtu": {
            "type": "string",
            "description": "Transfer ID."
          },
          "idt": {
            "type": "string",
            "description": "Protocol transfer ID."
          },
          "state": {
            "type": "string",
            "description": "Transfer state."
          },
          "phase": {
            "type": "string",
            "description": "Transfer phase."
          },
          "phasestep": {
            "type": "string",
            "description": "Transfer phasestep."
          },
          "ida": {
            "type": "string",
            "description": "Transfer-related identifier."
          },
          "diagi": {
            "type": "string",
            "description": "Diagnostic identifier relative to the transfer."
          },
          "diagp": {
            "type": "string",
            "description": "Diagnostic identifier relative to the transfer."
          },
          "links": {
            "type": "object",
            "properties": {
              "rel": {
                "type": "string",
                "description": "Relation between the link and the object. Usually equal to self."
              },
              "href": {
                "type": "string",
                "description": "Link to get created-object details."
              }
            }
          }
        }
      },
      "TransferDetailsList": {
        "type": "object",
        "properties": {
          "partner": {
            "type": "string",
            "description": "Remote partner."
          },
          "direct": {
            "type": "string",
            "description": "Transfer direction (send or recv)."
          },
          "type": {
            "type": "string",
            "description": "Either a file or message."
          },
          "compatstate": {
            "type": "string",
            "description": "Transfer state."
          },
          "ack": {
            "type": "string",
            "description": "Acknowledgement."
          },
          "state": {
            "type": "string",
            "description": "Transfer state."
          },
          "phase": {
            "type": "string",
            "description": "Transfer phase."
          },
          "phasestep": {
            "type": "string",
            "description": "Transfer phasestep."
          },
          "idf": {
            "type": "string",
            "description": "Flow ID."
          },
          "idt": {
            "type": "string",
            "description": "Protocol transfer ID."
          },
          "idtu": {
            "type": "string",
            "description": "Transfer ID."
          },
          "pidtu": {
            "type": "string",
            "description": "Parent transfer ID."
          },
          "nrec": {
            "type": "string",
            "description": "Number of records transmitted."
          },
          "frec": {
            "type": "string",
            "description": "Number of file records."
          },
          "msg": {
            "type": "string",
            "description": "Message."
          },
          "diagi": {
            "type": "string",
            "description": "Diagnostic code."
          },
          "diagp": {
            "type": "string",
            "description": "Additional diagnostics."
          },
          "requser": {
            "type": "string",
            "description": "Requesting user."
          },
          "reqgroup": {
            "type": "string",
            "description": "Requesting user group."
          },
          "ida": {
            "type": "string",
            "description": "Identifier related to the transfer."
          }
        }
      },
      "Error": {
        "type": "object",
        "example": {
          "code": 99,
          "message": "Additional error details."
        },
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "detail": {
            "type": "string"
          }
        },
        "required": [
          "code",
          "message"
        ]
      },
      "TransferDetails": {
        "type": "object",
        "properties": {
          "ack": {
            "type": "string"
          },
          "ackexec": {
            "type": "string"
          },
          "ackmindate": {
            "type": "string"
          },
          "ackmintime": {
            "type": "string"
          },
          "ackstate": {
            "type": "string"
          },
          "acktimeout": {
            "type": "string"
          },
          "appstate": {
            "type": "string"
          },
          "blknum": {
            "type": "string"
          },
          "cftv": {
            "type": "string"
          },
          "chkw": {
            "type": "string"
          },
          "comment": {
            "type": "string"
          },
          "commut": {
            "type": "string"
          },
          "commutrva": {
            "type": "string"
          },
          "compatstate": {
            "type": "string"
          },
          "comprate": {
            "type": "string"
          },
          "cos": {
            "type": "string"
          },
          "counterr": {
            "type": "string"
          },
          "cycdate": {
            "type": "string"
          },
          "cycle": {
            "type": "string"
          },
          "cyctime": {
            "type": "string"
          },
          "dateb": {
            "type": "string"
          },
          "dated": {
            "type": "string"
          },
          "datee": {
            "type": "string"
          },
          "datek": {
            "type": "string"
          },
          "delete": {
            "type": "string"
          },
          "dest": {
            "type": "string"
          },
          "destexec": {
            "type": "string"
          },
          "destexeca": {
            "type": "string"
          },
          "destexecpre": {
            "type": "string"
          },
          "diagc": {
            "type": "string"
          },
          "diagi": {
            "type": "string"
          },
          "diagp": {
            "type": "string"
          },
          "diftyp": {
            "type": "string"
          },
          "direct": {
            "type": "string"
          },
          "dirnb": {
            "type": "string"
          },
          "duplicate": {
            "type": "string"
          },
          "ecar": {
            "type": "string"
          },
          "exec": {
            "type": "string"
          },
          "exece": {
            "type": "string"
          },
          "execinfo": {
            "type": "string"
          },
          "execrall": {
            "type": "string"
          },
          "execsub": {
            "type": "string"
          },
          "execsuba": {
            "type": "string"
          },
          "execsubpre": {
            "type": "string"
          },
          "facc": {
            "type": "string"
          },
          "faction": {
            "type": "string"
          },
          "fblksize": {
            "type": "string"
          },
          "fcar": {
            "type": "string"
          },
          "fcharset": {
            "type": "string"
          },
          "fcode": {
            "type": "string"
          },
          "fcomp": {
            "type": "string"
          },
          "fdate": {
            "type": "string"
          },
          "fdb": {
            "type": "string"
          },
          "fdbcomp": {
            "type": "string"
          },
          "fdelete": {
            "type": "string"
          },
          "fdisp": {
            "type": "string"
          },
          "filenotfound": {
            "type": "string"
          },
          "files": {
            "type": "string"
          },
          "filter": {
            "type": "string"
          },
          "filtertype": {
            "type": "string"
          },
          "filtyp": {
            "type": "string"
          },
          "fkeypos": {
            "type": "string"
          },
          "fkeysize": {
            "type": "string"
          },
          "flowname": {
            "type": "string"
          },
          "flrecl": {
            "type": "string"
          },
          "fname": {
            "type": "string"
          },
          "fnum": {
            "type": "string"
          },
          "forg": {
            "type": "string"
          },
          "fpad": {
            "type": "string"
          },
          "fpath": {
            "type": "string"
          },
          "frec": {
            "type": "string"
          },
          "frecfm": {
            "type": "string"
          },
          "frecfmx": {
            "type": "string"
          },
          "froot": {
            "type": "string"
          },
          "fspace": {
            "type": "string"
          },
          "fspaces": {
            "type": "string"
          },
          "fstate": {
            "type": "string"
          },
          "fsuf": {
            "type": "string"
          },
          "fsyst": {
            "type": "string"
          },
          "ftime": {
            "type": "string"
          },
          "ftname": {
            "type": "string"
          },
          "ftype": {
            "type": "string"
          },
          "funit": {
            "type": "string"
          },
          "fver": {
            "type": "string"
          },
          "group": {
            "type": "string"
          },
          "groupid": {
            "type": "string"
          },
          "ida": {
            "type": "string"
          },
          "idappl": {
            "type": "string"
          },
          "idexit": {
            "type": "string"
          },
          "idexita": {
            "type": "string"
          },
          "idexite": {
            "type": "string"
          },
          "idexitbot": {
            "type": "string"
          },
          "idexiteot": {
            "type": "string"
          },
          "idf": {
            "type": "string"
          },
          "idt": {
            "type": "string"
          },
          "idtu": {
            "type": "string"
          },
          "ipart": {
            "type": "string"
          },
          "iselect": {
            "type": "string"
          },
          "isrelay": {
            "type": "string"
          },
          "jobname": {
            "type": "string"
          },
          "lnum": {
            "type": "string"
          },
          "lpath": {
            "type": "string"
          },
          "lpath_r": {
            "type": "string"
          },
          "lracine": {
            "type": "string"
          },
          "lracine_r": {
            "type": "string"
          },
          "lsuffix": {
            "type": "string"
          },
          "lsuffix_r": {
            "type": "string"
          },
          "lunit": {
            "type": "string"
          },
          "lunit_r": {
            "type": "string"
          },
          "lunitc": {
            "type": "string"
          },
          "lunitc_r": {
            "type": "string"
          },
          "maction": {
            "type": "string"
          },
          "maxdate": {
            "type": "string"
          },
          "maxduration": {
            "type": "string"
          },
          "maxtime": {
            "type": "string"
          },
          "mindate": {
            "type": "string"
          },
          "mintime": {
            "type": "string"
          },
          "mkdir": {
            "type": "string"
          },
          "mode": {
            "type": "string"
          },
          "msg": {
            "type": "string"
          },
          "n_ackprocess": {
            "type": "string"
          },
          "n_ackprocess_err": {
            "type": "string"
          },
          "n_ackprot_pending": {
            "type": "string"
          },
          "n_nackprot_recv": {
            "type": "string"
          },
          "n_postprocess": {
            "type": "string"
          },
          "n_postprocess_err": {
            "type": "string"
          },
          "n_preprocess": {
            "type": "string"
          },
          "n_preprocess_err": {
            "type": "string"
          },
          "nblksize": {
            "type": "string"
          },
          "ncar": {
            "type": "string"
          },
          "ncharset": {
            "type": "string"
          },
          "nchkpt": {
            "type": "string"
          },
          "ncode": {
            "type": "string"
          },
          "ncomp": {
            "type": "string"
          },
          "ndays": {
            "type": "string"
          },
          "ndest": {
            "type": "string"
          },
          "netband": {
            "type": "string"
          },
          "nettyp": {
            "type": "string"
          },
          "nextdate": {
            "type": "string"
          },
          "nexttime": {
            "type": "string"
          },
          "nfname": {
            "type": "string"
          },
          "nfver": {
            "type": "string"
          },
          "nidf": {
            "type": "string"
          },
          "nidt": {
            "type": "string"
          },
          "nkeypos": {
            "type": "string"
          },
          "nkeysize": {
            "type": "string"
          },
          "nlrecl": {
            "type": "string"
          },
          "nodeid": {
            "type": "string"
          },
          "norg": {
            "type": "string"
          },
          "norig": {
            "type": "string"
          },
          "notify": {
            "type": "string"
          },
          "npad": {
            "type": "string"
          },
          "npart": {
            "type": "string"
          },
          "nrec": {
            "type": "string"
          },
          "nrecfm": {
            "type": "string"
          },
          "nrecfmx": {
            "type": "string"
          },
          "nrpart": {
            "type": "string"
          },
          "nrst": {
            "type": "string"
          },
          "nspace": {
            "type": "string"
          },
          "nspart": {
            "type": "string"
          },
          "nsyst": {
            "type": "string"
          },
          "ntf": {
            "type": "string"
          },
          "ntype": {
            "type": "string"
          },
          "opath": {
            "type": "string"
          },
          "opath_r": {
            "type": "string"
          },
          "opermsg": {
            "type": "string"
          },
          "oracine": {
            "type": "string"
          },
          "oracine_r": {
            "type": "string"
          },
          "origin": {
            "type": "string"
          },
          "osuffix": {
            "type": "string"
          },
          "osuffix_r": {
            "type": "string"
          },
          "ounit": {
            "type": "string"
          },
          "ounit_r": {
            "type": "string"
          },
          "ounitc": {
            "type": "string"
          },
          "ounitc_r": {
            "type": "string"
          },
          "pacing": {
            "type": "string"
          },
          "parm": {
            "type": "string"
          },
          "part": {
            "type": "string"
          },
          "phase": {
            "type": "string"
          },
          "phasestep": {
            "type": "string"
          },
          "pidtu": {
            "type": "string"
          },
          "postmindate": {
            "type": "string"
          },
          "postmintime": {
            "type": "string"
          },
          "poststate": {
            "type": "string"
          },
          "posttimeout": {
            "type": "string"
          },
          "preexec": {
            "type": "string"
          },
          "premindate": {
            "type": "string"
          },
          "premintime": {
            "type": "string"
          },
          "prestate": {
            "type": "string"
          },
          "pretimeout": {
            "type": "string"
          },
          "priority": {
            "type": "string"
          },
          "progress": {
            "type": "string"
          },
          "proprf": {
            "type": "string"
          },
          "protnum": {
            "type": "string"
          },
          "protocol": {
            "type": "string"
          },
          "protphase": {
            "type": "string"
          },
          "prottype": {
            "type": "string"
          },
          "prover": {
            "type": "string"
          },
          "rappl": {
            "type": "string"
          },
          "recoverystate": {
            "type": "string"
          },
          "relance": {
            "type": "string"
          },
          "reqgroup": {
            "type": "string"
          },
          "requser": {
            "type": "string"
          },
          "resync": {
            "type": "string"
          },
          "retry": {
            "type": "string"
          },
          "retryc": {
            "type": "string"
          },
          "retrym": {
            "type": "string"
          },
          "retryn": {
            "type": "string"
          },
          "retryp": {
            "type": "string"
          },
          "retryw": {
            "type": "string"
          },
          "ridtu": {
            "type": "string"
          },
          "rkerror": {
            "type": "string"
          },
          "rmsg": {
            "type": "string"
          },
          "rpart": {
            "type": "string"
          },
          "rpasswd": {
            "type": "string"
          },
          "rrename_count": {
            "type": "string"
          },
          "ruser": {
            "type": "string"
          },
          "sappl": {
            "type": "string"
          },
          "savstate": {
            "type": "string"
          },
          "savtypf": {
            "type": "string"
          },
          "selfname": {
            "type": "string"
          },
          "sentinel": {
            "type": "string"
          },
          "serial": {
            "type": "string"
          },
          "sfname": {
            "type": "string"
          },
          "sigfname": {
            "type": "string"
          },
          "sminfnm": {
            "type": "string"
          },
          "sminusr": {
            "type": "string"
          },
          "sourceappl": {
            "type": "string"
          },
          "spart": {
            "type": "string"
          },
          "spasswd": {
            "type": "string"
          },
          "ssl": {
            "type": "string"
          },
          "sslauth": {
            "type": "string"
          },
          "sslciph": {
            "type": "string"
          },
          "sslfnam": {
            "type": "string"
          },
          "sslmode": {
            "type": "string"
          },
          "sslparm": {
            "type": "string"
          },
          "sslprof": {
            "type": "string"
          },
          "sslrmca": {
            "type": "string"
          },
          "sslrmus": {
            "type": "string"
          },
          "ssluser": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "statimpl": {
            "type": "string"
          },
          "storageaccount": {
            "type": "string"
          },
          "suser": {
            "type": "string"
          },
          "targetappl": {
            "type": "string"
          },
          "tcycle": {
            "type": "string"
          },
          "timeb": {
            "type": "string"
          },
          "timed": {
            "type": "string"
          },
          "timee": {
            "type": "string"
          },
          "timek": {
            "type": "string"
          },
          "times": {
            "type": "string"
          },
          "timmaxc": {
            "type": "string"
          },
          "timmc": {
            "type": "string"
          },
          "trkr": {
            "type": "string"
          },
          "typcommut": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "typef": {
            "type": "string"
          },
          "userid": {
            "type": "string"
          },
          "workingdir": {
            "type": "string"
          },
          "wphases": {
            "type": "string"
          },
          "wphasesteps": {
            "type": "string"
          },
          "wstates": {
            "type": "string"
          },
          "wtimeout": {
            "type": "string"
          },
          "xlate": {
            "type": "string"
          },
          "archivefname": {
            "type": "string"
          }
        }
      },
      "TransferRequestReceiveFileBody": {
        "type": "object",
        "example": {
          "fname": "file to be received",
          "parm": "additional information about the transfer"
        },
        "properties": {
          "ida": {
            "type": "string"
          },
          "fname": {
            "type": "string"
          },
          "state": {
            "type": "string",
            "enum": [
              "DISP",
              "HOLD",
              "KEEP"
            ]
          },
          "wfname": {
            "type": "string"
          },
          "wstates": {
            "type": "string"
          },
          "wphases": {
            "type": "string"
          },
          "wphasesteps": {
            "type": "string"
          },
          "wtimeout": {
            "type": "integer"
          },
          "exec": {
            "type": "string"
          },
          "exece": {
            "type": "string"
          },
          "locmbx": {
            "type": "string"
          },
          "sync": {
            "type": "string",
            "enum": [
              "YES",
              "NO"
            ]
          },
          "todate": {
            "type": "string"
          },
          "totime": {
            "type": "string"
          },
          "cycdate": {
            "type": "string"
          },
          "cyctime": {
            "type": "string"
          },
          "maxdate": {
            "type": "string"
          },
          "maxtime": {
            "type": "string"
          },
          "mindate": {
            "type": "string"
          },
          "mintime": {
            "type": "string"
          },
          "maxduration": {
            "type": "string"
          },
          "ackmindate": {
            "type": "string"
          },
          "ackmintime": {
            "type": "string"
          },
          "postmindate": {
            "type": "string"
          },
          "postmintime": {
            "type": "string"
          },
          "ackexEC": {
            "type": "string"
          },
          "ackstate": {
            "type": "string",
            "enum": [
              "REQUIRE",
              "IGNORE"
            ]
          },
          "acktimeout": {
            "type": "string"
          },
          "appcycid": {
            "type": "string"
          },
          "appobjid": {
            "type": "string"
          },
          "comment": {
            "type": "string"
          },
          "cos": {
            "type": "string"
          },
          "dirnb": {
            "type": "string"
          },
          "daction": {
            "type": "string",
            "enum": [
              "ERROR",
              "RESUME"
            ]
          },
          "execrall": {
            "type": "string",
            "enum": [
              "ALL",
              "PARENT",
              "CHILDREN"
            ]
          },
          "exit": {
            "type": "string"
          },
          "facc": {
            "type": "string",
            "enum": [
              " ",
              "V",
              "H",
              "S",
              "0"
            ]
          },
          "faction": {
            "type": "string",
            "enum": [
              "ERASE",
              "DELETE",
              "VERIFY",
              "CONCAT",
              "RENAME"
            ]
          },
          "fblksize": {
            "type": "string"
          },
          "fcharset": {
            "type": "string"
          },
          "fcode": {
            "type": "string",
            "enum": [
              "ASCII",
              "EBCDIC",
              "BINARY"
            ]
          },
          "fcomp": {
            "type": "string"
          },
          "fdb": {
            "type": "string"
          },
          "fdisp": {
            "type": "string",
            "enum": [
              "OLD",
              "NEW",
              "BOTH"
            ]
          },
          "file": {
            "type": "string",
            "enum": [
              "FIRST",
              "ALL"
            ]
          },
          "fkeylen": {
            "type": "string"
          },
          "fkeypos": {
            "type": "string"
          },
          "flrecl": {
            "type": "string"
          },
          "forg": {
            "type": "string",
            "enum": [
              "SEQ",
              "INDEXED",
              "IND",
              "DIRECT",
              "DIR",
              "PART",
              "PAR"
            ]
          },
          "fpad": {
            "type": "string"
          },
          "frecfm": {
            "type": "string",
            "enum": [
              "F",
              "U",
              "V"
            ]
          },
          "fspace": {
            "type": "string"
          },
          "ftype": {
            "type": "string",
            "enum": [
              "B",
              "V",
              "T",
              "O",
              "X",
              "J"
            ]
          },
          "maction": {
            "type": "string",
            "enum": [
              "REPLACE"
            ]
          },
          "ncharset": {
            "type": "string"
          },
          "ncomp": {
            "type": "string"
          },
          "netband": {
            "type": "string"
          },
          "nfver": {
            "type": "integer"
          },
          "notify": {
            "type": "string"
          },
          "poststate": {
            "type": "string",
            "enum": [
              "DISP"
            ]
          },
          "posttimeout": {
            "type": "string"
          },
          "pri": {
            "type": "string"
          },
          "rappl": {
            "type": "string"
          },
          "rpasswd": {
            "type": "string"
          },
          "ruser": {
            "type": "string"
          },
          "sappl": {
            "type": "string"
          },
          "serial": {
            "type": "string",
            "enum": [
              "Y",
              "X"
            ]
          },
          "spasswd": {
            "type": "string"
          },
          "suser": {
            "type": "string"
          },
          "trk": {
            "type": "string",
            "enum": [
              "UNDEFINED",
              "ALL",
              "SUMMARY",
              "NO"
            ]
          },
          "xlate": {
            "type": "string"
          },
          "filenotfound": {
            "type": "string",
            "enum": [
              "ABORT",
              "IGNORE"
            ]
          },
          "workingdir": {
            "type": "string"
          },
          "cycle": {
            "type": "integer"
          },
          "fdate": {
            "type": "integer"
          },
          "ftime": {
            "type": "integer"
          },
          "nidf": {
            "type": "string"
          },
          "nfname": {
            "type": "string"
          },
          "parm": {
            "type": "string"
          },
          "prot": {
            "type": "string"
          },
          "tcycle": {
            "type": "string",
            "enum": [
              "MIN",
              "DAY",
              "MONTH"
            ]
          },
          "typ": {
            "type": "integer"
          }
        }
      },
      "TransferRequestSendFileBody": {
        "type": "object",
        "example": {
          "fname": "file to be sent",
          "parm": "additional information about the transfer"
        },
        "properties": {
          "ida": {
            "type": "string"
          },
          "fname": {
            "type": "string"
          },
          "state": {
            "type": "string",
            "enum": [
              "DISP",
              "HOLD",
              "KEEP"
            ]
          },
          "wfname": {
            "type": "string"
          },
          "wstates": {
            "type": "string"
          },
          "wphases": {
            "type": "string"
          },
          "wphasesteps": {
            "type": "string"
          },
          "wtimeout": {
            "type": "integer"
          },
          "exec": {
            "type": "string"
          },
          "exece": {
            "type": "string"
          },
          "locmbx": {
            "type": "string"
          },
          "sync": {
            "type": "string",
            "enum": [
              "YES",
              "NO"
            ]
          },
          "todate": {
            "type": "string"
          },
          "totime": {
            "type": "string"
          },
          "cycdate": {
            "type": "string"
          },
          "cyctime": {
            "type": "string"
          },
          "maxdate": {
            "type": "string"
          },
          "maxtime": {
            "type": "string"
          },
          "mindate": {
            "type": "string"
          },
          "mintime": {
            "type": "string"
          },
          "maxduration": {
            "type": "string"
          },
          "ackmindate": {
            "type": "string"
          },
          "ackmintime": {
            "type": "string"
          },
          "postmindate": {
            "type": "string"
          },
          "postmintime": {
            "type": "string"
          },
          "preexec": {
            "type": "string"
          },
          "prestate": {
            "type": "string",
            "enum": [
              "DISP",
              "HOLD"
            ]
          },
          "pretimeout": {
            "type": "string"
          },
          "premindate": {
            "type": "string"
          },
          "premintime": {
            "type": "string"
          },
          "ackexec": {
            "type": "string"
          },
          "ackstate": {
            "type": "string",
            "enum": [
              "REQUIRE",
              "IGNORE"
            ]
          },
          "acktimeout": {
            "type": "string"
          },
          "appcycid": {
            "type": "string"
          },
          "appobjid": {
            "type": "string"
          },
          "comment": {
            "type": "string"
          },
          "cos": {
            "type": "string"
          },
          "cycle": {
            "type": "string"
          },
          "daction": {
            "type": "string",
            "enum": [
              "ERROR",
              "RESUME"
            ]
          },
          "execsub": {
            "type": "string",
            "enum": [
              "LIST",
              "FILE",
              "SUBF"
            ]
          },
          "execsuba": {
            "type": "string",
            "enum": [
              "LIST",
              "FILE",
              "SUBF"
            ]
          },
          "execsubpre": {
            "type": "string",
            "enum": [
              "LIST",
              "FILE",
              "SUBF"
            ]
          },
          "exit": {
            "type": "string"
          },
          "facc": {
            "type": "string",
            "enum": [
              " ",
              "V",
              "H",
              "S",
              "0"
            ]
          },
          "faction": {
            "type": "string",
            "enum": [
              "ERASE",
              "DELETE",
              "NONE",
              "ROTATE",
              "ARCHIVE"
            ]
          },
          "fblksize": {
            "type": "string"
          },
          "fcharset": {
            "type": "string"
          },
          "fcode": {
            "type": "string",
            "enum": [
              "ASCII",
              "EBCDIC",
              "BINARY"
            ]
          },
          "fcomp": {
            "type": "string"
          },
          "fdb": {
            "type": "string"
          },
          "fdisp": {
            "type": "string",
            "enum": [
              "OLD",
              "SHR",
              "CHECK"
            ]
          },
          "fkeylen": {
            "type": "string"
          },
          "fkeypos": {
            "type": "string"
          },
          "flrecl": {
            "type": "string"
          },
          "forg": {
            "type": "string",
            "enum": [
              "SEQ",
              "INDEXED",
              "IND",
              "DIRECT",
              "DIR",
              "PART",
              "PAR"
            ]
          },
          "fnameabs": {
            "type": "string",
            "enum": [
              "YES",
              "NO"
            ]
          },
          "fpad": {
            "type": "string"
          },
          "frecfm": {
            "type": "string",
            "enum": [
              "F",
              "V",
              "U"
            ]
          },
          "fspace": {
            "type": "string"
          },
          "ftype": {
            "type": "string",
            "enum": [
              "B",
              "V",
              "T",
              "O",
              "X",
              "J"
            ]
          },
          "nblksize": {
            "type": "string"
          },
          "ncharset": {
            "type": "string"
          },
          "ncode": {
            "type": "string",
            "enum": [
              "ASCII",
              "EBCDIC",
              "BINARY"
            ]
          },
          "ncomp": {
            "type": "string"
          },
          "netband": {
            "type": "string"
          },
          "nfname": {
            "type": "string"
          },
          "nkeylen": {
            "type": "string"
          },
          "nkeypos": {
            "type": "string"
          },
          "nlrecl": {
            "type": "string"
          },
          "notify": {
            "type": "string"
          },
          "npad": {
            "type": "string"
          },
          "nrecfm": {
            "type": "string",
            "enum": [
              "F",
              "V",
              "U"
            ]
          },
          "nspace": {
            "type": "string"
          },
          "ntype": {
            "type": "string"
          },
          "parm": {
            "type": "string"
          },
          "poststate": {
            "type": "string",
            "enum": [
              "DISP"
            ]
          },
          "posttimeout": {
            "type": "string"
          },
          "pri": {
            "type": "string"
          },
          "rappl": {
            "type": "string"
          },
          "rpasswd": {
            "type": "string"
          },
          "ruser": {
            "type": "string"
          },
          "sappl": {
            "type": "string"
          },
          "selfname": {
            "type": "string"
          },
          "sigfname": {
            "type": "string"
          },
          "serial": {
            "type": "string",
            "enum": [
              "Y",
              "X"
            ]
          },
          "spart": {
            "type": "string"
          },
          "spasswd": {
            "type": "string"
          },
          "suser": {
            "type": "string"
          },
          "tcycle": {
            "type": "string",
            "enum": [
              "MIN",
              "DAY",
              "MONTH"
            ]
          },
          "trk": {
            "type": "string",
            "enum": [
              "UNDEFINED",
              "ALL",
              "SUMMARY",
              "NO"
            ]
          },
          "xlate": {
            "type": "string"
          },
          "filenotfound": {
            "type": "string",
            "enum": [
              "ABORT",
              "IGNORE"
            ]
          },
          "archivefname": {
            "type": "string"
          },
          "workingdir": {
            "type": "string"
          },
          "fdate": {
            "type": "integer"
          },
          "ftime": {
            "type": "integer"
          },
          "ipart": {
            "type": "string"
          },
          "nidf": {
            "type": "string"
          },
          "prot": {
            "type": "string"
          },
          "typ": {
            "type": "integer"
          }
        }
      },
      "TransferRequestSendMessageBody": {
        "type": "object",
        "required": [
          "msg"
        ],
        "example": {
          "msg": "Sample of Message data"
        },
        "properties": {
          "ida": {
            "type": "string"
          },
          "msg": {
            "type": "string"
          },
          "state": {
            "type": "string",
            "enum": [
              "DISP",
              "HOLD",
              "KEEP"
            ]
          },
          "exec": {
            "type": "string"
          },
          "exece": {
            "type": "string"
          },
          "locmbx": {
            "type": "string"
          },
          "sync": {
            "type": "string",
            "enum": [
              "YES",
              "NO"
            ]
          },
          "todate": {
            "type": "string"
          },
          "totime": {
            "type": "string"
          },
          "cycdate": {
            "type": "integer"
          },
          "cyctime": {
            "type": "integer"
          },
          "maxdate": {
            "type": "string"
          },
          "maxtime": {
            "type": "string"
          },
          "mindate": {
            "type": "string"
          },
          "mintime": {
            "type": "string"
          },
          "maxduration": {
            "type": "integer"
          },
          "appcycid": {
            "type": "string"
          },
          "appobjid": {
            "type": "string"
          },
          "ipart": {
            "type": "string"
          },
          "pri": {
            "type": "integer"
          },
          "prot": {
            "type": "string"
          },
          "rappl": {
            "type": "string"
          },
          "ruser": {
            "type": "string"
          },
          "sappl": {
            "type": "string"
          },
          "spart": {
            "type": "string"
          },
          "suser": {
            "type": "string"
          },
          "tcycle": {
            "type": "string",
            "enum": [
              "MIN",
              "DAY",
              "MONTH"
            ]
          },
          "trk": {
            "type": "string",
            "enum": [
              "UNDEFINED",
              "ALL",
              "SUMMARY",
              "NO"
            ]
          },
          "cycle": {
            "type": "integer"
          },
          "typ": {
            "type": "integer"
          }
        }
      },
      "TransferRequestSendReplyBody": {
        "type": "object",
        "required": [
          "msg"
        ],
        "example": {
          "msg": "Validate the Transfer"
        },
        "properties": {
          "ida": {
            "type": "string"
          },
          "msg": {
            "type": "string"
          },
          "state": {
            "type": "string",
            "enum": [
              "DISP",
              "HOLD",
              "KEEP"
            ]
          },
          "exec": {
            "type": "string"
          },
          "exece": {
            "type": "string"
          },
          "locmbx": {
            "type": "string"
          },
          "sync": {
            "type": "string",
            "enum": [
              "YES",
              "NO"
            ]
          },
          "todate": {
            "type": "string"
          },
          "totime": {
            "type": "string"
          },
          "cycdate": {
            "type": "integer"
          },
          "cyctime": {
            "type": "integer"
          },
          "maxdate": {
            "type": "string"
          },
          "maxtime": {
            "type": "string"
          },
          "mindate": {
            "type": "string"
          },
          "mintime": {
            "type": "string"
          },
          "maxduration": {
            "type": "integer"
          },
          "appcycid": {
            "type": "string"
          },
          "appobjid": {
            "type": "string"
          },
          "ipart": {
            "type": "string"
          },
          "pri": {
            "type": "integer"
          },
          "prot": {
            "type": "string"
          },
          "rappl": {
            "type": "string"
          },
          "ruser": {
            "type": "string"
          },
          "sappl": {
            "type": "string"
          },
          "spart": {
            "type": "string"
          },
          "suser": {
            "type": "string"
          },
          "tcycle": {
            "type": "string",
            "enum": [
              "MIN",
              "DAY",
              "MONTH"
            ]
          },
          "trk": {
            "type": "string",
            "enum": [
              "UNDEFINED",
              "ALL",
              "SUMMARY",
              "NO"
            ]
          },
          "typ": {
            "type": "integer"
          }
        }
      },
      "TransferRequestSendNackBody": {
        "type": "object",
        "required": [
          "msg"
        ],
        "example": {
          "msg": "Invalidate the transfer",
          "diag": 8
        },
        "properties": {
          "ida": {
            "type": "string"
          },
          "msg": {
            "type": "string"
          },
          "state": {
            "type": "string",
            "enum": [
              "DISP",
              "HOLD",
              "KEEP"
            ]
          },
          "exec": {
            "type": "string"
          },
          "exece": {
            "type": "string"
          },
          "locmbx": {
            "type": "string"
          },
          "sync": {
            "type": "string",
            "enum": [
              "YES",
              "NO"
            ]
          },
          "todate": {
            "type": "string"
          },
          "totime": {
            "type": "string"
          },
          "cycdate": {
            "type": "integer"
          },
          "cyctime": {
            "type": "integer"
          },
          "maxdate": {
            "type": "string"
          },
          "maxtime": {
            "type": "string"
          },
          "mindate": {
            "type": "string"
          },
          "mintime": {
            "type": "string"
          },
          "maxduration": {
            "type": "integer"
          },
          "appcycid": {
            "type": "string"
          },
          "appobjid": {
            "type": "string"
          },
          "ipart": {
            "type": "string"
          },
          "pri": {
            "type": "integer"
          },
          "prot": {
            "type": "string"
          },
          "rappl": {
            "type": "string"
          },
          "ruser": {
            "type": "string"
          },
          "sappl": {
            "type": "string"
          },
          "spart": {
            "type": "string"
          },
          "suser": {
            "type": "string"
          },
          "tcycle": {
            "type": "string",
            "enum": [
              "MIN",
              "DAY",
              "MONTH"
            ]
          },
          "trk": {
            "type": "string",
            "enum": [
              "UNDEFINED",
              "ALL",
              "SUMMARY",
              "NO"
            ]
          },
          "diag": {
            "type": "integer"
          },
          "typ": {
            "type": "integer"
          }
        }
      },
      "TransferRequestEndBody": {
        "type": "object",
        "example": {
          "diagc": "Move the transfer in status X"
        },
        "properties": {
          "diagc": {
            "type": "string"
          },
          "fname": {
            "type": "string"
          },
          "nfname": {
            "type": "string"
          },
          "sigfname": {
            "type": "string"
          },
          "rappl": {
            "type": "string"
          },
          "sappl": {
            "type": "string"
          },
          "ruser": {
            "type": "string"
          },
          "suser": {
            "type": "string"
          },
          "rpasswd": {
            "type": "string"
          },
          "spasswd": {
            "type": "string"
          },
          "istate": {
            "type": "string",
            "enum": [
              "NO",
              "YES"
            ]
          },
          "phase": {
            "type": "string"
          },
          "phasestep": {
            "type": "string"
          },
          "appstate": {
            "type": "string"
          }
        }
      },
      "RespObjectLinks": {
        "type": "object",
        "properties": {
          "links": {
            "$ref": "#/components/schemas/ObjectLinks"
          }
        }
      },
      "CftObjectsAttributes": {
        "type": "object",
        "properties": {
          "name": {
            "description": "Attribute name",
            "type": "string"
          },
          "value": {
            "description": "Attribute value",
            "type": "string"
          }
        }
      },
      "ObjectLinks": {
        "type": "object",
        "properties": {
          "rel": {
            "type": "string",
            "description": "Relation between the link and the object. Usually equal to self."
          },
          "href": {
            "type": "string",
            "description": "Link to get created-object."
          }
        }
      },
      "ObjectSelfLinks": {
        "type": "object",
        "properties": {
          "self": {
            "description": "Self link to the Request URL."
          }
        }
      },
      "CftObjectId": {
        "description": "object id",
        "type": "string",
        "minLength": 1,
        "maxLength": 32
      },
      "CftPartnerId": {
        "description": "object id",
        "type": "string",
        "minLength": 1,
        "maxLength": 64
      },
      "CftTcpClassId": {
        "description": "Class of the TCP local resource(s) used to establish the connection with the partner\nThe maximum is platform dependant\n- 8 Unix, Tandem\n- 16 VMS, OS400\n- 32 z/OS\n- 64 Windows",
        "type": "string",
        "pattern": "[0-9]{1,2}",
        "minLength": 1,
        "maxLength": 2
      },
      "CftObjectUconfId": {
        "description": "Uconf definition ID.",
        "type": "string",
        "minLength": 1,
        "maxLength": 512
      },
      "CftEnumORIGIN": {
        "description": "Application Origin",
        "default": "DESIGNER",
        "type": "string",
        "enum": [
          "CFTUTIL",
          "DESIGNER",
          "COPILOT"
        ]
      },
      "CftCmdHostDetails": {
        "type": "object",
        "properties": {
          "hostname": {
            "description": "HostName",
            "type": "string"
          },
          "host_address": {
            "description": "Host address that is accessible from the other hosts.",
            "type": "string"
          },
          "state": {
            "description": "Copilot Server State",
            "type": "string",
            "enum": [
              "INITIALIZING",
              "STARTING",
              "RUNNING",
              "STOPPING",
              "STOPPED",
              "ERROR"
            ]
          },
          "timestamp": {
            "description": "Copilot Server start timestamp",
            "type": "string",
            "format": "date-time"
          },
          "pid": {
            "description": "Copilot Server PID or JobName (z/OS)",
            "type": "string"
          }
        }
      },
      "CftCmdNodeDetails": {
        "type": "object",
        "properties": {
          "id": {
            "description": "node ident",
            "type": "number"
          },
          "node_state": {
            "description": "Node State",
            "type": "string",
            "enum": [
              "DISABLED",
              "ENABLED_STOPPED",
              "ENABLED_STARTED",
              "DISABLING_STOPPED",
              "DISABLING_STARTED"
            ]
          },
          "cft_state": {
            "description": "CFT Server State",
            "type": "string",
            "enum": [
              "INITIALIZING",
              "STARTING",
              "RUNNING",
              "STOPPING",
              "STOPPED",
              "ERROR"
            ]
          },
          "timestamp": {
            "description": "CFT Server start timestamp",
            "type": "string",
            "format": "date-time"
          },
          "hostname": {
            "description": "HostName",
            "type": "string"
          },
          "pid": {
            "description": "Copilot Server PID or JobName (z/OS)",
            "type": "string"
          },
          "configuration_version": {
            "description": "Current configuration version",
            "type": "string"
          }
        }
      },
      "CftCmdNewHostDetails": {
        "type": "object",
        "properties": {
          "hostname": {
            "description": "HostName",
            "type": "string"
          },
          "host_address": {
            "description": "Host address that is accessible from the other hosts.",
            "type": "string"
          }
        }
      },
      "CftObjectsCfttokenMetadataproperties": {
        "type": "object",
        "properties": {
          "issue": {
            "description": "Token issue date (Timestamp Epoch)",
            "type": "integer",
            "format": "int64"
          },
          "expiration": {
            "description": "Token expiration date (Timestamp Epoch)",
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "CftObjectsCftPartActDetails": {
        "type": "object",
        "properties": {
          "mode": {
            "description": "Mode to be activated. Default is **BOTH**.",
            "type": "string",
            "enum": [
              "BOTH",
              "REQUESTER",
              "SERVER"
            ]
          }
        }
      },
      "CftObjectsCftPartInactDetails": {
        "type": "object",
        "properties": {
          "mode": {
            "description": "Mode to be deactivated. Default is **BOTH**.",
            "type": "string",
            "enum": [
              "BOTH",
              "REQUESTER",
              "SERVER"
            ]
          },
          "force": {
            "description": "Stops any transfers in progress involving the partner. Default is **NO**.",
            "type": "string",
            "enum": [
              "NO",
              "YES"
            ]
          }
        }
      },
      "CftObjectsCftprotAttributesTypePesitAll": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/CftObjectsCftprotAttributesTypePesitProfAny"
          }
        ],
        "discriminator": {
          "propertyName": "prof",
          "mapping": {
            "ANY": "#/components/schemas/CftObjectsCftprotAttributesTypePesitProfAny"
          }
        }
      },
      "CftObjectsCftuconfList": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "links": {
            "$ref": "#/components/schemas/ObjectSelfLinks"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CftObjectsCftuconfGet"
            }
          }
        }
      },
      "CftObjectsCftuconfGet": {
        "type": "object",
        "required": [
          "type",
          "id",
          "attributes"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "cftuconf"
            ]
          },
          "id": {
            "type": "string"
          },
          "attributes": {
            "$ref": "#/components/schemas/CftObjectsCftuconfAttributes"
          },
          "links": {
            "$ref": "#/components/schemas/ObjectSelfLinks"
          }
        }
      },
      "CftObjectsCftuconfAttributes": {
        "type": "object",
        "properties": {
          "resolvedvalue": {
            "description": "Definition value.",
            "type": "string",
            "maxLength": 512
          },
          "value": {
            "description": "Default Value.",
            "type": "string"
          },
          "help": {
            "description": "Information about the definition.",
            "type": "string"
          },
          "type": {
            "description": "Type of definition",
            "type": "string",
            "enum": [
              "int",
              "string"
            ]
          },
          "modified": {
            "description": "Origin of the definition.",
            "type": "string",
            "enum": [
              "USER",
              "DEFAULT"
            ]
          }
        }
      },
      "CftObjectsCftuconfSet": {
        "type": "object",
        "properties": {
          "value": {
            "description": "New parameter value.",
            "type": "string",
            "maxLength": 512
          }
        }
      },
      "CftLoginDetails": {
        "type": "object",
        "required": [
          "username",
          "token"
        ],
        "properties": {
          "username": {
            "type": "string"
          },
          "token": {
            "type": "string",
            "description": "Session Token."
          }
        }
      },
      "CftEnumXlate": {
        "description": "CFTXLATE json object type",
        "type": "string",
        "enum": [
          "cftxlatesendasciiascii",
          "cftxlatesendasciiebcdic",
          "cftxlatesendebcdicebcdic",
          "cftxlatesendebcdicascii",
          "cftxlaterecvasciiascii",
          "cftxlaterecvasciiebcdic",
          "cftxlaterecvebcdicebcdic",
          "cftxlaterecvebcdicascii"
        ]
      },
      "CftEnumCertificate": {
        "description": "Certificate json object type",
        "type": "string",
        "enum": [
          "ROOT",
          "INTER",
          "USER"
        ]
      },
      "CftEnumObjectsType": {
        "description": "CFT object type",
        "type": "string",
        "enum": [
          "cftpart",
          "cftsendno",
          "cftsendyes",
          "cftrecv",
          "cftdest",
          "cftauth",
          "cftapplboth",
          "cftapplsend",
          "cftapplrecv",
          "cftcron",
          "cftfolder",
          "cftrole",
          "cftpriv",
          "cftsslclient",
          "cftsslserver",
          "cftsshclient",
          "cftsshserver",
          "cftcat",
          "cftcom",
          "cftlog",
          "cftnet",
          "cftparm",
          "cftprot",
          "cftaccnt",
          "cftxlatesendasciiascii",
          "cftxlatesendasciiebcdic",
          "cftxlatesendebcdicebcdic",
          "cftxlatesendebcdicascii",
          "cftxlaterecvasciiascii",
          "cftxlaterecvasciiebcdic",
          "cftxlaterecvebcdicebcdic",
          "cftxlaterecvebcdicascii",
          "cfttoken",
          "cftuipref",
          "pkientity",
          "pkikey",
          "pkicer",
          "cftexit"
        ]
      },
      "CftEnumObjectsTypeSchema": {
        "description": "CFT object type schema",
        "type": "object",
        "anyOf": [
          {
            "$ref": "#/components/schemas/CftObjectsCftpartAttributes"
          },
          {
            "$ref": "#/components/schemas/CftObjectsCftsendAttributes"
          },
          {
            "$ref": "#/components/schemas/CftObjectsCftrecvAttributes"
          },
          {
            "$ref": "#/components/schemas/CftObjectsCftdestAttributes"
          },
          {
            "$ref": "#/components/schemas/CftObjectsCftauthAttributes"
          },
          {
            "$ref": "#/components/schemas/CftObjectsCftapplAttributes"
          },
          {
            "$ref": "#/components/schemas/CftObjectsCftcronAttributes"
          },
          {
            "$ref": "#/components/schemas/CftObjectsCftfolderAttributes"
          },
          {
            "$ref": "#/components/schemas/CftObjectsCftroleAttributes"
          },
          {
            "$ref": "#/components/schemas/CftObjectsCftprivAttributes"
          },
          {
            "$ref": "#/components/schemas/CftObjectsCftsslAttributesClient"
          },
          {
            "$ref": "#/components/schemas/CftObjectsCftsslAttributesServer"
          },
          {
            "$ref": "#/components/schemas/CftObjectsCftsshAttributesClient"
          },
          {
            "$ref": "#/components/schemas/CftObjectsCftsshAttributesServer"
          },
          {
            "$ref": "#/components/schemas/CftObjectsCftcatAttributes"
          },
          {
            "$ref": "#/components/schemas/CftObjectsCftcomAttributes"
          },
          {
            "$ref": "#/components/schemas/CftObjectsCftlogAttributes"
          },
          {
            "$ref": "#/components/schemas/CftObjectsCftnetAttributes"
          },
          {
            "$ref": "#/components/schemas/CftObjectsCftparmAttributes"
          },
          {
            "$ref": "#/components/schemas/CftObjectsCftprotAttributes"
          },
          {
            "$ref": "#/components/schemas/CftObjectsCftaccntAttributes"
          },
          {
            "$ref": "#/components/schemas/CftObjectsCftxlateAttributes"
          },
          {
            "$ref": "#/components/schemas/CftObjectsCfttokenAttributes"
          },
          {
            "$ref": "#/components/schemas/CftObjectsCftuiprefAttributes"
          },
          {
            "$ref": "#/components/schemas/CftObjectsPkientityAttributes"
          },
          {
            "$ref": "#/components/schemas/CftObjectsPkikeyAttributes"
          },
          {
            "$ref": "#/components/schemas/CftObjectsPkicerAttributes"
          },
          {
            "$ref": "#/components/schemas/CftObjectsCftexitAttributes"
          }
        ]
      },
      "CftObjectsCftexitList": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "links": {
            "$ref": "#/components/schemas/ObjectSelfLinks"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CftObjectsCftexitGetInfo"
            }
          }
        },
        "example": {
          "links": {
            "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftexit"
          },
          "data": [
            {
              "type": "cftexit",
              "id": "cftexitf",
              "attributes": {
                "type": "FILE",
                "language": "C",
                "prog": "CFTEXITF",
                "format": "V24",
                "comment": "File Exit definition",
                "origin": "DESIGNER"
              },
              "links": {
                "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftexit"
              }
            }
          ]
        }
      },
      "CftObjectsCftexitGet": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "links": {
            "$ref": "#/components/schemas/ObjectSelfLinks"
          },
          "data": {
            "$ref": "#/components/schemas/CftObjectsCftexitGetInfo"
          }
        },
        "example": {
          "links": {
            "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftexit/cftexitf"
          },
          "data": {
            "type": "cftexit",
            "id": "cftexitf",
            "attributes": {
              "type": "FILE",
              "language": "C",
              "prog": "CFTEXITF",
              "format": "V24",
              "comment": "File Exit definition",
              "origin": "DESIGNER"
            }
          }
        }
      },
      "CftObjectsCftexitGetInfo": {
        "type": "object",
        "required": [
          "type",
          "id",
          "attributes"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "cftexit"
            ]
          },
          "id": {
            "type": "string"
          },
          "attributes": {
            "$ref": "#/components/schemas/CftObjectsCftexitAttributes"
          },
          "links": {
            "$ref": "#/components/schemas/ObjectSelfLinks"
          }
        }
      },
      "CftObjectsCftexitAttributes": {
        "type": "object",
        "properties": {
          "comment": {
            "description": "Free comment Case Insensitive",
            "type": "string",
            "maxLength": 80
          },
          "language": {
            "description": "Programming language of the application that uses the statistical data Case Insensitive",
            "default": "COBOL",
            "type": "string",
            "enum": [
              "COBOL",
              "C"
            ]
          },
          "origin": {
            "$ref": "#/components/schemas/CftEnumORIGIN"
          },
          "parm": {
            "description": "Passes information from the EXIT to the user application The z/OS, IBM i, and OpenVMS platforms are case insensitive; place the value between double quotes to ensure case sensitivity.",
            "type": "string",
            "maxLength": 64
          },
          "prog": {
            "description": "The executable module (length of 512 characters) that corresponds to the EXIT task to activate The z/OS, IBM i, and OpenVMS platforms are case insensitive; place the value between double quotes to ensure case sensitivity.",
            "default": "CFTEXIT",
            "type": "string",
            "maxLength": 512
          },
          "format": {
            "description": "Format for the communication area.",
            "default": "V23",
            "type": "string",
            "enum": [
              "V23",
              "V24"
            ]
          },
          "type": {
            "description": "Exit type Case Insensitive",
            "default": "FILE",
            "type": "string",
            "enum": [
              "FILE",
              "ACCESS",
              "ETEBAC",
              "EXEC",
              "BOT"
            ]
          },
          "reserv": {
            "description": "Size, in bytes, of the user work area.\nThe default is 16384 for a FILE type exit, otherwise it is 1024.\nThe maximum is 16384 for a FILE type exit, otherwise it is 8192.",
            "type": "integer",
            "minimum": 0
          },
          "waittask": {
            "description": "Use this field to set the inactivity time of the EXIT task.\nValid only for FILE or ACCESS type exits.",
            "type": "integer",
            "minimum": 1,
            "maximum": 1441,
            "default": 1441
          }
        }
      },
      "CftObjectsPkicerList": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "links": {
            "$ref": "#/components/schemas/ObjectSelfLinks"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CftObjectsPkicerGetInfo"
            }
          }
        },
        "example": {
          "links": {
            "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/pki/certificates"
          },
          "data": [
            {
              "type": "pkicer",
              "id": "2KROOT..2KROOT..R",
              "attributes": {
                "state": "ACT",
                "comment": "Sample Root Certificate",
                "idata": "Certificate Data Base64 Encoding (DER Format)",
                "itype": "ROOT",
                "rootcid": "2KROOT",
                "cid": "2KROOT"
              },
              "meta": {
                "signer": "2KROOT",
                "serial": "20",
                "notbefore": "2009-07-28T00:00:00.000Z",
                "notafter": "2029-07-22T23:59:59.000Z",
                "subject": "/C=FR/ST=HAUTS-DE-SEINE/L=PUTEAUX/O=CFT_SAMPLE/OU=CFT_SAMPLE/CN=2k_root",
                "issuer": "/C=FR/ST=HAUTS-DE-SEINE/L=PUTEAUX/O=CFT_SAMPLE/OU=CFT_SAMPLE/CN=2k_root",
                "keyusage": [
                  "Digital signature",
                  "Non repudiation",
                  "Key encipherment",
                  "Data encipherment",
                  "Key agreement",
                  "Key cert sign",
                  "Crl sign",
                  "Encipher only"
                ]
              },
              "links": {
                "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/pki/certificates/2KROOT..2KROOT..R"
              }
            },
            {
              "type": "pkicer",
              "id": "2KROOT..2KL1UHIGH..U",
              "attributes": {
                "state": "ACT",
                "comment": "Sample User Certificate",
                "idata": "Certificate Data Base64 Encoding (DER Format)",
                "itype": "USER",
                "rootcid": "2KROOT",
                "cid": "2KL1UHIGH"
              },
              "meta": {
                "signer": "2KROOT",
                "serial": "28",
                "notbefore": "2018-04-16T00:00:00.000Z",
                "notafter": "2029-07-22T23:59:59.000Z",
                "subject": "/C=FR/ST=HAUTS-DE-SEINE/L=PUTEAUX/O=CFT_SAMPLE/OU=CFT_L_SAMPLE/CN=2k_l1_user_pubexp_high",
                "issuer": "/C=FR/ST=HAUTS-DE-SEINE/L=PUTEAUX/O=CFT_SAMPLE/OU=CFT_SAMPLE/CN=2k_root",
                "keyusage": [
                  "Key agreement",
                  "Key cert sign",
                  "Encipher only"
                ],
                "keyusageext": [
                  "Server authentication",
                  "Client authentication"
                ]
              },
              "links": {
                "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/pki/certificates/2KROOT..2KL1UHIGH..U"
              }
            }
          ]
        }
      },
      "CftObjectsPkicerGet": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "links": {
            "$ref": "#/components/schemas/ObjectSelfLinks"
          },
          "data": {
            "$ref": "#/components/schemas/CftObjectsPkicerGetInfo"
          }
        },
        "example": {
          "links": {
            "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/pki/certificates/2KROOT..2KL1UHIGH..U"
          },
          "data": {
            "type": "pkicer",
            "id": "2KROOT..2KL1UHIGH..U",
            "attributes": {
              "state": "ACT",
              "comment": "Sample User Certificate",
              "idata": "Certificate Data Base64 Encoding (DER Format)",
              "itype": "USER",
              "rootcid": "2KROOT",
              "cid": "2KL1UHIGH"
            },
            "meta": {
              "signer": "2KROOT",
              "serial": "28",
              "notbefore": "2018-04-16T00:00:00.000Z",
              "notafter": "2029-07-22T23:59:59.000Z",
              "subject": "/C=FR/ST=HAUTS-DE-SEINE/L=PUTEAUX/O=CFT_SAMPLE/OU=CFT_L_SAMPLE/CN=2k_l1_user_pubexp_high",
              "issuer": "/C=FR/ST=HAUTS-DE-SEINE/L=PUTEAUX/O=CFT_SAMPLE/OU=CFT_SAMPLE/CN=2k_root",
              "keyusage": [
                "Key agreement",
                "Key cert sign",
                "Encipher only"
              ],
              "keyusageext": [
                "Server authentication",
                "Client authentication"
              ]
            }
          }
        }
      },
      "CftObjectsPkicerGetInfo": {
        "type": "object",
        "required": [
          "type",
          "id",
          "attributes"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "pkicer"
            ]
          },
          "id": {
            "type": "string"
          },
          "attributes": {
            "$ref": "#/components/schemas/CftObjectsPkicerShowAttributes"
          },
          "meta": {
            "$ref": "#/components/schemas/CftObjectsPkicerMetadata"
          },
          "links": {
            "$ref": "#/components/schemas/ObjectSelfLinks"
          }
        }
      },
      "CftObjectsPkicerAttributes": {
        "type": "object",
        "properties": {
          "check": {
            "description": "Certificate check during import Case Insensitive",
            "default": "YES",
            "type": "string",
            "enum": [
              "YES",
              "NO"
            ]
          },
          "itype": {
            "description": "Type of certificate.\nThis attribute is accepted on a POST request and ignored on a PUT request.\nIf not present on a POST request, the value is deduced from the certificate data.",
            "type": "string",
            "enum": [
              "USER",
              "INTER",
              "ROOT"
            ]
          },
          "state": {
            "description": "Status of the certificate Case Insensitive",
            "default": "ACT",
            "type": "string",
            "enum": [
              "ACT",
              "INACT"
            ]
          },
          "comment": {
            "description": "Free comment Case Insensitive",
            "type": "string",
            "maxLength": 64
          },
          "idata": {
            "description": "Certificate data in PEM format or base64 encoding",
            "type": "string",
            "maxLength": 9998
          },
          "iform": {
            "description": "Format of the certificate Case Insensitive",
            "default": "DER",
            "type": "string",
            "enum": [
              "DER",
              "PEM",
              "PKCS7",
              "PKCS12"
            ]
          },
          "inum": {
            "description": "Internal number of the certificate",
            "type": "integer",
            "minimum": 0,
            "maximum": 99,
            "default": 0
          },
          "ikdata": {
            "description": "Key data in PEM format or base64 encoding",
            "type": "string",
            "maxLength": 9998
          },
          "ikform": {
            "description": "Format of the private key Case Insensitive",
            "default": "DER",
            "type": "string",
            "enum": [
              "DER",
              "PEM",
              "PKCS8",
              "KPRIV"
            ]
          },
          "ikpassw": {
            "description": "Password of the certificate file",
            "type": "string",
            "maxLength": 64
          },
          "rootcid": {
            "description": "Certificate authority identifier.\nThis attribute is accepted on a POST request and ignored on a PUT request.\nIf not present on a POST request, the value may be deduced from the certificate data.",
            "type": "string",
            "maxLength": 32
          },
          "cid": {
            "description": "Certificate identifier.\nThis attribute is mandatory on a POST request and ignored on a PUT request.",
            "type": "string",
            "maxLength": 32
          }
        }
      },
      "CftObjectsPkicerShowAttributes": {
        "type": "object",
        "properties": {
          "itype": {
            "description": "Type of certificate.\nThis attribute is accepted on a POST request and ignored on a PUT request.\nIf not present on a POST request, the value is deduced from the certificate data.",
            "type": "string",
            "enum": [
              "USER",
              "INTER",
              "ROOT"
            ]
          },
          "state": {
            "description": "Status of the certificate Case Insensitive",
            "default": "ACT",
            "type": "string",
            "enum": [
              "ACT",
              "INACT"
            ]
          },
          "comment": {
            "description": "Free comment Case Insensitive",
            "type": "string",
            "maxLength": 64
          },
          "idata": {
            "description": "Certificate data in PEM format or base64 encoding",
            "type": "string",
            "maxLength": 9998
          },
          "iform": {
            "description": "Format of the certificate Case Insensitive",
            "default": "DER",
            "type": "string",
            "enum": [
              "DER",
              "PEM",
              "PKCS7",
              "PKCS12"
            ]
          },
          "inum": {
            "description": "Internal number of the certificate",
            "type": "integer",
            "minimum": 0,
            "maximum": 99,
            "default": 0
          },
          "rootcid": {
            "description": "Certificate authority identifier.\nThis attribute is accepted on a POST request and ignored on a PUT request.\nIf not present on a POST request, the value may be deduced from the certificate data.",
            "type": "string",
            "maxLength": 32
          },
          "cid": {
            "description": "Certificate identifier.\nThis attribute is mandatory on a POST request and ignored on a PUT request.",
            "type": "string",
            "maxLength": 32
          }
        }
      },
      "CftObjectsPkicerMetadata": {
        "type": "object",
        "properties": {
          "signer": {
            "description": "Signer id. Case Insensitive",
            "type": "string",
            "maxLength": 35
          },
          "signertype": {
            "description": "Signer type Case Insensitive",
            "type": "string",
            "enum": [
              "INTER",
              "ROOT"
            ]
          },
          "signerinum": {
            "description": "Signer internal number Case Insensitive",
            "type": "string",
            "maxLength": 2
          },
          "serial": {
            "description": "Serial Number Case Insensitive",
            "type": "string",
            "maxLength": 5
          },
          "notbefore": {
            "description": "validity period: not Before Case Insensitive",
            "type": "string",
            "maxLength": 32
          },
          "notafter": {
            "description": "validity period: not After Case Insensitive",
            "type": "string",
            "maxLength": 32
          },
          "subject": {
            "description": "Subject Distinguished Name Case Insensitive",
            "type": "string",
            "maxLength": 512
          },
          "issuer": {
            "description": "Issuer Distinguished Name Case Insensitive",
            "type": "string",
            "maxLength": 512
          },
          "keysize": {
            "description": "Keysize (RSA) Case Insensitive",
            "type": "string",
            "enum": [
              "4096",
              "2048",
              "1024",
              "512"
            ]
          },
          "keyusage": {
            "description": "Key Usage Case Insensitive",
            "type": "array",
            "maxItems": 10,
            "items": {
              "type": "string",
              "maxLength": 29
            }
          },
          "keyusageext": {
            "description": "key Usage extension Case Insensitive",
            "type": "array",
            "maxItems": 10,
            "items": {
              "type": "string",
              "maxLength": 29
            }
          }
        }
      },
      "CftObjectsPkikeyList": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "links": {
            "$ref": "#/components/schemas/ObjectSelfLinks"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CftObjectsPkikeyGetInfo"
            }
          }
        },
        "example": {
          "links": {
            "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/pki/keys"
          },
          "data": [
            {
              "type": "pkikey",
              "id": "PARIS_SFTP",
              "attributes": {
                "comment": "Key to work with Paris using SFTP protocol",
                "state": "ACT",
                "ikdata": "c3No...VJTQQ==",
                "ikform": "SSH"
              },
              "meta": {
                "keytype": "Private",
                "keysize": "4096"
              },
              "links": {
                "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/pki/keys/PARIS_SFTP"
              }
            },
            {
              "type": "pkikey",
              "id": "BEIJING_SFTP",
              "attributes": {
                "comment": "Key to work with Beijing using SFTP protocol",
                "state": "ACT",
                "ikdata": "c3No...VJTQQ==",
                "ikform": "SSH"
              },
              "meta": {
                "keytype": "Public",
                "keysize": "4096"
              },
              "links": {
                "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/pki/keys/BEIJING_SFTP"
              }
            }
          ]
        }
      },
      "CftObjectsPkikeyGet": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "links": {
            "$ref": "#/components/schemas/ObjectSelfLinks"
          },
          "data": {
            "$ref": "#/components/schemas/CftObjectsPkikeyGetInfo"
          }
        },
        "example": {
          "links": {
            "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/pki/keys/PARIS_SFTP"
          },
          "data": {
            "type": "pkikey",
            "id": "PARIS_SFTP",
            "attributes": {
              "comment": "Key to work with Paris using SFTP protocol",
              "state": "ACT",
              "ikdata": "c3No...VJTQQ==",
              "ikform": "SSH"
            },
            "meta": {
              "keytype": "Public",
              "keysize": "4096"
            }
          }
        }
      },
      "CftObjectsPkikeyGetInfo": {
        "type": "object",
        "required": [
          "type",
          "id",
          "attributes"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "pkikey"
            ]
          },
          "id": {
            "type": "string"
          },
          "attributes": {
            "$ref": "#/components/schemas/CftObjectsPkikeyShowAttributes"
          },
          "meta": {
            "$ref": "#/components/schemas/CftObjectsPkikeyMetadata"
          },
          "links": {
            "$ref": "#/components/schemas/ObjectSelfLinks"
          }
        }
      },
      "CftObjectsPkikeyAttributes": {
        "type": "object",
        "properties": {
          "comment": {
            "description": "Free comment Case Insensitive",
            "type": "string",
            "maxLength": 64
          },
          "state": {
            "description": "Status of the key Case Insensitive",
            "default": "ACT",
            "type": "string",
            "enum": [
              "ACT",
              "INACT"
            ]
          },
          "ikdata": {
            "description": "Key data in PEM format or base64 encoding",
            "type": "string",
            "maxLength": 9998
          },
          "ikpub": {
            "description": "Public key in ssh-rsa format",
            "type": "string",
            "maxLength": 4095
          },
          "ikpassw": {
            "description": "Key protection password (for PKCS8 and PEM encrypted RSA)",
            "type": "string",
            "maxLength": 64
          },
          "ikform": {
            "description": "Format of the key Case Insensitive",
            "default": "DER",
            "type": "string",
            "enum": [
              "DER",
              "PEM",
              "PKCS8",
              "SSH",
              "KPRIV"
            ]
          }
        }
      },
      "CftObjectsPkikeyShowAttributes": {
        "type": "object",
        "properties": {
          "comment": {
            "description": "Free comment Case Insensitive",
            "type": "string",
            "maxLength": 64
          },
          "state": {
            "description": "Status of the key Case Insensitive",
            "default": "ACT",
            "type": "string",
            "enum": [
              "ACT",
              "INACT"
            ]
          },
          "ikpub": {
            "description": "Public key in ssh-rsa format",
            "type": "string",
            "maxLength": 4095
          }
        }
      },
      "CftObjectsPkikeyMetadata": {
        "type": "object",
        "properties": {
          "keytype": {
            "description": "Key type Case Insensitive",
            "type": "string",
            "enum": [
              "Private",
              "Public"
            ]
          },
          "keysize": {
            "description": "Key size Case Insensitive",
            "type": "string",
            "enum": [
              "4096",
              "2048",
              "1024",
              "512"
            ]
          }
        }
      },
      "CftObjectsPkientityList": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "links": {
            "$ref": "#/components/schemas/ObjectSelfLinks"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CftObjectsPkientityGetInfo"
            }
          }
        },
        "example": {
          "links": {
            "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/pki/entities"
          },
          "data": [
            {
              "type": "pkientity",
              "id": "COMPANY",
              "attributes": {
                "certificates": [
                  "CA_Company",
                  "CA_Company_Europe",
                  "CA_Company_US",
                  "CA_Company_China"
                ]
              },
              "links": {
                "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/pki/entities/COMPANY"
              }
            },
            {
              "type": "pkientity",
              "id": "BANK",
              "attributes": {
                "certificates": [
                  "CA_Bank_Europe",
                  "CA_Bank_US"
                ]
              },
              "links": {
                "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/pki/entities/BANK"
              }
            }
          ]
        }
      },
      "CftObjectsPkientityGet": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "links": {
            "$ref": "#/components/schemas/ObjectSelfLinks"
          },
          "data": {
            "$ref": "#/components/schemas/CftObjectsPkientityGetInfo"
          }
        },
        "example": {
          "links": {
            "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/pki/entities/COMPANY"
          },
          "data": {
            "type": "pkientity",
            "id": "COMPANY",
            "attributes": {
              "certificates": [
                "CA_Company",
                "CA_Company_Europe",
                "CA_Company_US",
                "CA_Company_China"
              ]
            }
          }
        }
      },
      "CftObjectsPkientityGetInfo": {
        "type": "object",
        "required": [
          "type",
          "id",
          "attributes"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "pkientity"
            ]
          },
          "id": {
            "type": "string"
          },
          "attributes": {
            "$ref": "#/components/schemas/CftObjectsPkientityAttributes"
          },
          "links": {
            "$ref": "#/components/schemas/ObjectSelfLinks"
          }
        }
      },
      "CftObjectsPkientityAttributes": {
        "type": "object",
        "properties": {
          "certificates": {
            "description": "List of certificates ID Case Insensitive",
            "type": "array",
            "minItems": 1,
            "maxItems": 100,
            "items": {
              "type": "string",
              "maxLength": 32
            }
          },
          "comment": {
            "description": "Free comment Case Insensitive",
            "type": "string",
            "maxLength": 64
          }
        }
      },
      "CftObjectsCftuiprefList": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "links": {
            "$ref": "#/components/schemas/ObjectSelfLinks"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CftObjectsCftuiprefGetInfo"
            }
          }
        }
      },
      "CftObjectsCftuiprefGetInfo": {
        "type": "object",
        "required": [
          "type",
          "id",
          "attributes"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "cftuipref"
            ]
          },
          "id": {
            "type": "string"
          },
          "attributes": {
            "$ref": "#/components/schemas/CftObjectsCftuiprefAttributes"
          },
          "links": {
            "$ref": "#/components/schemas/ObjectSelfLinks"
          }
        }
      },
      "CftObjectsCftuiprefAttributes": {
        "type": "object",
        "properties": {
          "purpose": {
            "description": "Purpose Case Insensitive",
            "type": "string",
            "maxLength": 32
          },
          "name": {
            "description": "Identifier Case Insensitive",
            "type": "string",
            "maxLength": 32
          },
          "comment": {
            "description": "Free comment",
            "type": "string",
            "maxLength": 80
          },
          "content": {
            "description": "Content",
            "type": "string",
            "maxLength": 11930
          },
          "origin": {
            "$ref": "#/components/schemas/CftEnumORIGIN"
          }
        }
      },
      "CftObjectsCfttokenList": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "links": {
            "$ref": "#/components/schemas/ObjectSelfLinks"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CftObjectsCfttokenGetInfo"
            }
          }
        },
        "example": {
          "links": {
            "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cfttoken"
          },
          "data": [
            {
              "type": "cfttoken",
              "id": "USER1",
              "attributes": {
                "value": [
                  "aa.BB.CC",
                  "aa.cc.dd"
                ],
                "origin": "DESIGNER"
              },
              "meta": {
                "properties": [
                  {
                    "issue": 1584460908,
                    "expiration": 1584476908
                  },
                  {
                    "issue": 1584460907,
                    "expiration": 1584476907
                  }
                ]
              },
              "links": {
                "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cfttoken/USER1"
              }
            },
            {
              "type": "cfttoken",
              "id": "usertwo",
              "attributes": {
                "value": [
                  "aa.CB.CD"
                ],
                "origin": "DESIGNER"
              },
              "meta": {
                "properties": [
                  {
                    "issue": 1584460908,
                    "expiration": 1584476908
                  }
                ]
              },
              "links": {
                "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cfttoken/usertwo"
              }
            }
          ]
        }
      },
      "CftObjectsCfttokenGet": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "links": {
            "$ref": "#/components/schemas/ObjectSelfLinks"
          },
          "data": {
            "$ref": "#/components/schemas/CftObjectsCfttokenGetInfo"
          }
        },
        "example": {
          "links": {
            "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cfttoken/USER1"
          },
          "data": {
            "type": "cfttoken",
            "id": "USER1",
            "attributes": {
              "value": [
                "aa.BB.CC",
                "bb.cc.dd"
              ],
              "origin": "DESIGNER"
            },
            "meta": {
              "properties": [
                {
                  "issue": 1584460908,
                  "expiration": 1584476908
                },
                {
                  "issue": 1584460907,
                  "expiration": 1584476907
                }
              ]
            }
          }
        }
      },
      "CftObjectsCfttokenGetInfo": {
        "type": "object",
        "required": [
          "type",
          "id",
          "attributes"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "cfttoken"
            ]
          },
          "id": {
            "type": "string"
          },
          "attributes": {
            "$ref": "#/components/schemas/CftObjectsCfttokenShowAttributes"
          },
          "meta": {
            "$ref": "#/components/schemas/CftObjectsCfttokenMetadata"
          },
          "links": {
            "$ref": "#/components/schemas/ObjectSelfLinks"
          }
        }
      },
      "CftObjectsCfttokenAttributes": {
        "type": "object",
        "required": [
          "value"
        ],
        "properties": {
          "value": {
            "description": "List of Token Value",
            "type": "array",
            "maxItems": 2,
            "items": {
              "type": "string",
              "maxLength": 4096
            }
          },
          "origin": {
            "$ref": "#/components/schemas/CftEnumORIGIN"
          }
        }
      },
      "CftObjectsCfttokenShowAttributes": {
        "type": "object",
        "required": [
          "value"
        ],
        "properties": {
          "value": {
            "description": "List of Token Value",
            "type": "array",
            "maxItems": 2,
            "items": {
              "type": "string",
              "maxLength": 4096
            }
          },
          "origin": {
            "$ref": "#/components/schemas/CftEnumORIGIN"
          }
        }
      },
      "CftObjectsCfttokenMetadata": {
        "type": "object",
        "properties": {
          "properties": {
            "description": "Token Information",
            "type": "array",
            "maxItems": 2,
            "items": {
              "$ref": "#/components/schemas/CftObjectsCfttokenMetadataproperties"
            }
          }
        }
      },
      "CftObjectsCftxlateList": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "links": {
            "$ref": "#/components/schemas/ObjectSelfLinks"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CftObjectsCftxlateGetInfo"
            }
          }
        }
      },
      "CftObjectsCftxlateGet": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "links": {
            "$ref": "#/components/schemas/ObjectSelfLinks"
          },
          "data": {
            "$ref": "#/components/schemas/CftObjectsCftxlateGetInfo"
          }
        }
      },
      "CftObjectsCftxlateGetInfo": {
        "type": "object",
        "required": [
          "type",
          "id",
          "attributes"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "cftxlatesendasciiascii"
            ]
          },
          "id": {
            "type": "string"
          },
          "attributes": {
            "$ref": "#/components/schemas/CftObjectsCftxlateAttributes"
          },
          "links": {
            "$ref": "#/components/schemas/ObjectSelfLinks"
          }
        }
      },
      "CftObjectsCftxlateAttributes": {
        "type": "object",
        "properties": {
          "comment": {
            "description": "Free comment Case Insensitive",
            "type": "string",
            "maxLength": 80
          },
          "table": {
            "description": "Table in Hexadecimal value",
            "type": "string",
            "minLength": 512,
            "maxLength": 512
          },
          "origin": {
            "$ref": "#/components/schemas/CftEnumORIGIN"
          }
        }
      },
      "CftObjectsCftaccntList": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "links": {
            "$ref": "#/components/schemas/ObjectSelfLinks"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CftObjectsCftaccntGetInfo"
            }
          }
        },
        "example": {
          "links": {
            "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftaccnt"
          },
          "data": [
            {
              "type": "cftaccnt",
              "id": "fileaccounting",
              "attributes": {
                "comment": "Sample definition file accounting",
                "type": "FILE",
                "fname": "accounting_file",
                "afname": "alternate accounting_file",
                "exec": "switch_procedure",
                "maxrec": 5000,
                "language": "C",
                "format": "V24",
                "origin": "DESIGNER"
              },
              "links": {
                "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftaccnt/fileaccounting"
              }
            }
          ]
        }
      },
      "CftObjectsCftaccntGet": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "links": {
            "$ref": "#/components/schemas/ObjectSelfLinks"
          },
          "data": {
            "$ref": "#/components/schemas/CftObjectsCftaccntGetInfo"
          }
        },
        "example": {
          "links": {
            "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftaccnt/fileaccounting"
          },
          "data": {
            "type": "cftaccnt",
            "id": "fileaccounting",
            "attributes": {
              "comment": "Sample definition file accounting",
              "type": "FILE",
              "fname": "accounting_file",
              "afname": "alternate accounting_file",
              "exec": "switch_procedure",
              "maxrec": 5000,
              "language": "C",
              "format": "V24",
              "origin": "DESIGNER"
            }
          }
        }
      },
      "CftObjectsCftaccntGetInfo": {
        "type": "object",
        "required": [
          "type",
          "id",
          "attributes"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "cftaccnt"
            ]
          },
          "id": {
            "type": "string"
          },
          "attributes": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/CftObjectsCftaccntAttributesTypeFile"
              },
              {
                "$ref": "#/components/schemas/CftObjectsCftaccntAttributesTypeSyst"
              }
            ],
            "discriminator": {
              "propertyName": "type",
              "mapping": {
                "FILE": "#/components/schemas/CftObjectsCftaccntAttributesTypeFile",
                "SYST": "#/components/schemas/CftObjectsCftaccntAttributesTypeSyst"
              }
            }
          },
          "links": {
            "$ref": "#/components/schemas/ObjectSelfLinks"
          }
        }
      },
      "CftObjectsCftaccntAttributes": {
        "type": "object",
        "properties": {
          "comment": {
            "description": "Free comment Case Insensitive",
            "type": "string",
            "maxLength": 80
          },
          "origin": {
            "$ref": "#/components/schemas/CftEnumORIGIN"
          },
          "type": {
            "description": "Accounting type Case Insensitive",
            "default": "FILE",
            "type": "string",
            "enum": [
              "FILE",
              "SYST"
            ]
          }
        }
      },
      "CftObjectsCftaccntAttributesTypeSyst": {
        "description": "Definition of accnt object of SYST type",
        "allOf": [
          {
            "$ref": "#/components/schemas/CftObjectsCftaccntAttributes"
          },
          {
            "type": "object",
            "properties": {
              "accid": {
                "description": "This is only available on z/OS (when TYPE=SYST).\n- z/OS : 128",
                "type": "integer",
                "minimum": 0,
                "maximum": 4294967295
              },
              "language": {
                "description": "Programming language of the application using the statistical data records Case Insensitive",
                "default": "COBOL",
                "type": "string",
                "enum": [
                  "COBOL",
                  "C"
                ]
              },
              "format": {
                "description": "Indicates the record structure format.",
                "default": "V23",
                "type": "string",
                "enum": [
                  "V23",
                  "V24"
                ]
              }
            }
          }
        ]
      },
      "CftObjectsCftaccntAttributesTypeFile": {
        "description": "Definition of accnt object of FILE type",
        "allOf": [
          {
            "$ref": "#/components/schemas/CftObjectsCftaccntAttributes"
          },
          {
            "type": "object",
            "properties": {
              "afname": {
                "description": "Name of the alternate statistical file The z/OS, IBM i, and OpenVMS platforms are case insensitive; place the value between double quotes to ensure case sensitivity.",
                "type": "string",
                "maxLength": 512
              },
              "exec": {
                "description": "Name of the procedure to be executed when Transfer CFT switches to the other statistical file The z/OS, IBM i, and OpenVMS platforms are case insensitive; place the value between double quotes to ensure case sensitivity.",
                "type": "string",
                "maxLength": 512
              },
              "fname": {
                "description": "Name of the statistical file The z/OS, IBM i, and OpenVMS platforms are case insensitive; place the value between double quotes to ensure case sensitivity.",
                "type": "string",
                "maxLength": 512
              },
              "maxrec": {
                "description": "Statistical file's  maximum number of records",
                "type": "integer",
                "minimum": 0,
                "maximum": 999999,
                "default": 0
              },
              "language": {
                "description": "Programming language of the application using the statistical data records Case Insensitive",
                "default": "COBOL",
                "type": "string",
                "enum": [
                  "COBOL",
                  "C"
                ]
              },
              "switch": {
                "description": "Transfer CFT automatically switches to the alternate statistical file at this time (HHMMSSHH).",
                "type": "string",
                "pattern": "[0-9]{1,8}",
                "minLength": 1,
                "maxLength": 8,
                "default": "00000000"
              },
              "format": {
                "description": "Indicates the record structure format.",
                "default": "V23",
                "type": "string",
                "enum": [
                  "V23",
                  "V24"
                ]
              }
            }
          }
        ]
      },
      "CftObjectsCftprotList": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "links": {
            "$ref": "#/components/schemas/ObjectSelfLinks"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CftObjectsCftprotGetInfo"
            }
          }
        }
      },
      "CftObjectsCftprotGet": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "links": {
            "$ref": "#/components/schemas/ObjectSelfLinks"
          },
          "data": {
            "$ref": "#/components/schemas/CftObjectsCftprotGetInfo"
          }
        }
      },
      "CftObjectsCftprotGetInfo": {
        "type": "object",
        "required": [
          "type",
          "id",
          "attributes"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "cftprot"
            ]
          },
          "id": {
            "type": "string"
          },
          "attributes": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/CftObjectsCftprotAttributesTypeOdette"
              },
              {
                "$ref": "#/components/schemas/CftObjectsCftprotAttributesTypePesitAll"
              },
              {
                "$ref": "#/components/schemas/CftObjectsCftprotAttributesTypeSftp"
              }
            ],
            "discriminator": {
              "propertyName": "type",
              "mapping": {
                "ODETTE": "#/components/schemas/CftObjectsCftprotAttributesTypeOdette",
                "PESIT": "#/components/schemas/CftObjectsCftprotAttributesTypePesitAll",
                "SFTP": "#/components/schemas/CftObjectsCftprotAttributesTypeSftp"
              }
            }
          },
          "links": {
            "$ref": "#/components/schemas/ObjectSelfLinks"
          }
        }
      },
      "CftObjectsCftprotAttributes": {
        "type": "object",
        "required": [
          "net",
          "type"
        ],
        "properties": {
          "comment": {
            "description": "Free comment Case Insensitive",
            "type": "string",
            "maxLength": 80
          },
          "cos": {
            "description": "Class Of Service for bandwidth control",
            "type": "string",
            "maxLength": 32
          },
          "dynam": {
            "description": "Dynamic partner identifier (8 characters) in server mode Case Insensitive",
            "type": "string",
            "maxLength": 32
          },
          "exita": {
            "description": "Identifier for the directory EXIT Case Insensitive",
            "type": "string",
            "maxLength": 32
          },
          "fcharset": {
            "description": "Local file encoding",
            "type": "string",
            "maxLength": 32
          },
          "idf": {
            "description": "Assigns an IDF to a file on receiving an NIDF Case Insensitive",
            "type": "string",
            "maxLength": 32
          },
          "ncharset": {
            "description": "Destination file encoding",
            "type": "string",
            "maxLength": 32
          },
          "net": {
            "description": "Identifier referring to a CFTNET command associated with this protocol Case Insensitive",
            "type": "string",
            "maxLength": 32
          },
          "origin": {
            "$ref": "#/components/schemas/CftEnumORIGIN"
          },
          "sap": {
            "description": "Name of the local SAP, Service Access Point, associated with this protocol Case Insensitive",
            "type": "string",
            "maxLength": 32
          },
          "srin": {
            "description": "Controls the direction of transfers authorized for the Transfer CFT when it is server, accepter of the protocol connection Case Insensitive",
            "default": "BOTH",
            "type": "string",
            "enum": [
              "SENDER",
              "RECEIVER",
              "BOTH",
              "NONE"
            ]
          },
          "srout": {
            "description": "Controls the direction of transfers authorized for the Transfer CFT when it is requester (initiator of the protocol connection Case Insensitive",
            "default": "BOTH",
            "type": "string",
            "enum": [
              "SENDER",
              "RECEIVER",
              "BOTH",
              "NONE"
            ]
          },
          "type": {
            "description": "Type of file transfer protocol.",
            "type": "string",
            "enum": [
              "ODETTE",
              "PESIT",
              "SFTP"
            ]
          }
        }
      },
      "CftObjectsCftprotAttributesTypeSftp": {
        "description": "Definition of a SFTP protocol",
        "allOf": [
          {
            "$ref": "#/components/schemas/CftObjectsCftprotAttributes"
          },
          {
            "type": "object",
            "properties": {
              "disctc": {
                "description": "Wait timeout (in seconds) before disconnection, in the absence of a new connection request",
                "type": "integer",
                "minimum": 0,
                "maximum": 3600,
                "default": 60
              },
              "disctd": {
                "description": "Wait timeout (in seconds) before disconnection, in the absence of a new transfer request to the partner, in requester mode",
                "type": "integer",
                "minimum": 0,
                "maximum": 3600,
                "default": 10
              },
              "discts": {
                "description": "Wait timeout (in seconds) before disconnection, in the absence of a new transfer request from the partner, in server mode",
                "type": "integer",
                "minimum": 0,
                "maximum": 3600,
                "default": 60
              },
              "restart": {
                "description": "Maximum number of transfer restart attempts",
                "type": "integer",
                "minimum": 0,
                "maximum": 32767,
                "default": 5
              },
              "rcomp": {
                "description": "Maximum compression authorized on receiving a file",
                "type": "integer",
                "minimum": 0,
                "maximum": 9,
                "default": 1
              },
              "scomp": {
                "description": "Maximum authorized compression for sending a file",
                "type": "integer",
                "minimum": 0,
                "maximum": 9,
                "default": 1
              },
              "rto": {
                "description": "Network monitoring timeout (expressed in seconds) excluding the protocol connection/disconnection/break phase",
                "type": "integer",
                "minimum": 0,
                "maximum": 32767,
                "default": 120
              },
              "srusize": {
                "description": "Maximum size of NSDUs (Network Service Data Unit) being sent Maximum value - platform dependent - z/OS: 65072 - Windows, Unix, IBM i: 32750",
                "type": "integer",
                "minimum": 254,
                "default": 32750
              },
              "rrusize": {
                "description": "Maximum size of NSDUs (Network Service Data Unit) being received Maximum value depends on the platform: - z/OS: 65072 - Windows, Unix, IBM i: 32750",
                "type": "integer",
                "minimum": 254,
                "default": 32750
              },
              "spacing": {
                "description": "Interval between synchronization points for send transfers (in Kbytes) (1 Kbyte = 1024 bytes)",
                "type": "integer",
                "minimum": 0,
                "maximum": 32767,
                "default": 32767
              },
              "rpacing": {
                "description": "The \"credit\", expressed as a number of \"DATA\" messages, proposed by Transfer CFT when it is server",
                "type": "integer",
                "minimum": 0,
                "maximum": 32767,
                "default": 32767
              },
              "ssh": {
                "description": "SSH command identifier used for a security profile Case Insensitive",
                "type": "string",
                "maxLength": 32
              }
            }
          }
        ]
      },
      "CftObjectsCftprotAttributesTypePesit": {
        "required": [
          "prof"
        ],
        "description": "Definition of a PESIT protocol",
        "allOf": [
          {
            "$ref": "#/components/schemas/CftObjectsCftprotAttributes"
          },
          {
            "$ref": "#/components/schemas/CftObjectsCftprotAttributes"
          },
          {
            "type": "object",
            "properties": {
              "ssl": {
                "description": "SSL command identifier used for security profiles Case Insensitive",
                "type": "string",
                "maxLength": 32
              },
              "prof": {
                "description": "PeSIT D or E protocol profile.",
                "type": "string",
                "enum": [
                  "ANY"
                ]
              },
              "concat": {
                "description": "Option to concatenate FPDUs (File Protocol Data Units) in a given NSDU Case Insensitive",
                "default": "NO",
                "type": "string",
                "enum": [
                  "YES",
                  "NO"
                ]
              },
              "disctc": {
                "description": "Wait timeout (in seconds) for the reply FPDU (ACONNECT), after the sending of a CONNECT FPDU",
                "type": "integer",
                "minimum": 0,
                "maximum": 3600,
                "default": 90
              },
              "disctd": {
                "description": "Wait timeout (in seconds) before disconnection, in the absence of a new transfer request to the partner, in requester mode",
                "type": "integer",
                "minimum": 0,
                "maximum": 3600,
                "default": 240
              },
              "disctr": {
                "description": "Network disconnection wait timeout",
                "type": "integer",
                "minimum": 0,
                "maximum": 3600,
                "default": 45
              },
              "discts": {
                "description": "Wait timeout (in seconds) before disconnection, in the absence of a new transfer request from the partner, in server mode",
                "type": "integer",
                "minimum": 0,
                "maximum": 3600,
                "default": 285
              },
              "multart": {
                "description": "Option to group several records of the file sent in a given FPDU (multi-record FPDUs) Case Insensitive",
                "default": "NO",
                "type": "string",
                "enum": [
                  "NO"
                ]
              },
              "pad": {
                "description": "Applies \"SPECIAL LOGIC\" to the data exchange buffers Case Insensitive",
                "default": "NO",
                "type": "string",
                "enum": [
                  "NO"
                ]
              },
              "rchkw": {
                "description": "Size of the receive mode synchronization point's anticipated acknowledgment window, expressed as a number of synchronization points",
                "type": "integer",
                "minimum": 0,
                "maximum": 16,
                "default": 2
              },
              "rcomp": {
                "description": "Maximum compression authorized on receiving a file",
                "type": "integer",
                "minimum": 0,
                "maximum": 0,
                "default": 0
              },
              "restart": {
                "description": "Maximum number of transfer restart attempts",
                "type": "integer",
                "minimum": 0,
                "maximum": 32767,
                "default": 5
              },
              "resync": {
                "description": "Dynamic resynchronization of exchanges during transfer (without interrupting the data exchange phase) Case Insensitive",
                "default": "NO",
                "type": "string",
                "enum": [
                  "NO"
                ]
              },
              "rpacing": {
                "description": "Value of the interval between synchronization points for receive transfers (in Kbytes) (1 Kbyte = 1024 bytes)",
                "type": "integer",
                "minimum": 0,
                "maximum": 32767,
                "default": 36
              },
              "rrusize": {
                "description": "Maximum size of NSDUs (Network Service Data Unit) being received Maximum value depends on the platform: - z/OS: 65072 - Windows, Unix, IBM i: 32750",
                "type": "integer",
                "minimum": 800,
                "default": 4050
              },
              "rto": {
                "description": "Network monitoring timeout (expressed in seconds) excluding the protocol connection/disconnection/break phase",
                "type": "integer",
                "minimum": 0,
                "maximum": 3600,
                "default": 260
              },
              "schkw": {
                "description": "Size of the send mode synchronization point's anticipated acknowledgment window, expressed as a number of synchronization points",
                "type": "integer",
                "minimum": 0,
                "maximum": 16,
                "default": 2
              },
              "scomp": {
                "description": "Maximum authorized compression for sending a file",
                "type": "integer",
                "minimum": 0,
                "maximum": 0,
                "default": 0
              },
              "segment": {
                "description": "Segment files records in several FPDUs Case Insensitive",
                "default": "NO",
                "type": "string",
                "enum": [
                  "NO"
                ]
              },
              "spacing": {
                "description": "Interval between synchronization points for send transfers (in Kbytes where 1 Kbyte=1024 bytes)",
                "type": "integer",
                "minimum": 0,
                "maximum": 32767,
                "default": 36
              },
              "srusize": {
                "description": "Maximum size of NSDUs (Network Service Data Unit) being sent Maximum value - platform dependent - z/OS: 65072 - Windows, Unix, IBM i: 32750",
                "type": "integer",
                "minimum": 800,
                "default": 4050
              },
              "reverse": {
                "description": "Reuse a connection to perform two transfers in different directions one after the other Case Insensitive",
                "default": "NO",
                "type": "string",
                "enum": [
                  "NO"
                ]
              }
            }
          }
        ]
      },
      "CftObjectsCftprotAttributesTypePesitProfAny": {
        "description": "Definition of a PESIT protocol, profile ANY",
        "allOf": [
          {
            "$ref": "#/components/schemas/CftObjectsCftprotAttributesTypePesit"
          },
          {
            "type": "object",
            "properties": {
              "concat": {
                "description": "Concatenate FPDUs (File Protocol Data Units) in a given NSDU Case Insensitive",
                "default": "YES",
                "type": "string",
                "enum": [
                  "YES",
                  "NO"
                ]
              },
              "multart": {
                "description": "Group several records of the file sent in a given FPDU (multi-record FPDUs) Case Insensitive",
                "default": "YES",
                "type": "string",
                "enum": [
                  "YES",
                  "NO"
                ]
              },
              "pad": {
                "description": "Applies \"SPECIAL LOGIC\" to the data exchange buffers Case Insensitive",
                "default": "NO",
                "type": "string",
                "enum": [
                  "YES",
                  "NO"
                ]
              },
              "rchkw": {
                "description": "Size of the receive mode synchronization point's anticipated acknowledgment window, expressed as a number of synchronization points",
                "type": "integer",
                "minimum": 0,
                "maximum": 16,
                "default": 3
              },
              "restart": {
                "description": "Maximum number of transfer restart attempts",
                "type": "integer",
                "minimum": 0,
                "maximum": 32767,
                "default": 5
              },
              "resync": {
                "description": "Dynamic resynchronization of exchanges during transfer (without interrupting the data exchange phase) Case Insensitive",
                "default": "NO",
                "type": "string",
                "enum": [
                  "YES",
                  "NO"
                ]
              },
              "reverse": {
                "description": "Reuses a connection to perform two transfers in different directions one after the other Case Insensitive",
                "default": "NO",
                "type": "string",
                "enum": [
                  "YES",
                  "NO"
                ]
              },
              "rpacing": {
                "description": "Value of the interval between synchronization points for receive transfers (in Kbytes) (1 Kbyte = 1024 bytes)",
                "type": "integer",
                "minimum": 0,
                "maximum": 32767,
                "default": 32767
              },
              "rrusize": {
                "description": "Maximum size of NSDUs (Network Service Data Unit) being received Maximum value depends on the platform: - z/OS: 65072 - Windows, Unix, IBM i: 32750",
                "type": "integer",
                "minimum": 254,
                "default": 32750
              },
              "rserv": {
                "description": "Identifies the service (protocol variant) required by the incoming partner Case Insensitive",
                "type": "string",
                "maxLength": 8
              },
              "rto": {
                "description": "Network monitoring timeout (expressed in seconds) excluding the protocol connection/disconnection/break phase",
                "type": "integer",
                "minimum": 0,
                "maximum": 32767,
                "default": 260
              },
              "schkw": {
                "description": "Size of the send mode synchronization point's anticipated acknowledgment window, expressed as a number of synchronization points",
                "type": "integer",
                "minimum": 0,
                "maximum": 16,
                "default": 3
              },
              "segment": {
                "description": "Segment file records in several FPDUs Case Insensitive",
                "default": "YES",
                "type": "string",
                "enum": [
                  "YES",
                  "NO"
                ]
              },
              "spacing": {
                "description": "Value of the interval between synchronization points for send transfers (in Kbytes) (1 Kbyte = 1024 bytes)",
                "type": "integer",
                "minimum": 0,
                "maximum": 32767,
                "default": 32767
              },
              "srusize": {
                "description": "Maximum size of NSDUs (Network Service Data Unit) being sent Maximum value - platform dependent - z/OS: 65072 - Windows, Unix, IBM i: 32750",
                "type": "integer",
                "minimum": 254,
                "default": 32750
              },
              "disctc": {
                "description": "Wait timeout (in seconds) for the reply FPDU (ACONNECT), after the sending of a CONNECT FPDU",
                "type": "integer",
                "minimum": 0,
                "maximum": 3600,
                "default": 60
              },
              "disctd": {
                "description": "Wait timeout (in seconds) before disconnection, in the absence of a new transfer request to the partner, in requester mode",
                "type": "integer",
                "minimum": 0,
                "maximum": 3600,
                "default": 10
              },
              "disctr": {
                "description": "Network disconnection wait timeout",
                "type": "integer",
                "minimum": 0,
                "maximum": 3600,
                "default": 45
              },
              "discts": {
                "description": "Wait timeout (in seconds) before disconnection, in the absence of a new transfer request from the partner, in server mode",
                "type": "integer",
                "minimum": 0,
                "maximum": 3600,
                "default": 60
              },
              "logon": {
                "description": "Implementation of the pre-connection phase Case Insensitive",
                "default": "YES",
                "type": "string",
                "enum": [
                  "YES",
                  "NO"
                ]
              },
              "rcomp": {
                "description": "Maximum compression authorized on receiving a file",
                "type": "integer",
                "minimum": 0,
                "maximum": 15,
                "default": 0
              },
              "scomp": {
                "description": "Maximum authorized compression for sending a file",
                "type": "integer",
                "minimum": 0,
                "maximum": 15,
                "default": 0
              },
              "sserv": {
                "description": "Identifies the service (protocol variant) required for the incoming partner Case Insensitive",
                "default": "GSIT",
                "type": "string",
                "maxLength": 8
              },
              "hide99": {
                "description": "Optional parameter available only to PESIT protocol definition (TYPE=PESIT) using the ANY profile (PROFIL=ANY/CFT) Case Insensitive",
                "default": "NO",
                "type": "string",
                "enum": [
                  "YES",
                  "NO"
                ]
              },
              "nack": {
                "description": "PESIT: Enables or disables the negative acknowledgment feature Case Insensitive",
                "default": "NO",
                "type": "string",
                "enum": [
                  "YES",
                  "NO"
                ]
              }
            }
          }
        ]
      },
      "CftObjectsCftprotAttributesTypeOdette": {
        "description": "Definition of an ODETTE protocol",
        "allOf": [
          {
            "$ref": "#/components/schemas/CftObjectsCftprotAttributes"
          },
          {
            "type": "object",
            "properties": {
              "ssl": {
                "description": "SSL command identifier used for security profiles Case Insensitive",
                "type": "string",
                "maxLength": 32
              },
              "disctd": {
                "description": "Wait timeout (in seconds) before disconnection, in the absence of a new transfer request to the partner, in requester mode",
                "type": "integer",
                "minimum": 0,
                "maximum": 3600,
                "default": 20
              },
              "discts": {
                "description": "Wait timeout (in seconds) before disconnection, in the absence of a new transfer request from the partner, in server mode",
                "type": "integer",
                "minimum": 0,
                "maximum": 3600,
                "default": 65
              },
              "eerp": {
                "description": "Interprets the value of the ORIGINATOR and DESTINATOR fields contained in the EERP message, according to the protocol version Case Insensitive",
                "default": "91",
                "type": "string",
                "enum": [
                  "91",
                  "86"
                ]
              },
              "pad": {
                "description": "Applies \"SPECIAL LOGIC\" to the data exchange buffers Case Insensitive",
                "default": "NO",
                "type": "string",
                "enum": [
                  "YES",
                  "NO"
                ]
              },
              "rcomp": {
                "description": "Maximum compression authorized on receiving a file",
                "type": "integer",
                "minimum": 0,
                "maximum": 1,
                "default": 0
              },
              "rcredit": {
                "description": "Value of the \"credit\" (expressed as a number of \"DATA\" messages) proposed by Transfer CFT when it is server",
                "type": "integer",
                "minimum": 0,
                "maximum": 999,
                "default": 4
              },
              "restart": {
                "description": "Maximum number of transfer restart attempts",
                "type": "integer",
                "minimum": 0,
                "maximum": 32767,
                "default": 5
              },
              "resync": {
                "description": "Dynamic resynchronization of exchanges during a transfer (without interrupting the data exchange phase) Case Insensitive",
                "default": "NO",
                "type": "string",
                "enum": [
                  "YES",
                  "NO"
                ]
              },
              "reverse": {
                "description": "Reuses a connection to perform two transfers in different directions one after the other Case Insensitive",
                "default": "YES",
                "type": "string",
                "enum": [
                  "YES",
                  "NO"
                ]
              },
              "rrusize": {
                "description": "Maximum size of NSDUs (Network Service Data Unit) being received Maximum value depends on the platform: - z/OS: 65072 - Windows, Unix, IBM i: 32750",
                "type": "integer",
                "minimum": 128,
                "default": 2048
              },
              "rto": {
                "description": "Network monitoring timeout (expressed in seconds) excluding the protocol connection/disconnection/break phase",
                "type": "integer",
                "minimum": 0,
                "maximum": 32767,
                "default": 260
              },
              "scomp": {
                "description": "Maximum authorized compression for sending a file",
                "type": "integer",
                "minimum": 0,
                "maximum": 1,
                "default": 0
              },
              "scredit": {
                "description": "Value of the \"credit\" (expressed as a number of \"DATA\" messages) proposed by Transfer CFT when it is the requester",
                "type": "integer",
                "minimum": 0,
                "maximum": 999,
                "default": 4
              },
              "srusize": {
                "description": "Maximum size of NSDUs (Network Service Data Unit) being sent Maximum value - platform dependent - z/OS: 65072 - Windows, Unix, IBM i: 32750",
                "type": "integer",
                "minimum": 128,
                "default": 2048
              },
              "tcp": {
                "description": "Processing method used for protocol messages Case Insensitive",
                "default": "OFTP",
                "type": "string",
                "maxLength": 8
              }
            }
          }
        ]
      },
      "CftObjectsCftparmList": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "links": {
            "$ref": "#/components/schemas/ObjectSelfLinks"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CftObjectsCftparmGetInfo"
            }
          }
        },
        "example": {
          "links": {
            "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftparm"
          },
          "data": [
            {
              "type": "cftparm",
              "id": "idparm2",
              "attributes": {
                "bufsize": 4096,
                "cat": "CAT0",
                "com": [
                  "COM0",
                  "COMS"
                ],
                "default": "BIN",
                "fbufsize": 0,
                "key": "cft.key",
                "lenappl": 32,
                "log": "LOG0",
                "maxtask": 4,
                "maxtrans": 999,
                "net": [
                  "NET0"
                ],
                "npart": "LOCAL",
                "part": "LOCAL",
                "partfnam": "cftpart_file",
                "pkifname": "pkifile_name",
                "pkipassw": "<CFT_PASSWORD>AAAAAAAAA",
                "prot": [
                  "PESITANY"
                ],
                "rcvaller": "STOP",
                "sndindfileerr": "CONTINUE",
                "sslmtask": 1,
                "sslttask": 128,
                "sslwtask": 1441,
                "sslwresp": 60,
                "strace": 0,
                "trantask": 64,
                "trkpart": "UNDEFINED",
                "trksend": "UNDEFINED",
                "trkrecv": "UNDEFINED",
                "userctrl": "NO",
                "waitresp": 60,
                "waittask": 1441,
                "comment": "Transfer CFT central definition",
                "origin": "DESIGNER"
              },
              "links": {
                "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftparm/idparm2"
              }
            }
          ]
        }
      },
      "CftObjectsCftparmGet": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "links": {
            "$ref": "#/components/schemas/ObjectSelfLinks"
          },
          "data": {
            "$ref": "#/components/schemas/CftObjectsCftparmGetInfo"
          }
        },
        "example": {
          "links": {
            "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftparm/idparm2"
          },
          "data": {
            "type": "cftparm",
            "id": "idparm2",
            "attributes": {
              "bufsize": 4096,
              "cat": "CAT0",
              "com": [
                "COM0",
                "COMS"
              ],
              "default": "BIN",
              "fbufsize": 0,
              "key": "cft.key",
              "lenappl": 32,
              "log": "LOG0",
              "maxtask": 4,
              "maxtrans": 999,
              "net": [
                "NET0"
              ],
              "npart": "LOCAL",
              "part": "LOCAL",
              "partfnam": "cftpart_file",
              "pkifname": "pkifile_name",
              "pkipassw": "<CFT_PASSWORD>AAAAAAAAA",
              "prot": [
                "PESITANY"
              ],
              "rcvaller": "STOP",
              "sndindfileerr": "CONTINUE",
              "sslmtask": 1,
              "sslttask": 128,
              "sslwtask": 1441,
              "sslwresp": 60,
              "strace": 0,
              "trantask": 64,
              "trkpart": "UNDEFINED",
              "trksend": "UNDEFINED",
              "trkrecv": "UNDEFINED",
              "userctrl": "NO",
              "waitresp": 60,
              "waittask": 1441,
              "comment": "Transfer CFT central definition",
              "origin": "DESIGNER"
            }
          }
        }
      },
      "CftObjectsCftparmGetInfo": {
        "type": "object",
        "required": [
          "type",
          "id",
          "attributes"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "cftparm"
            ]
          },
          "id": {
            "type": "string"
          },
          "attributes": {
            "$ref": "#/components/schemas/CftObjectsCftparmAttributes"
          },
          "links": {
            "$ref": "#/components/schemas/ObjectSelfLinks"
          }
        }
      },
      "CftObjectsCftparmAttributes": {
        "type": "object",
        "required": [
          "cat",
          "com",
          "key",
          "net",
          "part",
          "partfnam",
          "prot"
        ],
        "properties": {
          "accnt": {
            "description": "Identifier of the description command of the statistical data record of the transfers Case Insensitive",
            "type": "string",
            "maxLength": 32
          },
          "bufsize": {
            "description": "Size of the internal buffer used to exchange data between tasks, expressed in bytes.\nThe default value depends on the platform.\n- z/OS : 65200\n- Windows : 4096\n- IBM i : 32740\n- Unix : 4096\n- VMS : 8100, this value is also the VMS maximum.",
            "type": "integer",
            "minimum": 512,
            "maximum": 65535
          },
          "cat": {
            "description": "Identifier of the command describing catalog file management Case Insensitive",
            "type": "string",
            "maxLength": 32
          },
          "com": {
            "description": "List of the identifiers of the communication media description commands Case Insensitive",
            "type": "array",
            "maxItems": 4,
            "items": {
              "type": "string",
              "maxLength": 32
            }
          },
          "comment": {
            "description": "Free comment Case Insensitive",
            "type": "string",
            "maxLength": 80
          },
          "crontabs": {
            "description": "List of the identifiers of the script scheduling command CFTCRON Case Insensitive",
            "type": "array",
            "maxItems": 32,
            "items": {
              "type": "string",
              "maxLength": 32
            }
          },
          "default": {
            "description": "The CFTRECV, CFTSEND, and CFTXLATE command default identifier.\nCase insensitive.\nThe default value depends on the platform.\n- z/OS : BIN\n- Others : DEFAUT",
            "type": "string",
            "maxLength": 32
          },
          "execre": {
            "description": "File descibing the procedure to execute following a file reception error The z/OS, IBM i, and OpenVMS platforms are case insensitive; place the value between double quotes to ensure case sensitivity.",
            "type": "string",
            "maxLength": 512
          },
          "execrf": {
            "description": "File describing the procedure to execute on completion of the reception of a file The z/OS, IBM i, and OpenVMS platforms are case insensitive; place the value between double quotes to ensure case sensitivity.",
            "type": "string",
            "maxLength": 512
          },
          "execrm": {
            "description": "File describing the procedure to execute on completion of the reception of a message The z/OS, IBM i, and OpenVMS platforms are case insensitive; place the value between double quotes to ensure case sensitivity.",
            "type": "string",
            "maxLength": 512
          },
          "execse": {
            "description": "File descibing the procedure to execute following a file sending error The z/OS, IBM i, and OpenVMS platforms are case insensitive; place the value between double quotes to ensure case sensitivity.",
            "type": "string",
            "maxLength": 512
          },
          "execsf": {
            "description": "File describing the procedure to execute on completion of the sending of a file The z/OS, IBM i, and OpenVMS platforms are case insensitive; place the value between double quotes to ensure case sensitivity.",
            "type": "string",
            "maxLength": 512
          },
          "execsfa": {
            "description": "File describing the procedures to execute when receiving an acknowledgement for a file The z/OS, IBM i, and OpenVMS platforms are case insensitive; place the value between double quotes to ensure case sensitivity.",
            "type": "string",
            "maxLength": 512
          },
          "execsm": {
            "description": "File describing the procedure to execute on completion of the sending of a message The z/OS, IBM i, and OpenVMS platforms are case insensitive; place the value between double quotes to ensure case sensitivity.",
            "type": "string",
            "maxLength": 512
          },
          "execsma": {
            "description": "File describing the procedures to execute when receiving an acknowledgement for a message The z/OS, IBM i, and OpenVMS platforms are case insensitive; place the value between double quotes to ensure case sensitivity.",
            "type": "string",
            "maxLength": 512
          },
          "exitbot": {
            "description": "Beginning Of Transfer EXIT identifier Case Insensitive",
            "type": "string",
            "maxLength": 32
          },
          "exiteot": {
            "description": "End Of Transfer EXIT identifier Case Insensitive",
            "type": "string",
            "maxLength": 32
          },
          "fbufsize": {
            "description": "Size of the internal buffer used to exchange data between Transfer CFT tasks and Transfer CFT file tasks.\nMaximum value is 8100 on OpenVMS platforms.",
            "type": "integer",
            "minimum": 0,
            "maximum": 65535,
            "default": 0
          },
          "key": {
            "description": "File containing the set of keys associated with the Transfer CFT The z/OS, IBM i, and OpenVMS platforms are case insensitive; place the value between double quotes to ensure case sensitivity.",
            "type": "string",
            "maxLength": 80
          },
          "lenappl": {
            "description": "Length to be taken into account when comparing the file/message identifier with the identifier of a CFTAPPL command",
            "type": "integer",
            "minimum": 1,
            "maximum": 32,
            "default": 32
          },
          "log": {
            "description": "Identifier of the monitor event log file description command CFTLOG Case Insensitive",
            "type": "string",
            "maxLength": 32
          },
          "maxtask": {
            "description": "Number of authorized Transfer CFT file tasks.\nMaximum value on platforms:\n- z/OS : 400\n- Windows, IBM i, Unix, OpenVMS : 64",
            "type": "integer",
            "default": 8,
            "minimum": 1
          },
          "maxtrans": {
            "description": "Maximum authorized number of transfers in parallel ; when using multi node, this is the number of transfers per node",
            "type": "integer",
            "minimum": 1,
            "maximum": 1000,
            "default": 256
          },
          "net": {
            "description": "List of the identifiers of the description commands for network access methods and monitor network resources CFTNET Case Insensitive",
            "type": "array",
            "maxItems": 32,
            "items": {
              "type": "string",
              "maxLength": 32
            }
          },
          "npart": {
            "description": "Default network identifier of the local site Case Insensitive",
            "type": "string",
            "maxLength": 64
          },
          "origin": {
            "$ref": "#/components/schemas/CftEnumORIGIN"
          },
          "part": {
            "description": "Local identifier, identifying the site on which Transfer CFT is executed Case Insensitive",
            "type": "string",
            "maxLength": 64
          },
          "partfnam": {
            "description": "Partner file name The z/OS, IBM i, and OpenVMS platforms are case insensitive; place the value between double quotes to ensure case sensitivity.",
            "type": "string",
            "maxLength": 512
          },
          "pkifname": {
            "description": "PKI certificates base filename",
            "type": "string",
            "maxLength": 512
          },
          "pkipassw": {
            "description": "PKI certificates base password",
            "default": "PKIPASSW",
            "type": "string",
            "maxLength": 32
          },
          "prot": {
            "description": "Identifier of the Transfer CFT protocol description commands CFTPROT Case Insensitive",
            "type": "array",
            "maxItems": 32,
            "items": {
              "type": "string",
              "maxLength": 32
            }
          },
          "rcvaller": {
            "description": "Option to be used if an error occurs when receiving available files FILE=ALL option Case Insensitive",
            "default": "STOP",
            "type": "string",
            "enum": [
              "STOP",
              "CONTINUE"
            ]
          },
          "secfname": {
            "description": "Name of the CFT internal security file The z/OS, IBM i, and OpenVMS platforms are case insensitive; place the value between double quotes to ensure case sensitivity.",
            "type": "string",
            "maxLength": 512
          },
          "sndindfileerr": {
            "description": "Action to do if error while sending using indirection file Case Insensitive",
            "default": "CONTINUE",
            "type": "string",
            "enum": [
              "ABORT",
              "CONTINUE"
            ]
          },
          "sslmtask": {
            "description": "Maximum number of SSL tasks",
            "type": "integer",
            "minimum": 1,
            "maximum": 64,
            "default": 8
          },
          "sslttask": {
            "description": "Maximum number of transfers per Transfer CFT SSL task.\nMaximum value on platforms:\n- Windows: 1000\n- z/OS, IBM i, Unix, OpenVMS : 64",
            "type": "integer",
            "default": 3,
            "minimum": 1
          },
          "sslwtask": {
            "description": "SSL timer for task",
            "type": "integer",
            "minimum": 1,
            "maximum": 1441,
            "default": 10
          },
          "sslwresp": {
            "description": "The time limit for the SSL task to initialize before it times out (in seconds).\nDefault value - platform dependent.\n- z/OS : 600\n- Windows and OpenVMS : 60\n- Unix : 100\n- IBM i : 1000",
            "type": "integer",
            "minimum": 1,
            "maximum": 32767
          },
          "strace": {
            "description": "Trace level for system services",
            "type": "integer",
            "minimum": 0,
            "maximum": 255,
            "default": 0
          },
          "trantask": {
            "description": "Maximum number of parallel transfers per task.\nMaximum value on platforms:\n- Windows: 1000\n- z/OS, IBM i, Unix, OpenVMS : 64",
            "type": "integer",
            "default": 3,
            "minimum": 1
          },
          "trkpart": {
            "description": "Details provided to Sentinel about transfers Case Insensitive",
            "default": "UNDEFINED",
            "type": "string",
            "enum": [
              "UNDEFINED",
              "ALL",
              "SUMMARY",
              "NO",
              "ERROR"
            ]
          },
          "trksend": {
            "description": "Details provided to Sentinel about sent transfers Case Insensitive",
            "default": "UNDEFINED",
            "type": "string",
            "enum": [
              "UNDEFINED",
              "ALL",
              "SUMMARY",
              "NO",
              "ERROR"
            ]
          },
          "trkrecv": {
            "description": "Details provided to Sentinel about received transfers Case Insensitive",
            "default": "UNDEFINED",
            "type": "string",
            "enum": [
              "UNDEFINED",
              "ALL",
              "SUMMARY",
              "NO",
              "ERROR"
            ]
          },
          "userctrl": {
            "description": "Transferred file access control option Case Insensitive",
            "default": "NO",
            "type": "string",
            "enum": [
              "YES",
              "NO"
            ]
          },
          "waitresp": {
            "description": "The time that a Transfer CFT task waits before it times out (in seconds).\nDefault value depend on platforms:\n- z/OS : 600\n- Windows and OpenVMS : 60\n- Unix : 100\n- IBM i : 1000",
            "type": "integer",
            "minimum": 1,
            "maximum": 32767
          },
          "waittask": {
            "description": "Time during which a file access task is inactive in minutes before being shut down",
            "type": "integer",
            "minimum": 1,
            "maximum": 1441,
            "default": 10
          }
        }
      },
      "CftObjectsCftnetList": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "links": {
            "$ref": "#/components/schemas/ObjectSelfLinks"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CftObjectsCftnetGetInfo"
            }
          }
        },
        "example": {
          "links": {
            "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftnet"
          },
          "data": [
            {
              "type": "cftnet",
              "id": "basetcp",
              "attributes": {
                "type": "TCP",
                "comment": "Sample definition TCP network",
                "host": "INADDR_ANY",
                "maxcnx": 300,
                "call": "INOUT",
                "srcports": "5000-65535",
                "origin": "DESIGNER"
              },
              "links": {
                "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftnet/basetcp"
              }
            },
            {
              "type": "cftnet",
              "id": "inonlytcp",
              "attributes": {
                "type": "TCP",
                "comment": "Sample definition for TCP incoming connection only",
                "host": "INADDR_ANY",
                "maxcnx": 200,
                "call": "IN",
                "origin": "DESIGNER"
              },
              "links": {
                "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftnet/inonlytcp"
              }
            }
          ]
        }
      },
      "CftObjectsCftnetGet": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "links": {
            "$ref": "#/components/schemas/ObjectSelfLinks"
          },
          "data": {
            "$ref": "#/components/schemas/CftObjectsCftnetGetInfo"
          }
        },
        "example": {
          "links": {
            "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftnet/basetcp"
          },
          "data": {
            "type": "cftnet",
            "id": "basetcp",
            "attributes": {
              "type": "TCP",
              "comment": "Sample definition for the TCP network",
              "host": "INADDR_ANY",
              "maxcnx": 300,
              "call": "INOUT",
              "srcports": "5000-65535",
              "origin": "DESIGNER"
            }
          }
        }
      },
      "CftObjectsCftnetGetInfo": {
        "type": "object",
        "required": [
          "type",
          "id",
          "attributes"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "cftnet"
            ]
          },
          "id": {
            "type": "string"
          },
          "attributes": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/CftObjectsCftnetAttributesTypeTcp"
              }
            ],
            "discriminator": {
              "propertyName": "type",
              "mapping": {
                "TCP": "#/components/schemas/CftObjectsCftnetAttributesTypeTcp"
              }
            }
          },
          "links": {
            "$ref": "#/components/schemas/ObjectSelfLinks"
          }
        }
      },
      "CftObjectsCftnetAttributes": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "call": {
            "description": "Call direction possible through this network resource Case Insensitive",
            "default": "INOUT",
            "type": "string",
            "enum": [
              "INOUT",
              "OUT",
              "IN"
            ]
          },
          "class": {
            "description": "Maximum value depends on the platform:\n- z/OS : 32\n- Windows : 64\n- Unix : 8\n- IBM i : 16\n- VMS : 16",
            "type": "integer",
            "minimum": 0,
            "default": 1
          },
          "comment": {
            "description": "Free comment Case Insensitive",
            "type": "string",
            "maxLength": 80
          },
          "maxcnx": {
            "description": "Maximum value depends on the platform:\n- z/OS : 990\n- Windows,Unix,IBM i,VMS : 2000",
            "type": "integer",
            "minimum": 1,
            "default": 384
          },
          "origin": {
            "$ref": "#/components/schemas/CftEnumORIGIN"
          },
          "type": {
            "description": "Local or remote resource type.",
            "type": "string",
            "enum": [
              "TCP"
            ]
          }
        }
      },
      "CftObjectsCftnetAttributesTypeTcp": {
        "description": "Definition of CFTTCP object.",
        "allOf": [
          {
            "$ref": "#/components/schemas/CftObjectsCftnetAttributes"
          },
          {
            "type": "object",
            "properties": {
              "protocol": {
                "description": "The proxy dialog protocol ; Transfer CFT supports SOCKS4 and SOCKS5 Case Insensitive",
                "default": " ",
                "type": "string",
                "enum": [
                  "GENERIC",
                  "SOCKS4",
                  "SOCKS5",
                  "SR",
                  " "
                ]
              },
              "inet": {
                "description": "Identifier of the CFTNET command defining access to the first network Case Insensitive",
                "type": "string",
                "maxLength": 32
              },
              "host": {
                "description": "Resource address The z/OS, IBM i, and OpenVMS platforms are case insensitive; place the value between double quotes to ensure case sensitivity.",
                "type": "string",
                "maxLength": 64
              },
              "parm": {
                "description": "Host parameter",
                "type": "string",
                "maxLength": 512
              },
              "port": {
                "description": "Listening port of the proxy/proxies in the first network",
                "type": "integer",
                "minimum": 1,
                "maximum": 65535
              }
            },
            "example": {
              "type": "TCP",
              "comment": "Sample definition for TCP incoming connection only",
              "host": "INADDR_ANY",
              "maxcnx": 200,
              "call": "IN"
            }
          }
        ]
      },
      "CftObjectsCftlogList": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "links": {
            "$ref": "#/components/schemas/ObjectSelfLinks"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CftObjectsCftlogGetInfo"
            }
          }
        },
        "example": {
          "links": {
            "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftlog"
          },
          "data": [
            {
              "type": "cftlog",
              "id": "log2",
              "attributes": {
                "afname": "alternate_file",
                "content": "FULL",
                "exec": "Switch_log_procedure",
                "fname": "log_file",
                "length": 160,
                "opermsg": 0,
                "maxrec": 0,
                "notify": "        ",
                "switch": "00000000",
                "ntf": "NO",
                "ntftyp": "EF",
                "comment": "Transfer CFT log file",
                "format": "V24",
                "origin": "DESIGNER"
              },
              "links": {
                "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftlog/log2"
              }
            }
          ]
        }
      },
      "CftObjectsCftlogGet": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "links": {
            "$ref": "#/components/schemas/ObjectSelfLinks"
          },
          "data": {
            "$ref": "#/components/schemas/CftObjectsCftlogGetInfo"
          }
        },
        "example": {
          "links": {
            "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftlog/log2"
          },
          "data": {
            "type": "cftlog",
            "id": "log2",
            "attributes": {
              "afname": "alternate_file",
              "content": "FULL",
              "exec": "Switch_log_procedure",
              "fname": "log_file",
              "length": 160,
              "opermsg": 0,
              "maxrec": 0,
              "notify": "        ",
              "switch": "00000000",
              "ntf": "NO",
              "ntftyp": "EF",
              "comment": "Transfer CFT log file",
              "format": "V24",
              "origin": "DESIGNER"
            }
          }
        }
      },
      "CftObjectsCftlogGetInfo": {
        "type": "object",
        "required": [
          "type",
          "id",
          "attributes"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "cftlog"
            ]
          },
          "id": {
            "type": "string"
          },
          "attributes": {
            "$ref": "#/components/schemas/CftObjectsCftlogAttributes"
          },
          "links": {
            "$ref": "#/components/schemas/ObjectSelfLinks"
          }
        }
      },
      "CftObjectsCftlogAttributes": {
        "type": "object",
        "required": [
          "fname"
        ],
        "properties": {
          "afname": {
            "description": "Name of the alternate log file The z/OS, IBM i, and OpenVMS platforms are case insensitive; place the value between double quotes to ensure case sensitivity.",
            "type": "string",
            "maxLength": 512
          },
          "comment": {
            "description": "Free comment Case Insensitive",
            "type": "string",
            "maxLength": 80
          },
          "content": {
            "description": "Message filter Case Insensitive",
            "default": "FULL",
            "type": "string",
            "enum": [
              "FULL",
              "BRIEF"
            ]
          },
          "exec": {
            "description": "Name of the procedure to be executed when switching to the other log file The z/OS, IBM i, and OpenVMS platforms are case insensitive; place the value between double quotes to ensure case sensitivity.",
            "type": "string",
            "maxLength": 512
          },
          "fname": {
            "description": "Name of the log file The z/OS, IBM i, and OpenVMS platforms are case insensitive; place the value between double quotes to ensure case sensitivity.",
            "type": "string",
            "maxLength": 512
          },
          "length": {
            "description": "Size of log file records.\nThe default value is 256 for z/OS and IBM i plateforms and 160 for the others.",
            "type": "integer",
            "minimum": 0,
            "maximum": 1024
          },
          "opermsg": {
            "description": "Transfer information message categories intended for the operator",
            "type": "integer",
            "minimum": 0,
            "maximum": 255,
            "default": 0
          },
          "maxrec": {
            "description": "Number of records written in the log file, from which automatic switching will be performed",
            "type": "integer",
            "minimum": 0,
            "maximum": 999999,
            "default": 0
          },
          "notify": {
            "description": "Destination of the operator messages selected according to the value of the OPERMSG parameter\nThe default value is OP for z/OS and VMS plateforms and space for the others.\nCase Insensitive for z/OS, VMS and IBM i plateforms.",
            "type": "string",
            "maxLength": 32
          },
          "origin": {
            "$ref": "#/components/schemas/CftEnumORIGIN"
          },
          "switch": {
            "description": "Time at which Transfer CFT performs an automatic switch (HHMMSSHH).",
            "type": "string",
            "pattern": "[0-9]{1,8}",
            "minLength": 1,
            "maxLength": 8,
            "default": "00000000"
          },
          "ntf": {
            "description": "Notification of events from Transfer CFT to the XNTF agent Case Insensitive",
            "default": "NO",
            "type": "string",
            "enum": [
              "YES",
              "NO"
            ]
          },
          "ntftyp": {
            "description": "Character string indicating the type of messages for which a notification occurs Case Insensitive",
            "default": "EF",
            "type": "string",
            "maxLength": 7
          },
          "ntfalert": {
            "description": "List of Transfer CFT message identifiers that are notified with an alert Case Insensitive",
            "type": "array",
            "maxItems": 10,
            "items": {
              "type": "string",
              "maxLength": 7
            }
          },
          "format": {
            "description": "Indicates the log messages format",
            "default": "V23",
            "type": "string",
            "enum": [
              "V23",
              "V24"
            ]
          }
        }
      },
      "CftObjectsCftcomList": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "links": {
            "$ref": "#/components/schemas/ObjectSelfLinks"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CftObjectsCftcomGetInfo"
            }
          }
        },
        "example": {
          "links": {
            "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftcom"
          },
          "data": [
            {
              "type": "cftcom",
              "id": "comfile",
              "attributes": {
                "type": "FILE",
                "comment": "Sample definition for a file communication media with a scan every 5 seconds",
                "wscan": 5,
                "name": "com_file_name",
                "origin": "DESIGNER"
              },
              "links": {
                "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftcom/comfile"
              }
            },
            {
              "type": "cftcom",
              "id": "comtcp",
              "attributes": {
                "type": "TCPIP",
                "comment": "Sample definition for synchronous API requests",
                "host": "127.0.0.1",
                "port": 33004,
                "protocol": "xhttp",
                "origin": "DESIGNER"
              },
              "links": {
                "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftcom/comtcp"
              }
            }
          ]
        }
      },
      "CftObjectsCftcomGet": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "links": {
            "$ref": "#/components/schemas/ObjectSelfLinks"
          },
          "data": {
            "$ref": "#/components/schemas/CftObjectsCftcomGetInfo"
          }
        },
        "example": {
          "links": {
            "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftcom/comfile"
          },
          "data": {
            "type": "cftcom",
            "id": "comfile",
            "attributes": {
              "type": "FILE",
              "comment": "Sample definition for the file communication media with a scan every 5 seconds",
              "wscan": 5,
              "name": "com_file_name",
              "origin": "DESIGNER"
            }
          }
        }
      },
      "CftObjectsCftcomGetInfo": {
        "type": "object",
        "required": [
          "type",
          "id",
          "attributes"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "cftcom"
            ]
          },
          "id": {
            "type": "string"
          },
          "attributes": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/CftObjectsCftcomAttributesTypeFile"
              },
              {
                "$ref": "#/components/schemas/CftObjectsCftcomAttributesTypeTcpip"
              }
            ],
            "discriminator": {
              "propertyName": "type",
              "mapping": {
                "FILE": "#/components/schemas/CftObjectsCftcomAttributesTypeFile",
                "TCPIP": "#/components/schemas/CftObjectsCftcomAttributesTypeTcpip"
              }
            }
          },
          "links": {
            "$ref": "#/components/schemas/ObjectSelfLinks"
          }
        }
      },
      "CftObjectsCftcomAttributes": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "comment": {
            "description": "Free comment Case Insensitive",
            "type": "string",
            "maxLength": 80
          },
          "origin": {
            "$ref": "#/components/schemas/CftEnumORIGIN"
          },
          "type": {
            "description": "Transfer CFT communication media.",
            "type": "string",
            "enum": [
              "FILE",
              "TCPIP"
            ]
          }
        }
      },
      "CftObjectsCftcomAttributesTypeTcpip": {
        "description": "A definition for a CFTCOM object with TYPE=TCPIP",
        "allOf": [
          {
            "$ref": "#/components/schemas/CftObjectsCftcomAttributes"
          },
          {
            "type": "object",
            "properties": {
              "addrlist": {
                "description": "List of authorized addresses that you can use to connect to the communication media The z/OS, IBM i, and OpenVMS platforms are case insensitive; place the value between double quotes to ensure case sensitivity.",
                "type": "array",
                "maxItems": 16,
                "items": {
                  "type": "string",
                  "maxLength": 64
                }
              },
              "discts": {
                "description": "Wait timeout, in seconds, before disconnection, in the absence of a new transfer request from the partner, in server mode",
                "type": "integer",
                "minimum": 0,
                "maximum": 86400,
                "default": 60
              },
              "host": {
                "description": "Networking IP address of the local resource Case Insensitive",
                "type": "string",
                "maxLength": 64
              },
              "port": {
                "description": "Listening port of the network",
                "type": "integer",
                "minimum": 0,
                "maximum": 65535
              },
              "protocol": {
                "description": "Remote TCP network resource Case Insensitive",
                "type": "string",
                "maxLength": 6
              },
              "wscan": {
                "description": "Frequency, in seconds, with which the Transfer CFT scans the communication file",
                "type": "integer",
                "minimum": 1,
                "maximum": 3600,
                "default": 60
              },
              "ssl": {
                "description": "SSL command identifier used for security profiles Case Insensitive",
                "type": "string",
                "maxLength": 32
              }
            },
            "example": {
              "type": "TCPIP",
              "comment": "Sample definition for synchronous API requests",
              "host": "127.0.0.1",
              "port": 33004,
              "protocol": "xhttp"
            }
          }
        ]
      },
      "CftObjectsCftcomAttributesTypeFile": {
        "description": "Definition of a communication media of type FILE",
        "allOf": [
          {
            "$ref": "#/components/schemas/CftObjectsCftcomAttributes"
          },
          {
            "type": "object",
            "properties": {
              "fname": {
                "description": "Communication file name The z/OS, IBM i, and OpenVMS platforms are case insensitive; place the value between double quotes to ensure case sensitivity.",
                "type": "string",
                "maxLength": 512
              },
              "name": {
                "description": "Communication file name The z/OS, IBM i, and OpenVMS platforms are case insensitive; place the value between double quotes to ensure case sensitivity.",
                "type": "string",
                "maxLength": 512
              },
              "tlvcexec": {
                "description": "Batch to execute when the alert ends",
                "type": "string",
                "maxLength": 512
              },
              "tlvclear": {
                "description": "Level below which the alert ceases",
                "type": "integer",
                "minimum": 0,
                "maximum": 100,
                "default": 0
              },
              "tlvwarn": {
                "description": "Command file usage limit before issuing an alert. When this limit is reached, the TLVWEXEC is executed",
                "type": "integer",
                "minimum": 0,
                "maximum": 100,
                "default": 70
              },
              "tlvwexec": {
                "description": "Batch to execute when TLVWARN is reached",
                "type": "string",
                "maxLength": 512
              },
              "tlvwrate": {
                "description": "The minimum amount of time, in seconds, to wait before resending an alert",
                "type": "integer",
                "minimum": 0,
                "maximum": 65535,
                "default": 60
              },
              "wscan": {
                "description": "Frequency, in seconds, with which the Transfer CFT scans the communication file",
                "type": "integer",
                "minimum": 1,
                "maximum": 3600,
                "default": 60
              }
            },
            "example": {
              "type": "FILE",
              "comment": "Sample definition for file communication media with scan every 5 seconds",
              "wscan": 5,
              "name": "com_file_name"
            }
          }
        ]
      },
      "CftObjectsCftcatList": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "links": {
            "$ref": "#/components/schemas/ObjectSelfLinks"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CftObjectsCftcatGetInfo"
            }
          }
        },
        "example": {
          "links": {
            "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftcat"
          },
          "data": [
            {
              "type": "cftcat",
              "id": "cat2",
              "attributes": {
                "cache": 256,
                "fname": "catalog_file",
                "rkerror": "KEEP",
                "rh": 10,
                "rt": 10,
                "ry": 10,
                "rx": 10,
                "sh": 10,
                "st": 10,
                "sy": 10,
                "sx": 10,
                "timep": 23595999,
                "updat": 256,
                "wscan": 5,
                "tvlclear": 70,
                "tvlwarn": 80,
                "tvlwrate": 60,
                "ntf": "NO",
                "ntfstate": "CDHKTX",
                "comment": "Transfer CFT catalog file",
                "origin": "DESIGNER"
              },
              "links": {
                "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftcat/cat2"
              }
            }
          ]
        }
      },
      "CftObjectsCftcatGet": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "links": {
            "$ref": "#/components/schemas/ObjectSelfLinks"
          },
          "data": {
            "$ref": "#/components/schemas/CftObjectsCftcatGetInfo"
          }
        },
        "example": {
          "links": {
            "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftcat/cat2"
          },
          "data": {
            "type": "cftcat",
            "id": "cat2",
            "attributes": {
              "cache": 256,
              "fname": "catalog_file",
              "rkerror": "KEEP",
              "rh": 10,
              "rt": 10,
              "ry": 10,
              "rx": 10,
              "sh": 10,
              "st": 10,
              "sy": 10,
              "sx": 10,
              "timep": 23595999,
              "updat": 256,
              "wscan": 5,
              "tvlclear": 70,
              "tvlwarn": 80,
              "tvlwrate": 60,
              "ntf": "NO",
              "ntfstate": "CDHKTX",
              "comment": "Transfer CFT catalog file",
              "origin": "DESIGNER"
            }
          }
        }
      },
      "CftObjectsCftcatGetInfo": {
        "type": "object",
        "required": [
          "type",
          "id",
          "attributes"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "cftcat"
            ]
          },
          "id": {
            "type": "string"
          },
          "attributes": {
            "$ref": "#/components/schemas/CftObjectsCftcatAttributes"
          },
          "links": {
            "$ref": "#/components/schemas/ObjectSelfLinks"
          }
        }
      },
      "CftObjectsCftcatAttributes": {
        "type": "object",
        "required": [
          "fname"
        ],
        "properties": {
          "comment": {
            "description": "Free comment Case Insensitive",
            "type": "string",
            "maxLength": 80
          },
          "fname": {
            "description": "Catalog file name The z/OS, IBM i, and OpenVMS platforms are case insensitive; place the value between double quotes to ensure case sensitivity.",
            "type": "string",
            "maxLength": 512
          },
          "origin": {
            "$ref": "#/components/schemas/CftEnumORIGIN"
          },
          "rkerror": {
            "description": "Action to take if a transfer aborts during the selection phase in server mode Case Insensitive",
            "default": "KEEP",
            "type": "string",
            "enum": [
              "KEEP",
              "DELETE"
            ]
          },
          "rh": {
            "description": "Number of days after which the catalog entries of \"unterminated\" receive requests (C, D, H, or K state) are automatically purged",
            "type": "integer",
            "minimum": 1,
            "maximum": 99,
            "default": 10
          },
          "rt": {
            "description": "Number of days after which the catalog entries of terminated receive transfers (RT state) are automatically purged",
            "type": "integer",
            "minimum": 1,
            "maximum": 99,
            "default": 10
          },
          "ry": {
            "description": "Number of days after which the catalog entries of received post-processing transfers are automatically purged",
            "type": "integer",
            "minimum": 0,
            "maximum": 99,
            "default": 10
          },
          "rx": {
            "description": "Number of days after which the catalog entries of receive transfers for which the end of reception procedure is correctly executed (RX state) are automatically purged",
            "type": "integer",
            "minimum": 1,
            "maximum": 99,
            "default": 10
          },
          "sh": {
            "description": "Number of days after which the catalog entries for \"unterminated\" send requests (D, C, H or K state) are automatically purged",
            "type": "integer",
            "minimum": 1,
            "maximum": 99,
            "default": 10
          },
          "st": {
            "description": "Number of days after which the catalog entries of terminated send transfers (ST state) are automatically purged",
            "type": "integer",
            "minimum": 1,
            "maximum": 99,
            "default": 10
          },
          "sy": {
            "description": "Number of days after which the catalog entries of sent post-processing transfers are automatically purged",
            "type": "integer",
            "minimum": 0,
            "maximum": 99,
            "default": 10
          },
          "sx": {
            "description": "Number of days after which the catalog entries of terminated send transfers, for which the end-of-send transfer procedure was correctly executed (SX state), are automatically purged",
            "type": "integer",
            "minimum": 1,
            "maximum": 99,
            "default": 10
          },
          "timep": {
            "description": "Daily purge time (user defined)",
            "type": "integer",
            "minimum": 0,
            "maximum": 23595999,
            "default": 23595999
          },
          "updat": {
            "description": "Number of synchronization points between two consecutive updates of the catalog file during a transfer",
            "type": "integer",
            "minimum": 0,
            "maximum": 32767,
            "default": 256
          },
          "wscan": {
            "description": "Frequency, in minutes, with which Transfer CFT scans the catalog file when restarting a transfer",
            "type": "integer",
            "minimum": 1,
            "maximum": 60,
            "default": 5
          },
          "tlvcexec": {
            "description": "Batch to execute when the alert ends The z/OS, IBM i, and OpenVMS platforms are case insensitive; place the value between double quotes to ensure case sensitivity.",
            "type": "string",
            "maxLength": 512
          },
          "tlvclear": {
            "description": "Level below which the alert ceases",
            "type": "integer",
            "minimum": 0,
            "maximum": 100,
            "default": 0
          },
          "tlvwarn": {
            "description": "Catalog usage limit before issuing an alert. Once this limit is reached, the CFTCAT/TLVWEXEC is executed",
            "type": "integer",
            "minimum": 0,
            "maximum": 100,
            "default": 80
          },
          "tlvwexec": {
            "description": "Batch to execute when CFTCAT/TLVWARN is reached The z/OS, IBM i, and OpenVMS platforms are case insensitive; place the value between double quotes to ensure case sensitivity.",
            "type": "string",
            "maxLength": 512
          },
          "tlvwrate": {
            "description": "The minimum amount of time, in seconds, to wait before resending an alert",
            "type": "integer",
            "minimum": 0,
            "maximum": 65535,
            "default": 60
          },
          "ntf": {
            "description": "Notification of events to the XNTF agent Case Insensitive",
            "default": "NO",
            "type": "string",
            "enum": [
              "YES",
              "NO"
            ]
          },
          "ntfstate": {
            "description": "Character string describing the Transfer CFT states that are notified Case Insensitive",
            "default": "CDHKTX",
            "type": "string",
            "maxLength": 7
          }
        }
      },
      "CftObjectsCftsshListServer": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "links": {
            "$ref": "#/components/schemas/ObjectSelfLinks"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CftObjectsCftsshGetServerInfo"
            }
          }
        },
        "example": {
          "links": {
            "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftssh/server"
          },
          "data": [
            {
              "type": "cftsshserver",
              "id": "SSH_DEFAULT",
              "attributes": {
                "srvprivkey": "PrivRSAKey",
                "clipubkey": "CliPubKey",
                "ciphlist": [
                  "AES256-CTR",
                  "AES192-CTR"
                ],
                "keyexchg": [
                  "CURVE25519-SHA256@LIBSSH.ORG",
                  "ECDH-SHA2-NISTP256"
                ],
                "hmac": [
                  "HMAC-SHA2-512",
                  "HMAC-SHA2-256"
                ],
                "comment": "Server requires client key authentication",
                "origin": "DESIGNER"
              },
              "links": {
                "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftssh/server/SSH_DEFAULT"
              }
            }
          ]
        }
      },
      "CftObjectsCftsshGetServer": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "links": {
            "$ref": "#/components/schemas/ObjectSelfLinks"
          },
          "data": {
            "$ref": "#/components/schemas/CftObjectsCftsshGetServerInfo"
          }
        },
        "example": {
          "links": {
            "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftssh/server/SSH_DEFAULT"
          },
          "data": {
            "type": "cftsshserver",
            "id": "SSH_DEFAULT",
            "attributes": {
              "srvprivkey": "PrivRSAKey",
              "clipubkey": "CliPubKey",
              "ciphlist": [
                "AES256-CTR",
                "AES192-CTR"
              ],
              "keyexchg": [
                "CURVE25519-SHA256@LIBSSH.ORG",
                "ECDH-SHA2-NISTP256"
              ],
              "hmac": [
                "HMAC-SHA2-512",
                "HMAC-SHA2-256"
              ],
              "comment": "Server requires client key authentication",
              "origin": "DESIGNER"
            }
          }
        }
      },
      "CftObjectsCftsshGetServerInfo": {
        "type": "object",
        "required": [
          "type",
          "id",
          "attributes"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "cftsshserver"
            ]
          },
          "id": {
            "type": "string"
          },
          "attributes": {
            "$ref": "#/components/schemas/CftObjectsCftsshAttributesServer"
          },
          "links": {
            "$ref": "#/components/schemas/ObjectSelfLinks"
          }
        }
      },
      "CftObjectsCftsshAttributesServer": {
        "type": "object",
        "properties": {
          "srvprivkey": {
            "description": "Server private key filename or ID The z/OS, IBM i, and OpenVMS platforms are case insensitive; place the value between double quotes to ensure case sensitivity.",
            "type": "string",
            "maxLength": 513
          },
          "clipubkey": {
            "description": "Client public key filename or ID The z/OS, IBM i, and OpenVMS platforms are case insensitive; place the value between double quotes to ensure case sensitivity.",
            "type": "string",
            "maxLength": 513
          },
          "ciphlist": {
            "description": "List of algorithms supported Case Insensitive",
            "type": "array",
            "maxItems": 12,
            "items": {
              "type": "string",
              "maxLength": 32
            }
          },
          "keyexchg": {
            "description": "Key exchange method to be used Case Insensitive",
            "type": "array",
            "maxItems": 12,
            "items": {
              "type": "string",
              "maxLength": 32
            }
          },
          "hmac": {
            "description": "List of accepted HMAC Case Insensitive",
            "type": "array",
            "maxItems": 12,
            "items": {
              "type": "string",
              "maxLength": 32
            }
          },
          "origin": {
            "$ref": "#/components/schemas/CftEnumORIGIN"
          },
          "comment": {
            "description": "Free comment Case Insensitive",
            "type": "string",
            "maxLength": 80
          }
        }
      },
      "CftObjectsCftsshListClient": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "links": {
            "$ref": "#/components/schemas/ObjectSelfLinks"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CftObjectsCftsshGetClientInfo"
            }
          }
        },
        "example": {
          "links": {
            "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftssh/client"
          },
          "data": [
            {
              "type": "cftsshclient",
              "id": "SSH_DEFAULT",
              "attributes": {
                "cliprivkey": "CliPrivKey",
                "srvpubkey": "PubRSAKey",
                "ciphlist": [
                  "AES256-CTR",
                  "AES192-CTR"
                ],
                "keyexchg": [
                  "CURVE25519-SHA256@LIBSSH.ORG",
                  "ECDH-SHA2-NISTP256"
                ],
                "hmac": [
                  "HMAC-SHA2-512",
                  "HMAC-SHA2-256"
                ],
                "comment": "Client using key authentication",
                "origin": "DESIGNER"
              },
              "links": {
                "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftssh/client/SSH_DEFAULT"
              }
            }
          ]
        }
      },
      "CftObjectsCftsshGetClient": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "links": {
            "$ref": "#/components/schemas/ObjectSelfLinks"
          },
          "data": {
            "$ref": "#/components/schemas/CftObjectsCftsshGetClientInfo"
          }
        },
        "example": {
          "links": {
            "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftssh/client/SSH_DEFAULT"
          },
          "data": {
            "type": "cftsshclient",
            "id": "SSH_DEFAULT",
            "attributes": {
              "cliprivkey": "CliPrivKey",
              "srvpubkey": "PubRSAKey",
              "ciphlist": [
                "AES256-CTR",
                "AES192-CTR"
              ],
              "keyexchg": [
                "CURVE25519-SHA256@LIBSSH.ORG",
                "ECDH-SHA2-NISTP256"
              ],
              "hmac": [
                "HMAC-SHA2-512",
                "HMAC-SHA2-256"
              ],
              "comment": "Client using key authentication",
              "origin": "DESIGNER"
            }
          }
        }
      },
      "CftObjectsCftsshGetClientInfo": {
        "type": "object",
        "required": [
          "type",
          "id",
          "attributes"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "cftsshclient"
            ]
          },
          "id": {
            "type": "string"
          },
          "attributes": {
            "$ref": "#/components/schemas/CftObjectsCftsshAttributesClient"
          },
          "links": {
            "$ref": "#/components/schemas/ObjectSelfLinks"
          }
        }
      },
      "CftObjectsCftsshAttributesClient": {
        "type": "object",
        "properties": {
          "cliprivkey": {
            "description": "Client private key filename or ID The z/OS, IBM i, and OpenVMS platforms are case insensitive; place the value between double quotes to ensure case sensitivity.",
            "type": "string",
            "maxLength": 513
          },
          "srvpubkey": {
            "description": "Server public key filename or ID The z/OS, IBM i, and OpenVMS platforms are case insensitive; place the value between double quotes to ensure case sensitivity.",
            "type": "string",
            "maxLength": 513
          },
          "ciphlist": {
            "description": "List of supported algorithms Case Insensitive",
            "type": "array",
            "maxItems": 12,
            "items": {
              "type": "string",
              "maxLength": 32
            }
          },
          "keyexchg": {
            "description": "Key exchange method to use Case Insensitive",
            "type": "array",
            "maxItems": 12,
            "items": {
              "type": "string",
              "maxLength": 32
            }
          },
          "hmac": {
            "description": "List of accepted HMAC Case Insensitive",
            "type": "array",
            "maxItems": 12,
            "items": {
              "type": "string",
              "maxLength": 32
            }
          },
          "origin": {
            "$ref": "#/components/schemas/CftEnumORIGIN"
          },
          "comment": {
            "description": "Free comment Case Insensitive",
            "type": "string",
            "maxLength": 80
          }
        }
      },
      "CftObjectsCftsslListServer": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "links": {
            "$ref": "#/components/schemas/ObjectSelfLinks"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CftObjectsCftsslGetServerInfo"
            }
          }
        },
        "example": {
          "links": {
            "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftssl/server"
          },
          "data": [
            {
              "type": "cftsslserver",
              "id": "SSL_DEFAULT",
              "attributes": {
                "version": "TLSV1COMP",
                "keyext": "NONE",
                "ciphlist": [
                  49200,
                  49199
                ],
                "usercid": "localuser",
                "rootcid": [
                  "localroot",
                  "remoteca"
                ],
                "verify": "REQUIRED",
                "comment": "Make a file available when using Transfer CFT in server mode",
                "origin": "DESIGNER"
              },
              "links": {
                "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftssl/server/SSL_DEFAULT"
              }
            }
          ]
        }
      },
      "CftObjectsCftsslGetServer": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "links": {
            "$ref": "#/components/schemas/ObjectSelfLinks"
          },
          "data": {
            "$ref": "#/components/schemas/CftObjectsCftsslGetServerInfo"
          }
        },
        "example": {
          "links": {
            "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftssl/server/SSL_DEFAULT"
          },
          "data": {
            "type": "cftsslserver",
            "id": "SSL_DEFAULT",
            "attributes": {
              "version": "TLSV1COMP",
              "keyext": "NONE",
              "ciphlist": [
                49200,
                49199
              ],
              "usercid": "localuser",
              "rootcid": [
                "localroot",
                "remoteca"
              ],
              "verify": "REQUIRED",
              "comment": "Make a file available when using Transfer CFT in server mode",
              "origin": "DESIGNER"
            }
          }
        }
      },
      "CftObjectsCftsslGetServerInfo": {
        "type": "object",
        "required": [
          "type",
          "id",
          "attributes"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "cftsslserver"
            ]
          },
          "id": {
            "type": "string"
          },
          "attributes": {
            "$ref": "#/components/schemas/CftObjectsCftsslAttributesServer"
          },
          "links": {
            "$ref": "#/components/schemas/ObjectSelfLinks"
          }
        }
      },
      "CftObjectsCftsslAttributesServer": {
        "type": "object",
        "required": [
          "ciphlist"
        ],
        "properties": {
          "cache": {
            "description": "Activates SSL cache Case Insensitive",
            "default": "NO",
            "type": "string",
            "enum": [
              "YES",
              "NO"
            ]
          },
          "cerfname": {
            "description": "File name root where the remote user chain of certificates is recorded The z/OS, IBM i, and OpenVMS platforms are case insensitive; place the value between double quotes to ensure case sensitivity.",
            "type": "string",
            "maxLength": 64
          },
          "ciphlist": {
            "description": "List of supported algorithms",
            "type": "array",
            "maxItems": 12,
            "items": {
              "type": "integer"
            }
          },
          "comment": {
            "description": "Free comment Case Insensitive",
            "type": "string",
            "maxLength": 80
          },
          "depth": {
            "description": "Maximum number of intermediate authorities authorized for the remote certificate",
            "type": "integer",
            "minimum": 0,
            "maximum": 10,
            "default": 10
          },
          "dnuser": {
            "description": "String that the remote certificate DN must contain Case Insensitive",
            "type": "string",
            "maxLength": 512
          },
          "dnissuer": {
            "description": "String that the remote certificate DN must contain Case Insensitive",
            "type": "string",
            "maxLength": 512
          },
          "origin": {
            "$ref": "#/components/schemas/CftEnumORIGIN"
          },
          "parm": {
            "description": "User parameter for SSL",
            "type": "string",
            "maxLength": 64
          },
          "rootcid": {
            "description": "List of certificate authorities that references identifiers in the local certificate database",
            "type": "array",
            "maxItems": 10,
            "items": {
              "type": "string",
              "maxLength": 256
            }
          },
          "trace": {
            "description": "SSL trace level",
            "type": "integer",
            "minimum": 0,
            "maximum": 255,
            "default": 0
          },
          "usercid": {
            "description": "Local user certificate",
            "type": "string",
            "maxLength": 256
          },
          "verify": {
            "description": "Authentication level Case Insensitive",
            "default": "REQUIRED",
            "type": "string",
            "enum": [
              "REQUIRED",
              "OPTIONAL",
              "NONE"
            ]
          },
          "version": {
            "description": "Session version Case Insensitive",
            "default": "TLSV1",
            "type": "string",
            "enum": [
              "SSLV3",
              "TLSV1",
              "SSLV3COMP",
              "TLSV1COMP"
            ]
          },
          "keyext": {
            "description": "Indicates if the key extensions for the remote certificate must be checked  Case Insensitive",
            "default": "NONE",
            "type": "string",
            "enum": [
              "VERIFY",
              "NONE"
            ]
          },
          "passw": {
            "description": "Password to use with PassPort PS server",
            "type": "string",
            "maxLength": 32
          }
        }
      },
      "CftObjectsCftsslListClient": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "links": {
            "$ref": "#/components/schemas/ObjectSelfLinks"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CftObjectsCftsslGetClientInfo"
            }
          }
        },
        "example": {
          "links": {
            "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftssl/client"
          },
          "data": [
            {
              "type": "cftsslclient",
              "id": "SSL_DEFAULT",
              "attributes": {
                "version": "TLSV1COMP",
                "keyext": "NONE",
                "ciphlist": [
                  49200,
                  49199
                ],
                "usercid": "localuser",
                "rootcid": [
                  "localroot",
                  "remoteca"
                ],
                "verify": "REQUIRED",
                "comment": "Make a file available when using Transfer CFT in server mode",
                "origin": "DESIGNER"
              },
              "links": {
                "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftssl/client/SSL_DEFAULT"
              }
            }
          ]
        }
      },
      "CftObjectsCftsslGetClient": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "links": {
            "$ref": "#/components/schemas/ObjectSelfLinks"
          },
          "data": {
            "$ref": "#/components/schemas/CftObjectsCftsslGetClientInfo"
          }
        },
        "example": {
          "links": {
            "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftssl/client/SSL_DEFAULT"
          },
          "data": {
            "type": "cftsslclient",
            "id": "SSL_DEFAULT",
            "attributes": {
              "version": "TLSV1COMP",
              "keyext": "NONE",
              "ciphlist": [
                49200,
                49199
              ],
              "usercid": "localuser",
              "rootcid": [
                "localroot",
                "remoteca"
              ],
              "verify": "REQUIRED",
              "comment": "Make a file available when using Transfer CFT in server mode",
              "origin": "DESIGNER"
            }
          }
        }
      },
      "CftObjectsCftsslGetClientInfo": {
        "type": "object",
        "required": [
          "type",
          "id",
          "attributes"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "cftsslclient"
            ]
          },
          "id": {
            "type": "string"
          },
          "attributes": {
            "$ref": "#/components/schemas/CftObjectsCftsslAttributesClient"
          },
          "links": {
            "$ref": "#/components/schemas/ObjectSelfLinks"
          }
        }
      },
      "CftObjectsCftsslAttributesClient": {
        "type": "object",
        "required": [
          "ciphlist"
        ],
        "properties": {
          "cache": {
            "description": "Activates SSL cache Case Insensitive",
            "default": "NO",
            "type": "string",
            "enum": [
              "YES",
              "NO"
            ]
          },
          "cerfname": {
            "description": "File name root where the remote user chain of certificates is recorded The z/OS, IBM i, and OpenVMS platforms are case insensitive; place the value between double quotes to ensure case sensitivity.",
            "type": "string",
            "maxLength": 64
          },
          "ciphlist": {
            "description": "List of supported algorithms",
            "type": "array",
            "maxItems": 12,
            "items": {
              "type": "integer"
            }
          },
          "comment": {
            "description": "Free comment Case Insensitive",
            "type": "string",
            "maxLength": 80
          },
          "depth": {
            "description": "Maximum number of intermediate authorities authorized for the remote certificate",
            "type": "integer",
            "minimum": 0,
            "maximum": 10,
            "default": 10
          },
          "dnuser": {
            "description": "String that the remote certificate DN must contain Case Insensitive",
            "type": "string",
            "maxLength": 512
          },
          "dnissuer": {
            "description": "String that the remote certificate DN must contain Case Insensitive",
            "type": "string",
            "maxLength": 512
          },
          "origin": {
            "$ref": "#/components/schemas/CftEnumORIGIN"
          },
          "parm": {
            "description": "User parameter for SSL",
            "type": "string",
            "maxLength": 64
          },
          "rootcid": {
            "description": "List of certificate authorities that references identifiers in the local certificate database",
            "type": "array",
            "maxItems": 10,
            "items": {
              "type": "string",
              "maxLength": 256
            }
          },
          "trace": {
            "description": "SSL trace level",
            "type": "integer",
            "minimum": 0,
            "maximum": 255,
            "default": 0
          },
          "usercid": {
            "description": "Local user certificate",
            "type": "string",
            "maxLength": 256
          },
          "verify": {
            "description": "Authentication level Case Insensitive",
            "default": "NONE",
            "type": "string",
            "enum": [
              "ENFORCED",
              "REQUIRED",
              "OPTIONAL",
              "NONE"
            ]
          },
          "version": {
            "description": "Session version Case Insensitive",
            "default": "TLSV1",
            "type": "string",
            "enum": [
              "SSLV3",
              "TLSV1",
              "SSLV3COMP",
              "TLSV1COMP"
            ]
          },
          "keyext": {
            "description": "Indicates if the key extensions for the remote certificate must be checked  Case Insensitive",
            "default": "NONE",
            "type": "string",
            "enum": [
              "VERIFY",
              "NONE"
            ]
          },
          "passw": {
            "description": "Password to use with PassPort PS server",
            "type": "string",
            "maxLength": 32
          }
        }
      },
      "CftObjectsCftprivList": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "links": {
            "$ref": "#/components/schemas/ObjectSelfLinks"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CftObjectsCftprivGetInfo"
            }
          }
        },
        "example": {
          "links": {
            "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftpriv"
          },
          "data": [
            {
              "type": "cftpriv",
              "id": "make_transfer",
              "attributes": {
                "resource": "transfer",
                "actions": [
                  "create",
                  "delete",
                  "view",
                  "edit",
                  "cancel",
                  "resume",
                  "pause",
                  "execute",
                  "submit",
                  "end"
                ],
                "comment": "Manages transfer",
                "origin": "DESIGNER"
              },
              "links": {
                "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftpriv/make_transfer"
              }
            },
            {
              "type": "cftpriv",
              "id": "PRIV-CONN-INTERFACE",
              "attributes": {
                "resource": "SERVICE:UI",
                "actions": [
                  "CONNECT"
                ],
                "condition": "GROUP==\"PRODUCTION\" && ID~=\"CFT-PROD-ITEM*\"",
                "comment": "PRIV LIMITs the connection for a given Transfer CFT name",
                "origin": "DESIGNER"
              },
              "links": {
                "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftpriv/PRIV-CONN-INTERFACE"
              }
            }
          ]
        }
      },
      "CftObjectsCftprivGet": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "links": {
            "$ref": "#/components/schemas/ObjectSelfLinks"
          },
          "data": {
            "$ref": "#/components/schemas/CftObjectsCftprivGetInfo"
          }
        },
        "example": {
          "links": {
            "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftpriv/make_transfer"
          },
          "data": {
            "type": "cftpriv",
            "id": "make_transfer",
            "attributes": {
              "resource": "transfer",
              "actions": [
                "create",
                "delete",
                "view",
                "edit",
                "cancel",
                "resume",
                "pause",
                "execute",
                "submit",
                "end"
              ],
              "comment": "Manages transfer",
              "origin": "DESIGNER"
            }
          }
        }
      },
      "CftObjectsCftprivGetInfo": {
        "type": "object",
        "required": [
          "type",
          "id",
          "attributes"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "cftpriv"
            ]
          },
          "id": {
            "type": "string"
          },
          "attributes": {
            "$ref": "#/components/schemas/CftObjectsCftprivAttributes"
          },
          "links": {
            "$ref": "#/components/schemas/ObjectSelfLinks"
          }
        }
      },
      "CftObjectsCftprivAttributes": {
        "type": "object",
        "required": [
          "resource",
          "actions"
        ],
        "properties": {
          "comment": {
            "description": "Free comment",
            "type": "string",
            "maxLength": 80
          },
          "resource": {
            "description": "Resource on which this privilege is applied Case Insensitive",
            "type": "string",
            "maxLength": 32
          },
          "actions": {
            "description": "List of authorized actions for this privilege",
            "type": "array",
            "maxItems": 16,
            "items": {
              "type": "string",
              "maxLength": 32
            }
          },
          "condition": {
            "description": "Condition for this privilege Case Insensitive",
            "type": "string",
            "maxLength": 256
          },
          "origin": {
            "$ref": "#/components/schemas/CftEnumORIGIN"
          }
        }
      },
      "CftObjectsCftroleList": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "links": {
            "$ref": "#/components/schemas/ObjectSelfLinks"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CftObjectsCftroleGetInfo"
            }
          }
        },
        "example": {
          "links": {
            "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftrole"
          },
          "data": [
            {
              "type": "cftrole",
              "id": "view_flow",
              "attributes": {
                "privs": [
                  "SERVICE:UI_CONNECT",
                  "CONFIGURATION:CFTSEND_VIEW",
                  "CONFIGURATION:CFTRECV_VIEW",
                  "CONFIGURATION:CFTDEST_VIEW"
                ],
                "comment": "Allow only access to flow in read only mode",
                "origin": "DESIGNER"
              },
              "links": {
                "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftrole/view_flow"
              }
            },
            {
              "type": "cftrole",
              "id": "make_transfer",
              "attributes": {
                "privs": [
                  "SERVICE:UI_CONNECT",
                  "make_transfer",
                  "FILTER:CATALOG_ALL",
                  "FILTER:LOG_ALL",
                  "CONFIGURATION:CFTPART_VIEW",
                  "CONFIGURATION:CFTSEND_VIEW",
                  "CONFIGURATION:CFTRECV_VIEW",
                  "CONFIGURATION:CFTDEST_VIEW"
                ],
                "comment": "Create and manage transfers",
                "origin": "DESIGNER"
              },
              "links": {
                "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftrole/make_transfer"
              }
            }
          ]
        }
      },
      "CftObjectsCftroleGet": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "links": {
            "$ref": "#/components/schemas/ObjectSelfLinks"
          },
          "data": {
            "$ref": "#/components/schemas/CftObjectsCftroleGetInfo"
          }
        },
        "example": {
          "links": {
            "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftrole/view_flow"
          },
          "data": {
            "type": "cftrole",
            "id": "view_flow",
            "attributes": {
              "privs": [
                "SERVICE:UI_CONNECT",
                "CONFIGURATION:CFTSEND_VIEW",
                "CONFIGURATION:CFTRECV_VIEW",
                "CONFIGURATION:CFTDEST_VIEW"
              ],
              "comment": "Only allow access to flow in read mode",
              "origin": "DESIGNER"
            }
          }
        }
      },
      "CftObjectsCftroleGetInfo": {
        "type": "object",
        "required": [
          "type",
          "id",
          "attributes"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "cftrole"
            ]
          },
          "id": {
            "type": "string"
          },
          "attributes": {
            "$ref": "#/components/schemas/CftObjectsCftroleAttributes"
          },
          "links": {
            "$ref": "#/components/schemas/ObjectSelfLinks"
          }
        }
      },
      "CftObjectsCftroleAttributes": {
        "type": "object",
        "properties": {
          "comment": {
            "description": "Free comment",
            "type": "string",
            "maxLength": 80
          },
          "aliases": {
            "description": "List of aliases associated to this role",
            "type": "array",
            "maxItems": 32,
            "items": {
              "type": "string",
              "maxLength": 64
            }
          },
          "privs": {
            "description": "List of privileges associated to this role",
            "type": "array",
            "maxItems": 128,
            "items": {
              "type": "string",
              "maxLength": 32
            }
          },
          "origin": {
            "$ref": "#/components/schemas/CftEnumORIGIN"
          }
        }
      },
      "CftObjectsCftfolderList": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "links": {
            "$ref": "#/components/schemas/ObjectSelfLinks"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CftObjectsCftfolderGetInfo"
            }
          }
        }
      },
      "CftObjectsCftfolderGet": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "links": {
            "$ref": "#/components/schemas/ObjectSelfLinks"
          },
          "data": {
            "$ref": "#/components/schemas/CftObjectsCftfolderGetInfo"
          }
        }
      },
      "CftObjectsCftfolderGetInfo": {
        "type": "object",
        "required": [
          "type",
          "id",
          "attributes"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "cftfolder"
            ]
          },
          "id": {
            "type": "string"
          },
          "attributes": {
            "$ref": "#/components/schemas/CftObjectsCftfolderAttributes"
          },
          "links": {
            "$ref": "#/components/schemas/ObjectSelfLinks"
          }
        }
      },
      "CftObjectsCftfolderAttributes": {
        "type": "object",
        "required": [
          "idf",
          "part",
          "scandir",
          "workdir"
        ],
        "properties": {
          "state": {
            "description": "Activation status Case Insensitive",
            "default": "NOACTIVE",
            "type": "string",
            "enum": [
              "ACTIVE",
              "NOACTIVE"
            ]
          },
          "method": {
            "description": "Indicates if the files are moved from the scan folder to the work folder or left Case Insensitive",
            "default": "MOVE",
            "type": "string",
            "enum": [
              "MOVE",
              "FILE"
            ]
          },
          "resubmitchanges": {
            "description": "Indicates if the changed files must be resubmitted Case Insensitive",
            "default": "YES",
            "type": "string",
            "enum": [
              "YES",
              "NO"
            ]
          },
          "enablesubdir": {
            "description": "Indicates if the subfolders are also monitored Case Insensitive",
            "default": "YES",
            "type": "string",
            "enum": [
              "YES",
              "NO"
            ]
          },
          "fileidledelay": {
            "description": "If the state of a file has not changed within this delay in seconds, the file becomes a candidate for submission",
            "type": "integer",
            "minimum": 0,
            "maximum": 1000000000,
            "default": 5
          },
          "idf": {
            "description": "File type identifier Case Insensitive",
            "type": "string",
            "maxLength": 32
          },
          "part": {
            "description": "Partner identifier Case Insensitive",
            "type": "string",
            "maxLength": 64
          },
          "scandir": {
            "description": "Absolute path name of the top level directory to scan",
            "type": "string",
            "maxLength": 512
          },
          "workdir": {
            "description": "Absolute path name of the top level directory available for file state information",
            "type": "string",
            "maxLength": 512
          },
          "interval": {
            "description": "Interval in seconds between two scans of the directory files",
            "type": "integer",
            "minimum": 0,
            "maximum": 1000000000,
            "default": 60
          },
          "filecount": {
            "description": "Maximum number of file submissions for each scan",
            "type": "integer",
            "minimum": 0,
            "maximum": 1000000000,
            "default": 0
          },
          "filesizemin": {
            "description": "Files shorter than this value, in bytes, are not candidates for submission",
            "type": "integer",
            "minimum": 0,
            "maximum": 100000000000000,
            "default": 0
          },
          "filesizemax": {
            "description": "Files larger than this value, in bytes, are not candidates for submission",
            "type": "integer",
            "minimum": 0,
            "maximum": 100000000000000,
            "default": 0
          },
          "filtertype": {
            "description": "The <strong>WILDMAT</strong> action is only valid on Windows, Unix, and IBM i platforms.\nThe WILDMAT is the default only on Windows and Unix, otherwise it is STRJCMP.",
            "type": "string",
            "enum": [
              "WILDMAT",
              "STRJCMP",
              "EREGEX"
            ]
          },
          "includefilter": {
            "description": "Only files whose names match this pattern are monitored",
            "type": "string",
            "maxLength": 256
          },
          "excludefilter": {
            "description": "Files whose names match this pattern are not monitored",
            "type": "string",
            "maxLength": 256
          },
          "renamemethod": {
            "description": "Adds nothing, or a timestamp of the pattern YYYYMMDDHHMMSS, at the end of the name of the renamed file Case Insensitive",
            "default": "TIMESTAMP",
            "type": "string",
            "enum": [
              "NONE",
              "TIMESTAMP"
            ]
          },
          "renameseparator": {
            "description": "The first character defines the separator before the timestamp. The second character, when present, defines the separator after the timestamp",
            "default": ".",
            "type": "string",
            "maxLength": 16
          },
          "usefsevents": {
            "description": "Indicates if you use file-system events to trigger folder scans Case Insensitive",
            "default": "NO",
            "type": "string",
            "enum": [
              "YES",
              "NO"
            ]
          },
          "origin": {
            "$ref": "#/components/schemas/CftEnumORIGIN"
          },
          "archivedir": {
            "description": "Absolute path name of the directory to archive files after transfer",
            "type": "string",
            "maxLength": 512
          },
          "userid": {
            "description": "User for the folder scan",
            "type": "string",
            "maxLength": 32
          },
          "groupid": {
            "description": "Information completing the USERID",
            "type": "string",
            "maxLength": 32
          }
        }
      },
      "CftObjectsCftcronList": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "links": {
            "$ref": "#/components/schemas/ObjectSelfLinks"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CftObjectsCftcronGetInfo"
            }
          }
        },
        "example": {
          "links": {
            "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftcron"
          },
          "data": [
            {
              "type": "cftcron",
              "id": "exec_every_5min",
              "attributes": {
                "crontab": "CRONTAB1,",
                "exec": "<CRONCMD>",
                "time": "m=*/5",
                "state": "NOACTIVE",
                "comment": "Execution script <CRONCMD> every 5 minutes",
                "origin": "DESIGNER"
              },
              "links": {
                "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftcron"
              }
            }
          ]
        }
      },
      "CftObjectsCftcronGet": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "links": {
            "$ref": "#/components/schemas/ObjectSelfLinks"
          },
          "data": {
            "$ref": "#/components/schemas/CftObjectsCftcronGetInfo"
          }
        },
        "example": {
          "links": {
            "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftcron/exec_every_5min"
          },
          "data": {
            "type": "cftcron",
            "id": "exec_every_5min",
            "attributes": {
              "crontab": "CRONTAB1,",
              "exec": "<CRONCMD>",
              "time": "m=*/5",
              "state": "NOACTIVE",
              "comment": "Execution script <CRONCMD> every 5 minutes",
              "origin": "DESIGNER"
            }
          }
        }
      },
      "CftObjectsCftcronGetInfo": {
        "type": "object",
        "required": [
          "type",
          "id",
          "attributes"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "cftcron"
            ]
          },
          "id": {
            "type": "string"
          },
          "attributes": {
            "$ref": "#/components/schemas/CftObjectsCftcronAttributes"
          },
          "links": {
            "$ref": "#/components/schemas/ObjectSelfLinks"
          }
        }
      },
      "CftObjectsCftcronAttributes": {
        "type": "object",
        "required": [
          "crontab",
          "exec",
          "time"
        ],
        "properties": {
          "comment": {
            "description": "Free comment Case Insensitive",
            "type": "string",
            "maxLength": 80
          },
          "crontab": {
            "description": "Identifier that associates a CRONTAB with the CFTPARM object Case Insensitive",
            "type": "string",
            "maxLength": 32
          },
          "exec": {
            "description": "Physical job name The z/OS, IBM i, and OpenVMS platforms are case insensitive; place the value between double quotes to ensure case sensitivity.",
            "type": "string",
            "maxLength": 512
          },
          "origin": {
            "$ref": "#/components/schemas/CftEnumORIGIN"
          },
          "parm": {
            "description": "The PARM to be used in the job execution",
            "type": "string",
            "maxLength": 512
          },
          "state": {
            "description": "Activation Case Insensitive",
            "default": "ACTIVE",
            "type": "string",
            "enum": [
              "ACTIVE",
              "NOACTIVE"
            ]
          },
          "time": {
            "description": "Activation time for the CRONJOB",
            "type": "string",
            "maxLength": 512
          },
          "type": {
            "description": "Script type Case Insensitive",
            "default": "EXEC",
            "type": "string",
            "enum": [
              "EXEC",
              "CFTUTIL"
            ]
          },
          "userid": {
            "description": "The user for this job procedure",
            "type": "string",
            "maxLength": 32
          },
          "execpolicy": {
            "description": "Node policy for executing a job when working with multiple nodes Case Insensitive",
            "default": "INSTANCE",
            "type": "string",
            "enum": [
              "INSTANCE",
              "ALLNODES"
            ]
          }
        }
      },
      "CftObjectsCftapplListRecv": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "links": {
            "$ref": "#/components/schemas/ObjectSelfLinks"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CftObjectsCftapplGetRecvInfo"
            }
          }
        },
        "example": {
          "links": {
            "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftapplrecv"
          },
          "data": [
            {
              "type": "cftapplrecv",
              "id": "purchase",
              "attributes": {
                "userid": "ORDERRECV",
                "comment": "Owner set to receive files related to purchase orders",
                "origin": "DESIGNER"
              },
              "links": {
                "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftapplrecv/purchase"
              }
            }
          ]
        }
      },
      "CftObjectsCftapplGetRecv": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "links": {
            "$ref": "#/components/schemas/ObjectSelfLinks"
          },
          "data": {
            "$ref": "#/components/schemas/CftObjectsCftapplGetRecvInfo"
          }
        },
        "example": {
          "links": {
            "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftapplrecv/purchase"
          },
          "data": {
            "type": "cftapplrecv",
            "id": "purchase",
            "attributes": {
              "userid": "ORDERRECV",
              "comment": "Owner set to receive files related to purchase orders",
              "origin": "DESIGNER"
            }
          }
        }
      },
      "CftObjectsCftapplGetRecvInfo": {
        "type": "object",
        "required": [
          "type",
          "id",
          "attributes"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "cftapplrecv"
            ]
          },
          "id": {
            "type": "string"
          },
          "attributes": {
            "$ref": "#/components/schemas/CftObjectsCftapplAttributes"
          },
          "links": {
            "$ref": "#/components/schemas/ObjectSelfLinks"
          }
        }
      },
      "CftObjectsCftapplListSend": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "links": {
            "$ref": "#/components/schemas/ObjectSelfLinks"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CftObjectsCftapplGetSendInfo"
            }
          }
        },
        "example": {
          "links": {
            "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftapplsend"
          },
          "data": [
            {
              "type": "cftapplsend",
              "id": "purchase",
              "attributes": {
                "userid": "ORDERSEND",
                "comment": "Owner set to send files related to purchase orders",
                "origin": "DESIGNER"
              },
              "links": {
                "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftapplsend/purchase"
              }
            }
          ]
        }
      },
      "CftObjectsCftapplGetSend": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "links": {
            "$ref": "#/components/schemas/ObjectSelfLinks"
          },
          "data": {
            "$ref": "#/components/schemas/CftObjectsCftapplGetSendInfo"
          }
        },
        "example": {
          "links": {
            "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftapplsend/purchase"
          },
          "data": {
            "type": "cftapplsend",
            "id": "purchase",
            "attributes": {
              "userid": "ORDERSEND",
              "comment": "Owner set to send files related to purchase orders",
              "origin": "DESIGNER"
            }
          }
        }
      },
      "CftObjectsCftapplGetSendInfo": {
        "type": "object",
        "required": [
          "type",
          "id",
          "attributes"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "cftapplsend"
            ]
          },
          "id": {
            "type": "string"
          },
          "attributes": {
            "$ref": "#/components/schemas/CftObjectsCftapplAttributes"
          },
          "links": {
            "$ref": "#/components/schemas/ObjectSelfLinks"
          }
        }
      },
      "CftObjectsCftapplListBoth": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "links": {
            "$ref": "#/components/schemas/ObjectSelfLinks"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CftObjectsCftapplGetBothInfo"
            }
          }
        },
        "example": {
          "links": {
            "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftapplboth"
          },
          "data": [
            {
              "type": "cftapplboth",
              "id": "purchase",
              "attributes": {
                "userid": "ORDER",
                "comment": "Owner set to send/received files related to purchase orders",
                "origin": "DESIGNER"
              },
              "links": {
                "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftapplboth/purchase"
              }
            }
          ]
        }
      },
      "CftObjectsCftapplGetBoth": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "links": {
            "$ref": "#/components/schemas/ObjectSelfLinks"
          },
          "data": {
            "$ref": "#/components/schemas/CftObjectsCftapplGetBothInfo"
          }
        },
        "example": {
          "links": {
            "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftapplboth/purchase"
          },
          "data": {
            "type": "cftapplboth",
            "id": "purchase",
            "attributes": {
              "userid": "ORDER",
              "comment": "Owner set to send/received files related to purchase orders",
              "origin": "DESIGNER"
            }
          }
        }
      },
      "CftObjectsCftapplGetBothInfo": {
        "type": "object",
        "required": [
          "type",
          "id",
          "attributes"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "cftapplboth"
            ]
          },
          "id": {
            "type": "string"
          },
          "attributes": {
            "$ref": "#/components/schemas/CftObjectsCftapplAttributes"
          },
          "links": {
            "$ref": "#/components/schemas/ObjectSelfLinks"
          }
        }
      },
      "CftObjectsCftapplAttributes": {
        "type": "object",
        "required": [
          "userid"
        ],
        "properties": {
          "comment": {
            "description": "Free comment Case Insensitive",
            "type": "string",
            "maxLength": 80
          },
          "groupid": {
            "description": "Information for completing the USERID The z/OS, IBM i, and OpenVMS platforms are case insensitive; place the value between double quotes to ensure case sensitivity.",
            "type": "string",
            "maxLength": 32
          },
          "origin": {
            "$ref": "#/components/schemas/CftEnumORIGIN"
          },
          "userid": {
            "description": "Transfer owner's identifier The z/OS, IBM i, and OpenVMS platforms are case insensitive; place the value between double quotes to ensure case sensitivity.",
            "type": "string",
            "maxLength": 32
          }
        }
      },
      "CftObjectsCftauthList": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "links": {
            "$ref": "#/components/schemas/ObjectSelfLinks"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CftObjectsCftauthGetInfo"
            }
          }
        },
        "example": {
          "links": {
            "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftauth"
          },
          "data": [
            {
              "type": "cftauth",
              "id": "sndfactory",
              "attributes": {
                "idf": [
                  "bin",
                  "txt"
                ],
                "comment": "List of send IDF defined for partner FACTORY (CFTPART SAUTH)",
                "origin": "DESIGNER"
              },
              "links": {
                "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftauth/sndfactory"
              }
            },
            {
              "type": "cftauth",
              "id": "recvfactory",
              "attributes": {
                "idf": [
                  "txt"
                ],
                "comment": "List of receive IDF defined for partner FACTORY",
                "origin": "DESIGNER"
              },
              "links": {
                "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftauth/recvfactory"
              }
            }
          ]
        }
      },
      "CftObjectsCftauthGet": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "links": {
            "$ref": "#/components/schemas/ObjectSelfLinks"
          },
          "data": {
            "$ref": "#/components/schemas/CftObjectsCftauthGetInfo"
          }
        },
        "example": {
          "links": {
            "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftauth/sndfactory"
          },
          "data": {
            "type": "cftauth",
            "id": "sndfactory",
            "attributes": {
              "idf": [
                "bin",
                "txt"
              ],
              "comment": "List of send IDF defined for the partner FACTORY",
              "origin": "DESIGNER"
            }
          }
        }
      },
      "CftObjectsCftauthGetInfo": {
        "type": "object",
        "required": [
          "type",
          "id",
          "attributes"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "cftauth"
            ]
          },
          "id": {
            "type": "string"
          },
          "attributes": {
            "$ref": "#/components/schemas/CftObjectsCftauthAttributes"
          },
          "links": {
            "$ref": "#/components/schemas/ObjectSelfLinks"
          }
        }
      },
      "CftObjectsCftauthAttributes": {
        "type": "object",
        "properties": {
          "comment": {
            "description": "Free comment Case Insensitive",
            "type": "string",
            "maxLength": 80
          },
          "fname": {
            "description": "Name of the file where authorized or unauthorized users are defined The z/OS, IBM i, and OpenVMS platforms are case insensitive; place the value between double quotes to ensure case sensitivity.",
            "type": "string",
            "maxLength": 512
          },
          "idf": {
            "description": "List of file identifiers Case Insensitive",
            "type": "array",
            "maxItems": 200,
            "items": {
              "type": "string",
              "maxLength": 32
            }
          },
          "origin": {
            "$ref": "#/components/schemas/CftEnumORIGIN"
          }
        }
      },
      "CftObjectsCftdestList": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "links": {
            "$ref": "#/components/schemas/ObjectSelfLinks"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CftObjectsCftdestGetInfo"
            }
          }
        },
        "example": {
          "links": {
            "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftdest"
          },
          "data": [
            {
              "type": "cftdest",
              "id": "city",
              "attributes": {
                "part": [
                  "PARIS",
                  "NEWYORK"
                ],
                "comment": "City definition sample",
                "origin": "DESIGNER"
              },
              "links": {
                "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftdest/city"
              }
            },
            {
              "type": "cftdest",
              "id": "offices",
              "attributes": {
                "part": [
                  "LYON",
                  "PARIS",
                  "ANNECY"
                ],
                "comment": "Offices definition sample",
                "origin": "DESIGNER"
              },
              "links": {
                "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftdest/offices"
              }
            }
          ]
        }
      },
      "CftObjectsCftdestGet": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "links": {
            "$ref": "#/components/schemas/ObjectSelfLinks"
          },
          "data": {
            "$ref": "#/components/schemas/CftObjectsCftdestGetInfo"
          }
        },
        "example": {
          "links": {
            "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftdest/city"
          },
          "data": {
            "type": "cftdest",
            "id": "city",
            "attributes": {
              "part": [
                "PARIS",
                "NEWYORK"
              ],
              "comment": "City definition sample",
              "origin": "DESIGNER"
            }
          }
        }
      },
      "CftObjectsCftdestGetInfo": {
        "type": "object",
        "required": [
          "type",
          "id",
          "attributes"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "cftdest"
            ]
          },
          "id": {
            "type": "string"
          },
          "attributes": {
            "$ref": "#/components/schemas/CftObjectsCftdestAttributes"
          },
          "links": {
            "$ref": "#/components/schemas/ObjectSelfLinks"
          }
        }
      },
      "CftObjectsCftdestAttributes": {
        "type": "object",
        "properties": {
          "comment": {
            "description": "Free comment Case Insensitive",
            "type": "string",
            "maxLength": 80
          },
          "exec": {
            "description": "Name of the file that describes the end-of-transfer procedure Case Insensitive",
            "default": "DEST",
            "type": "string",
            "enum": [
              "DEST",
              "PART",
              "CHILDREN"
            ]
          },
          "execpre": {
            "description": "Preprocessing procedure submit mode type Case Insensitive",
            "default": "DEST",
            "type": "string",
            "enum": [
              "DEST",
              "PART",
              "CHILDREN"
            ]
          },
          "execa": {
            "description": "Acknowledgment procedure submit mode type Case Insensitive",
            "default": "DEST",
            "type": "string",
            "enum": [
              "DEST",
              "PART",
              "CHILDREN"
            ]
          },
          "fname": {
            "description": "The file in which the list of the identifiers of the various partners, each corresponding to one value of the ID parameter of a CFTPART command, is defined The z/OS, IBM i, and OpenVMS platforms are case insensitive; place the value between double quotes to ensure case sensitivity.",
            "type": "string",
            "maxLength": 512
          },
          "for": {
            "description": "Controls the use of the partner list Case Insensitive",
            "default": "BOTH",
            "type": "string",
            "enum": [
              "BOTH",
              "LOCAL",
              "COMMUT"
            ]
          },
          "nopart": {
            "description": "Action to perform when one of the partners is not defined Case Insensitive",
            "default": "ABORT",
            "type": "string",
            "enum": [
              "ABORT",
              "CONTINUE",
              "IGNORE"
            ]
          },
          "origin": {
            "$ref": "#/components/schemas/CftEnumORIGIN"
          },
          "part": {
            "description": "Explicit list of the various partners' identifiers Case Insensitive",
            "type": "array",
            "maxItems": 200,
            "items": {
              "type": "string",
              "maxLength": 64
            }
          }
        }
      },
      "CftObjectsCftidfListRecv": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "links": {
            "$ref": "#/components/schemas/ObjectSelfLinks"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CftObjectsCftidfGetRecvInfo"
            }
          }
        },
        "example": {
          "links": {
            "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftrecv/make_available/idf"
          },
          "data": [
            {
              "type": "cftidfrecv",
              "id": "PARIS",
              "attributes": {
                "nidf": "ALIAS_PARIS",
                "comment": "hen destination is PARIS overide the Identifier",
                "origin": "DESIGNER"
              },
              "links": {
                "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftrecv/make_available/idf/paris"
              }
            },
            {
              "type": "cftidfrecv",
              "id": "NEWYORK",
              "attributes": {
                "nidf": "ALIAS_NEWYORK",
                "comment": "hen destination is NEWYORK overide the Identifier",
                "origin": "DESIGNER"
              },
              "links": {
                "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftrecv/make_available/idf/NEWYORK"
              }
            }
          ]
        }
      },
      "CftObjectsCftidfGetRecv": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "links": {
            "$ref": "#/components/schemas/ObjectSelfLinks"
          },
          "data": {
            "$ref": "#/components/schemas/CftObjectsCftidfGetRecvInfo"
          }
        },
        "example": {
          "links": {
            "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftrecv/make_available/idf/paris"
          },
          "data": {
            "type": "cftidfrecv",
            "id": "paris",
            "attributes": {
              "nidf": "ALIAS_PARIS",
              "comment": "When destination is PARIS overide the Identifier",
              "origin": "DESIGNER"
            }
          }
        }
      },
      "CftObjectsCftidfGetRecvInfo": {
        "type": "object",
        "required": [
          "type",
          "id",
          "attributes"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "cftidfrecv"
            ]
          },
          "id": {
            "type": "string"
          },
          "attributes": {
            "$ref": "#/components/schemas/CftObjectsCftidfAttributes"
          },
          "links": {
            "$ref": "#/components/schemas/ObjectSelfLinks"
          }
        }
      },
      "CftObjectsCftrecvList": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "links": {
            "$ref": "#/components/schemas/ObjectSelfLinks"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CftObjectsCftrecvGetInfo"
            }
          }
        },
        "example": {
          "links": {
            "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftrecv"
          },
          "data": [
            {
              "type": "cftrecv",
              "id": "make_available",
              "attributes": {
                "frecfm": "F",
                "comment": "Create a fixed record format file; padding occurs",
                "origin": "DESIGNER"
              },
              "links": {
                "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftrecv/make_available"
              }
            },
            {
              "type": "cftrecv",
              "id": "make_available_var",
              "attributes": {
                "frecfm": "V",
                "comment": "Create a variable record format file; NO Padding occurs",
                "origin": "DESIGNER"
              },
              "links": {
                "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftrecv/make_available"
              }
            }
          ]
        }
      },
      "CftObjectsCftrecvGet": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "links": {
            "$ref": "#/components/schemas/ObjectSelfLinks"
          },
          "data": {
            "$ref": "#/components/schemas/CftObjectsCftrecvGetInfo"
          }
        },
        "example": {
          "links": {
            "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftrecv/make_available"
          },
          "data": {
            "type": "cftrecv",
            "id": "make_available",
            "attributes": {
              "frecfm": "F",
              "comment": "Create a fixed-record-format file; padding occurs",
              "origin": "DESIGNER"
            }
          }
        }
      },
      "CftObjectsCftrecvGetInfo": {
        "type": "object",
        "required": [
          "type",
          "id",
          "attributes"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "cftrecv"
            ]
          },
          "id": {
            "type": "string"
          },
          "attributes": {
            "$ref": "#/components/schemas/CftObjectsCftrecvAttributes"
          },
          "links": {
            "$ref": "#/components/schemas/ObjectSelfLinks"
          }
        }
      },
      "CftObjectsCftrecvAttributes": {
        "type": "object",
        "properties": {
          "cycdate": {
            "description": "Upper final date for activating the first transfer of a cycle",
            "type": "integer",
            "minimum": 0,
            "maximum": 99991231,
            "default": 0
          },
          "cyctime": {
            "description": "Cyclic transfer time",
            "type": "integer",
            "minimum": 0,
            "maximum": 23595999,
            "default": 0
          },
          "maxdate": {
            "description": "Final date for transfer validity",
            "type": "integer",
            "minimum": 0,
            "maximum": 99991231,
            "default": 99991231
          },
          "maxtime": {
            "description": "Transfer validity time limit on the final date Format must be HH:MM:SS",
            "type": "string"
          },
          "mindate": {
            "description": "Minimum transfer validity date",
            "type": "integer",
            "minimum": 0,
            "maximum": 99991231,
            "default": 10000101
          },
          "mintime": {
            "description": "Initial validity time for the transfer on the first day Format must be HH:MM:SS",
            "type": "string"
          },
          "maxduration": {
            "description": "The file transfer timeout",
            "type": "integer",
            "minimum": 0,
            "maximum": 32767,
            "default": 0
          },
          "attsuser": {
            "description": "Additional information specifically related to the <strong>fname</strong> parameter.\nValid only if the Transfer CFT is on a z/OS system or a HP NonStop system using Native files.",
            "type": "string",
            "maxLength": 512
          },
          "idf": {
            "description": "List of cftidfrecv definitions associated with the transfer model.",
            "readOnly": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CftObjectsCftidfAttributes"
            }
          },
          "ackmindate": {
            "description": "Acknowledgment exec file can be launched from this date",
            "type": "integer",
            "minimum": 0,
            "maximum": 99991231,
            "default": 10000101
          },
          "ackmintime": {
            "description": "Acknowledgment exec file can be launched from this time",
            "type": "integer",
            "minimum": 0,
            "maximum": 23595999,
            "default": 0
          },
          "postmindate": {
            "description": "Post-processing exec file can be launched from this date",
            "type": "integer",
            "minimum": 0,
            "maximum": 99991231,
            "default": 10000101
          },
          "postmintime": {
            "description": "Post-processing exec file can be launched from this time",
            "type": "integer",
            "minimum": 0,
            "maximum": 23595999,
            "default": 0
          },
          "ackexec": {
            "description": "File describing the procedure to be executed when receiving an acknowledgment reply for the transfer The z/OS, IBM i, and OpenVMS platforms are case insensitive; place the value between double quotes to ensure case sensitivity.",
            "type": "string",
            "maxLength": 512
          },
          "ackstate": {
            "description": "Wait for ACK/NACK to enter the X phase Case Insensitive",
            "default": "IGNORE",
            "type": "string",
            "enum": [
              "REQUIRE",
              "IGNORE"
            ]
          },
          "acktimeout": {
            "description": "Timeout before switching phase step to K if no END is received",
            "type": "integer",
            "minimum": 0,
            "maximum": 3600,
            "default": 0
          },
          "comment": {
            "description": "Free comment",
            "type": "string",
            "maxLength": 160
          },
          "cos": {
            "description": "Class Of Service for bandwidth control",
            "type": "string",
            "maxLength": 32
          },
          "delete": {
            "description": "Automatic deletion of the catalog entries in the \"T\" state (terminated) for the corresponding IDF Case Insensitive",
            "default": "NO",
            "type": "string",
            "enum": [
              "YES",
              "NO"
            ]
          },
          "duplicat": {
            "description": "Automatic detection of the duplicate transfers Case Insensitive",
            "type": "string",
            "maxLength": 512
          },
          "dirnb": {
            "description": "Number of directory blocks used to create a directory",
            "type": "integer",
            "minimum": 0,
            "maximum": 4294967295,
            "default": 0
          },
          "exec": {
            "description": "Name of the file that describes the end-of-transfer procedure The z/OS, IBM i, and OpenVMS platforms are case insensitive; place the value between double quotes to ensure case sensitivity.",
            "type": "string",
            "maxLength": 512
          },
          "execrall": {
            "description": "Submission policy of the post-processing procedure to launch, when receiving in mode FILE=ALL Case Insensitive",
            "default": "ALL",
            "type": "string",
            "enum": [
              "ALL",
              "PARENT",
              "CHILDREN"
            ]
          },
          "exece": {
            "description": "Name of the file to execute when an error leads to the K PHASESTEP The z/OS, IBM i, and OpenVMS platforms are case insensitive; place the value between double quotes to ensure case sensitivity.",
            "type": "string",
            "maxLength": 512
          },
          "exit": {
            "description": "Identifier of the CFTEXIT command associated with this transfer Case Insensitive",
            "type": "string",
            "maxLength": 32
          },
          "facc": {
            "description": "File access method.\nCase insensitive.\nThe values <strong>VSH0</strong> are only valid if the Transfer CFT is on a <strong>z/OS</strong> platform.",
            "default": " ",
            "type": "string",
            "enum": [
              " ",
              "V",
              "S",
              "H",
              "0"
            ]
          },
          "faction": {
            "description": "Action on the file prior to a receive transfer except when using RENAME or RETRYRENAME, which are post transfer actions.\nThe <strong>RENAME</strong> action is only valid on Unix platforms and on HP NonStop if used in an OSS environment.",
            "default": " ",
            "type": "string",
            "enum": [
              "RENAME",
              "ERASE",
              "DELETE",
              "VERIFY",
              "CONCAT",
              "RETRYRENAME",
              " "
            ]
          },
          "fblksize": {
            "description": "Block size, in bytes, of the file to be created",
            "type": "integer",
            "minimum": 0,
            "maximum": 62536,
            "default": 0
          },
          "fcheck": {
            "description": "Reject incoming transfer if local file attributes don't match the virtual file attributes' Case Insensitive",
            "default": "NO",
            "type": "string",
            "enum": [
              "YES",
              "NO"
            ]
          },
          "fcharset": {
            "description": "Local file encoding",
            "type": "string",
            "maxLength": 32
          },
          "fcode": {
            "description": "Local file data code Case Insensitive",
            "default": " ",
            "type": "string",
            "enum": [
              "ASCII",
              "EBCDIC",
              "BINARY",
              " "
            ]
          },
          "fcomp": {
            "description": "Compression of the data in the receiver logical file",
            "type": "integer",
            "minimum": 0,
            "maximum": 16,
            "default": 16
          },
          "fdb": {
            "description": "Name of the VFM base containing the logical file",
            "type": "string",
            "maxLength": 64
          },
          "fdelete": {
            "description": "Enable file deletion based on the transfer state Case Insensitive",
            "type": "string",
            "maxLength": 6
          },
          "fdisp": {
            "description": "File sharing option Case Insensitive",
            "default": "BOTH",
            "type": "string",
            "enum": [
              "OLD",
              "NEW",
              "BOTH"
            ]
          },
          "filenotfound": {
            "description": "Manages the desired behavior if a file is not found when performing a transfer Case Insensitive",
            "default": "ABORT",
            "type": "string",
            "enum": [
              "ABORT",
              "IGNORE"
            ]
          },
          "fkeylen": {
            "description": "Key length (in bytes) of an indexed file",
            "type": "integer",
            "minimum": 0,
            "maximum": 32767,
            "default": 0
          },
          "fkeypos": {
            "description": "Key position (in bytes), realtive to 0, in the records of an indexed file",
            "type": "integer",
            "minimum": 0,
            "maximum": 32767,
            "default": 0
          },
          "flowname": {
            "description": "The local flow descriptor Case Insensitive, except if value in delimited by double quotes",
            "type": "string",
            "maxLength": 100
          },
          "flrecl": {
            "description": "Length of the record",
            "type": "integer",
            "minimum": 0,
            "maximum": 32767,
            "default": 0
          },
          "fname": {
            "description": "Name of the physical receiver file, filename or complete path name, of the directory",
            "type": "string",
            "maxLength": 512
          },
          "force": {
            "description": "Priority with which the parameters set in CFTRECV are taken into account relative to the parameters set in an associated RECV command Case Insensitive",
            "default": "NO",
            "type": "string",
            "enum": [
              "YES",
              "NO"
            ]
          },
          "forg": {
            "description": "Organization of the file to be transferred.\nThe partitioned organization (PART) is only supported on z/OS systems.",
            "default": " ",
            "type": "string",
            "enum": [
              " ",
              "SEQ",
              "INDEXED",
              "DIRECT",
              "PART"
            ]
          },
          "fpad": {
            "description": "Padding character at the file level",
            "type": "string",
            "maxLength": 16
          },
          "frecfm": {
            "description": "Record format of the receiver file Case Insensitive",
            "default": "",
            "type": "string",
            "enum": [
              "F",
              "U",
              "V",
              ""
            ]
          },
          "fspace": {
            "description": "Size of the local file, in Kbytes",
            "type": "integer",
            "minimum": 0,
            "maximum": 9999999999,
            "default": 0
          },
          "ftype": {
            "description": "File type, which is platform dependent.\nWindows : \"BVTOXFJ\"\nOS400   : \" DESZJ\"\nUNIX    : \" BVTOXJ\"\nTANDEM  : \" BVTOXJEN\"\nz/OS    : \" ABMST_1J\"\nCase insensitive.",
            "default": " ",
            "type": "string",
            "enum": [
              "B",
              "V",
              "T",
              "O",
              "X",
              "F",
              "J",
              " ",
              "A",
              "M",
              "S",
              "_",
              "1"
            ]
          },
          "groupid": {
            "description": "Information completing the USERID of the CFTRECV command The z/OS, IBM i, and OpenVMS platforms are case insensitive; place the value between double quotes to ensure case sensitivity.",
            "type": "string",
            "maxLength": 32
          },
          "maction": {
            "description": "Action on the files transferred by COPY at the time of creation Case Insensitive",
            "default": " ",
            "type": "string",
            "enum": [
              "REPLACE",
              " "
            ]
          },
          "ncharset": {
            "description": "Destination file encoding",
            "type": "string",
            "maxLength": 32
          },
          "ncode": {
            "description": "Network file data code Case Insensitive",
            "default": " ",
            "type": "string",
            "enum": [
              "ASCII",
              "EBCDIC",
              "BINARY",
              " "
            ]
          },
          "ncomp": {
            "description": "Transmission compression level",
            "type": "integer",
            "minimum": 0,
            "maximum": 31,
            "default": 15
          },
          "netband": {
            "description": "Outgoing port range",
            "type": "integer",
            "minimum": 1,
            "maximum": 16,
            "default": 1
          },
          "notify": {
            "description": "Defines the destination of the messages associated with the send transfer selected from the log file messages, by the value of the OPERMSG parameter The z/OS, IBM i, and OpenVMS platforms are case insensitive; place the value between double quotes to ensure case sensitivity.",
            "type": "string",
            "maxLength": 8
          },
          "opermsg": {
            "description": "Categories of transfer information messages intended for the operator, with all the messages also being written in the log file",
            "type": "integer",
            "minimum": 0,
            "maximum": 255,
            "default": 0
          },
          "origin": {
            "$ref": "#/components/schemas/CftEnumORIGIN"
          },
          "poststate": {
            "description": "The transfer phase step as it enters the Y phase Case Insensitive",
            "default": "DISP",
            "type": "string",
            "enum": [
              "DISP"
            ]
          },
          "posttimeout": {
            "description": "Timeout before changing the phase step to K if no END is received during post-processing",
            "type": "integer",
            "minimum": 0,
            "maximum": 3600,
            "default": 0
          },
          "pri": {
            "description": "Priority of scheduled transfers",
            "type": "integer",
            "minimum": 0,
            "maximum": 255,
            "default": 128
          },
          "rappl": {
            "description": "Identifier of the file receiver application Case Insensitive, except if value in delimited by double quotes",
            "type": "string",
            "maxLength": 48
          },
          "rkerror": {
            "description": "Action to be taken if a transfer aborts during the selection phase in server mode Case Insensitive",
            "default": "",
            "type": "string",
            "enum": [
              "KEEP",
              "DELETE",
              ""
            ]
          },
          "rpasswd": {
            "description": "Password for the user who is receiving the file",
            "type": "string",
            "maxLength": 32
          },
          "ruser": {
            "description": "Identifier for the user who is receiving the file Case Insensitive, except if value in delimited by double quotes",
            "type": "string",
            "maxLength": 32
          },
          "sappl": {
            "description": "Identifier of the file sender application Case Insensitive, except if value in delimited by double quotes",
            "type": "string",
            "maxLength": 48
          },
          "sourceappl": {
            "description": "Identifier of the file sender application Case Insensitive, except if value in delimited by double quotes",
            "type": "string",
            "maxLength": 100
          },
          "serial": {
            "description": "Parameter to enable file transfer serialization in flow definitions Case Insensitive",
            "default": " ",
            "type": "string",
            "enum": [
              "Y",
              "X",
              " "
            ]
          },
          "spasswd": {
            "description": "Password for the user who is sending the file",
            "type": "string",
            "maxLength": 32
          },
          "suser": {
            "description": "Identifier for the user who is sending the file Case Insensitive, except if value in delimited by double quotes",
            "type": "string",
            "maxLength": 32
          },
          "state": {
            "description": "Transfer request state Case Insensitive",
            "default": "DISP",
            "type": "string",
            "enum": [
              "DISP",
              "HOLD",
              "KEEP"
            ]
          },
          "storageaccount": {
            "description": "Storage account Case Insensitive",
            "type": "string",
            "maxLength": 32
          },
          "targetappl": {
            "description": "Identifier of the local file receiver application Case Insensitive, except if value in delimited by double quotes",
            "type": "string",
            "maxLength": 100
          },
          "trk": {
            "description": "Details provided to Sentinel about transfers Case Insensitive",
            "default": "UNDEFINED",
            "type": "string",
            "enum": [
              "UNDEFINED",
              "ALL",
              "SUMMARY",
              "NO",
              "ERROR"
            ]
          },
          "userid": {
            "description": "Identifier of the transfer owner The z/OS, IBM i, and OpenVMS platforms are case insensitive; place the value between double quotes to ensure case sensitivity.",
            "type": "string",
            "maxLength": 32
          },
          "wfname": {
            "description": "Name of the temporary file used to send a group of files selected in line with the generic name specified in FNAME",
            "type": "string",
            "maxLength": 512
          },
          "workingdir": {
            "description": "Working directory",
            "type": "string",
            "maxLength": 512
          },
          "xlate": {
            "description": "Identifier of the CFTXLATE object defining the translation table used for the transfers Case Insensitive",
            "type": "string",
            "maxLength": 32
          }
        }
      },
      "CftObjectsCftsendListYes": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "links": {
            "$ref": "#/components/schemas/ObjectSelfLinks"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CftObjectsCftsendGetYesInfo"
            }
          }
        },
        "example": {
          "links": {
            "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftsend/implyes"
          },
          "data": [
            {
              "type": "cftsendyes",
              "id": "make_available",
              "attributes": {
                "fcode": "BINARY",
                "frecfm": "F",
                "faction": "NONE",
                "STATE": "DISP",
                "comment": "Make a file available when using Transfer CFT in server mode",
                "origin": "DESIGNER"
              },
              "links": {
                "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftsend/implyes/make_available"
              }
            },
            {
              "type": "cftsendyes",
              "id": "make_available_var",
              "attributes": {
                "fcode": "BINARY",
                "frecfm": "V",
                "faction": "NONE",
                "STATE": "DISP",
                "comment": "Make a file available when using Transfer CFT in server mode",
                "origin": "DESIGNER"
              },
              "links": {
                "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftsend/implyes/make_available_var"
              }
            }
          ]
        }
      },
      "CftObjectsCftsendGetYes": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "links": {
            "$ref": "#/components/schemas/ObjectSelfLinks"
          },
          "data": {
            "$ref": "#/components/schemas/CftObjectsCftsendGetYesInfo"
          }
        },
        "example": {
          "links": {
            "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftsend/implyes/make_available"
          },
          "data": {
            "type": "cftsendyes",
            "id": "make_available",
            "attributes": {
              "fcode": "BINARY",
              "frecfm": "F",
              "faction": "NONE",
              "STATE": "DISP",
              "comment": "Make a file available when using Transfer CFT in server mode",
              "origin": "DESIGNER"
            }
          }
        }
      },
      "CftObjectsCftsendGetYesInfo": {
        "type": "object",
        "required": [
          "type",
          "id",
          "attributes"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "cftsendyes"
            ]
          },
          "id": {
            "type": "string"
          },
          "attributes": {
            "$ref": "#/components/schemas/CftObjectsCftsendAttributes"
          },
          "links": {
            "$ref": "#/components/schemas/ObjectSelfLinks"
          }
        }
      },
      "CftObjectsCftidfListSend": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "links": {
            "$ref": "#/components/schemas/ObjectSelfLinks"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CftObjectsCftidfGetSendInfo"
            }
          }
        },
        "example": {
          "links": {
            "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftsend/implno/sendanddelete/idf"
          },
          "data": [
            {
              "type": "cftidfsend",
              "id": "PARIS",
              "attributes": {
                "nidf": "ALIAS_PARIS",
                "comment": "hen destination is PARIS overide the Identifier",
                "origin": "DESIGNER"
              },
              "links": {
                "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftsend/implno/sendanddelete/idf/paris"
              }
            },
            {
              "type": "cftidfsend",
              "id": "NEWYORK",
              "attributes": {
                "nidf": "ALIAS_NEWYORK",
                "comment": "hen destination is NEWYORK overide the Identifier",
                "origin": "DESIGNER"
              },
              "links": {
                "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftsend/implno/sendanddelete/idf/NEWYORK"
              }
            }
          ]
        }
      },
      "CftObjectsCftidfGetSend": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "links": {
            "$ref": "#/components/schemas/ObjectSelfLinks"
          },
          "data": {
            "$ref": "#/components/schemas/CftObjectsCftidfGetSendInfo"
          }
        },
        "example": {
          "links": {
            "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftsend/implno/cftidfsend/idf/paris"
          },
          "data": {
            "type": "cftidfsend",
            "id": "paris",
            "attributes": {
              "nidf": "ALIAS_PARIS",
              "comment": "When destination is PARIS overide the Identifier",
              "origin": "DESIGNER"
            }
          }
        }
      },
      "CftObjectsCftidfGetSendInfo": {
        "type": "object",
        "required": [
          "type",
          "id",
          "attributes"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "cftidfsend"
            ]
          },
          "id": {
            "type": "string"
          },
          "attributes": {
            "$ref": "#/components/schemas/CftObjectsCftidfAttributes"
          },
          "links": {
            "$ref": "#/components/schemas/ObjectSelfLinks"
          }
        }
      },
      "CftObjectsCftidfAttributes": {
        "type": "object",
        "required": [
          "nidf"
        ],
        "properties": {
          "comment": {
            "description": "Free comment Case Insensitive",
            "type": "string",
            "maxLength": 80
          },
          "nidf": {
            "description": "File network identifier Case Insensitive",
            "type": "string",
            "maxLength": 32
          },
          "origin": {
            "$ref": "#/components/schemas/CftEnumORIGIN"
          }
        }
      },
      "CftObjectsCftsendListNo": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "links": {
            "$ref": "#/components/schemas/ObjectSelfLinks"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CftObjectsCftsendGetNoInfo"
            }
          }
        },
        "example": {
          "links": {
            "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftsend/implno"
          },
          "data": [
            {
              "type": "cftsendno",
              "id": "sendanddelete",
              "attributes": {
                "delete": "YES",
                "comment": "Send the file and delete the catalog record after completion",
                "origin": "DESIGNER"
              },
              "links": {
                "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftsend/implno/sendanddelete"
              }
            },
            {
              "type": "cftsendno",
              "id": "sendandkeep",
              "attributes": {
                "delete": "NO",
                "comment": "Send the file and keep the catalog record after completion",
                "origin": "DESIGNER"
              },
              "links": {
                "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftsend/implno/sendandkeep"
              }
            }
          ]
        }
      },
      "CftObjectsCftsendGetNo": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "links": {
            "$ref": "#/components/schemas/ObjectSelfLinks"
          },
          "data": {
            "$ref": "#/components/schemas/CftObjectsCftsendGetNoInfo"
          }
        },
        "example": {
          "links": {
            "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftsend/implno/sendanddelete"
          },
          "data": {
            "type": "cftsendno",
            "id": "sendanddelete",
            "attributes": {
              "delete": "YES",
              "comment": "Send the file and delete the catalog record after completion",
              "origin": "DESIGNER"
            }
          }
        }
      },
      "CftObjectsCftsendGetNoInfo": {
        "type": "object",
        "required": [
          "type",
          "id",
          "attributes"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "cftsendno"
            ]
          },
          "id": {
            "type": "string"
          },
          "attributes": {
            "$ref": "#/components/schemas/CftObjectsCftsendAttributes"
          },
          "links": {
            "$ref": "#/components/schemas/ObjectSelfLinks"
          }
        }
      },
      "CftObjectsCftsendAttributes": {
        "type": "object",
        "properties": {
          "cycdate": {
            "description": "Upper final date for activating the first transfer of a cycle",
            "type": "integer",
            "minimum": 0,
            "maximum": 99991231,
            "default": 0
          },
          "cyctime": {
            "description": "Cyclic transfer time",
            "type": "integer",
            "minimum": 0,
            "maximum": 23595999,
            "default": 0
          },
          "maxdate": {
            "description": "Final date for transfer validity",
            "type": "integer",
            "minimum": 0,
            "maximum": 99991231,
            "default": 99991231
          },
          "maxtime": {
            "description": "Transfer validity time limit on the final date Format must be HH:MM:SS",
            "type": "string"
          },
          "mindate": {
            "description": "Minimum transfer validity date",
            "type": "integer",
            "minimum": 0,
            "maximum": 99991231,
            "default": 10000101
          },
          "mintime": {
            "description": "Initial validity time for the transfer on the first day Format must be HH:MM:SS",
            "type": "string"
          },
          "maxduration": {
            "description": "The file transfer timeout",
            "type": "integer",
            "minimum": 0,
            "maximum": 32767,
            "default": 0
          },
          "idf": {
            "description": "List of cftidfsend definitions associated with the transfer model.",
            "readOnly": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CftObjectsCftidfAttributes"
            }
          },
          "ackmindate": {
            "description": "Acknowledgment exec file can be launched from this date",
            "type": "integer",
            "minimum": 0,
            "maximum": 99991231,
            "default": 10000101
          },
          "ackmintime": {
            "description": "Acknowledgment exec file can be launched from this time",
            "type": "integer",
            "minimum": 0,
            "maximum": 23595999,
            "default": 0
          },
          "postmindate": {
            "description": "Post-processing exec file can be launched from this date",
            "type": "integer",
            "minimum": 0,
            "maximum": 99991231,
            "default": 10000101
          },
          "postmintime": {
            "description": "Post-processing exec file can be launched from this time",
            "type": "integer",
            "minimum": 0,
            "maximum": 23595999,
            "default": 0
          },
          "preexec": {
            "description": "The preprocessing exec file The z/OS, IBM i, and OpenVMS platforms are case insensitive; place the value between double quotes to ensure case sensitivity.",
            "type": "string",
            "maxLength": 512
          },
          "prestate": {
            "description": "The transfer phase step as it enters the A phase Case Insensitive",
            "default": " ",
            "type": "string",
            "enum": [
              " ",
              "DISP",
              "HOLD"
            ]
          },
          "pretimeout": {
            "description": "Timeout before switching phase step to K if no END is received during preprocessing",
            "type": "integer",
            "minimum": 0,
            "maximum": 3600,
            "default": 0
          },
          "premindate": {
            "description": "Execute the preprocessing file as of this date",
            "type": "integer",
            "minimum": 0,
            "maximum": 99991231,
            "default": 10000101
          },
          "premintime": {
            "description": "Execute the preprocessing file as of this time",
            "type": "integer",
            "minimum": 0,
            "maximum": 23595999,
            "default": 0
          },
          "ackexec": {
            "description": "Name of the file describing the procedure to be executed when receiving an acknowledgment reply for the transfer The z/OS, IBM i, and OpenVMS platforms are case insensitive; place the value between double quotes to ensure case sensitivity.",
            "type": "string",
            "maxLength": 512
          },
          "ackstate": {
            "description": "Wait for ACK/NACK to enter the X phase Case Insensitive",
            "default": "IGNORE",
            "type": "string",
            "enum": [
              "REQUIRE",
              "IGNORE"
            ]
          },
          "acktimeout": {
            "description": "Timeout before switching phase step to K if no END is received",
            "type": "integer",
            "minimum": 0,
            "maximum": 3600,
            "default": 0
          },
          "comment": {
            "description": "Free comment",
            "type": "string",
            "maxLength": 160
          },
          "cos": {
            "description": "Class Of Service for bandwidth control",
            "type": "string",
            "maxLength": 32
          },
          "cycle": {
            "description": "Number of units defining the transfer cycle period",
            "type": "integer",
            "minimum": 0,
            "maximum": 32767,
            "default": 0
          },
          "delete": {
            "description": "Automatic deletion of catalog entries in the \"T\" state (terminated) for the corresponding IDF Case Insensitive",
            "default": "NO",
            "type": "string",
            "enum": [
              "YES",
              "NO"
            ]
          },
          "duplicat": {
            "description": "Automatic detection of duplicate transfers Case Insensitive",
            "type": "string",
            "maxLength": 512
          },
          "exec": {
            "description": "File that describes the end-of-transfer procedure The z/OS, IBM i, and OpenVMS platforms are case insensitive; place the value between double quotes to ensure case sensitivity.",
            "type": "string",
            "maxLength": 512
          },
          "exece": {
            "description": "File to execute when an error leads to the K PHASESTEP The z/OS, IBM i, and OpenVMS platforms are case insensitive; place the value between double quotes to ensure case sensitivity.",
            "type": "string",
            "maxLength": 512
          },
          "execsub": {
            "description": "Submission policy of the end-of-transfer procedure to launch when sending a group of files Case Insensitive",
            "default": "LIST",
            "type": "string",
            "enum": [
              "LIST",
              "FILE",
              "SUBF"
            ]
          },
          "execsuba": {
            "description": "Submission policy of the procedure to launch receiving acknowledgment when sending a group of files Case Insensitive",
            "default": "SUBF",
            "type": "string",
            "enum": [
              "LIST",
              "FILE",
              "SUBF"
            ]
          },
          "execsubpre": {
            "description": "Submission policy of the preprocessing procedure when sending a group of files Case Insensitive",
            "default": "LIST",
            "type": "string",
            "enum": [
              "LIST",
              "FILE",
              "SUBF"
            ]
          },
          "exit": {
            "description": "Identifier of the CFTEXIT command associated with this transfer Case Insensitive",
            "type": "string",
            "maxLength": 32
          },
          "facc": {
            "description": "File access method.\nCase insensitive.\nThe values <strong>VSH0</strong> are only valid if the Transfer CFT is on a <strong>z/OS</strong> platform.",
            "default": " ",
            "type": "string",
            "enum": [
              " ",
              "V",
              "S",
              "H",
              "0"
            ]
          },
          "faction": {
            "description": "Action on the file after a send transfer.\nThe <strong>ARCHIVE</strong> is not valid for the following operations:\n- Send in server mode\n- Homogeneous group of files\n- Broadcasting\nOS-specific limitations:\n- z/OS: VSAM, PDS, and GDG files are not supported\n- HP NonStop: ARCHIVE is not supported with Guardian files.",
            "default": "NONE",
            "type": "string",
            "enum": [
              "ERASE",
              "DELETE",
              "NONE",
              "ROTATE",
              "ARCHIVE"
            ]
          },
          "fblksize": {
            "description": "Block size, in bytes, of the file to be created",
            "type": "integer",
            "minimum": 0,
            "maximum": 65535,
            "default": 0
          },
          "fcharset": {
            "description": "Local file encoding",
            "type": "string",
            "maxLength": 32
          },
          "fcode": {
            "description": "Local file data code Case Insensitive",
            "default": " ",
            "type": "string",
            "enum": [
              "ASCII",
              "EBCDIC",
              "BINARY",
              " "
            ]
          },
          "fdb": {
            "description": "Name of the VFM base containing the logical file",
            "type": "string",
            "maxLength": 64
          },
          "fdelete": {
            "description": "Enable file deletion based on the transfer state Case Insensitive",
            "type": "string",
            "maxLength": 6
          },
          "fdisp": {
            "description": "File sharing option Case Insensitive",
            "default": "SHR",
            "type": "string",
            "enum": [
              "OLD",
              "SHR",
              "CHECK"
            ]
          },
          "filenotfound": {
            "description": "Manages the desired behavior if a file is not found when performing a transfer Case Insensitive",
            "default": "ABORT",
            "type": "string",
            "enum": [
              "ABORT",
              "IGNORE"
            ]
          },
          "filtertype": {
            "description": "Pattern matching algorithm to use for file name filtering Case Insensitive",
            "default": "STRJCMP",
            "type": "string",
            "enum": [
              "STRJCMP",
              "EREGEX"
            ]
          },
          "filter": {
            "description": "Filter REGEX pattern to use for file name filtering",
            "type": "string",
            "maxLength": 256
          },
          "fkeylen": {
            "description": "Key length, in bytes, of an indexed file",
            "type": "integer",
            "minimum": 0,
            "maximum": 32767,
            "default": 0
          },
          "fkeypos": {
            "description": "Key position, in bytes, relative to 0 in the records of an indexed file",
            "type": "integer",
            "minimum": 0,
            "maximum": 32767,
            "default": 0
          },
          "flowname": {
            "description": "Local flow descriptor Case Insensitive, except if value in delimited by double quotes",
            "type": "string",
            "maxLength": 100
          },
          "flrecl": {
            "description": "Length of the record",
            "type": "integer",
            "minimum": 0,
            "maximum": 32767,
            "default": 0
          },
          "fname": {
            "description": "Local file, directory, indirection file, selection mask, or selection directory to be sent",
            "type": "string",
            "maxLength": 512
          },
          "force": {
            "description": "Priority with which the parameters set in CFTSEND are taken into account relative to the parameters set in an associated RECV command Case Insensitive",
            "default": "NO",
            "type": "string",
            "enum": [
              "YES",
              "NO"
            ]
          },
          "forg": {
            "description": "Organization of the file to be transferred.\nThe partitioned organization (PART) is only supported on z/OS systems.",
            "default": " ",
            "type": "string",
            "enum": [
              " ",
              "SEQ",
              "INDEXED",
              "DIRECT",
              "PART"
            ]
          },
          "fpad": {
            "description": "Padding character at the file level",
            "type": "string",
            "maxLength": 16
          },
          "frecfm": {
            "description": "Record format of the receiver file Case Insensitive",
            "default": " ",
            "type": "string",
            "enum": [
              "F",
              "V",
              "U",
              " "
            ]
          },
          "fspace": {
            "description": "Size of the local file, in Kbytes",
            "type": "integer",
            "minimum": 0,
            "maximum": 9999999999,
            "default": 0
          },
          "ftype": {
            "description": "File type, which is platform dependent.\nWindows : \"BVTOXFJ\"\nOS400   : \" DESZJ\"\nUNIX    : \" BVTOXJ\"\nTANDEM  : \" BVTOXJEN\"\nz/OS    : \" ABMST_1J\"\nCase insensitive.",
            "default": " ",
            "type": "string",
            "enum": [
              "B",
              "V",
              "T",
              "O",
              "X",
              "F",
              "J",
              " ",
              "A",
              "M",
              "S",
              "_",
              "1"
            ]
          },
          "groupid": {
            "description": "Information completing the USERID of the CFTSEND command The z/OS, IBM i, and OpenVMS platforms are case insensitive; place the value between double quotes to ensure case sensitivity.",
            "type": "string",
            "maxLength": 32
          },
          "ida": {
            "description": "Local transfer identifier assigned by the user or user application Case Insensitive, except if value in delimited by double quotes",
            "type": "string",
            "maxLength": 64
          },
          "nblksize": {
            "description": "File block size in protocol terms",
            "type": "integer",
            "minimum": 0,
            "maximum": 65535,
            "default": 0
          },
          "ncharset": {
            "description": "Destination file encoding",
            "type": "string",
            "maxLength": 32
          },
          "ncode": {
            "description": "Network file data code Case Insensitive",
            "default": " ",
            "type": "string",
            "enum": [
              "ASCII",
              "EBCDIC",
              "BINARY",
              " "
            ]
          },
          "ncomp": {
            "description": "Transmission compression level",
            "type": "integer",
            "minimum": 0,
            "maximum": 31,
            "default": 15
          },
          "netband": {
            "description": "Outgoing port range",
            "type": "integer",
            "minimum": 1,
            "maximum": 16,
            "default": 1
          },
          "nfname": {
            "description": "Name of the physical file at the receiver partner site",
            "type": "string",
            "maxLength": 512
          },
          "nkeylen": {
            "description": "Length, in bytes, of the indexed file's key",
            "type": "integer",
            "minimum": 0,
            "maximum": 32767,
            "default": 0
          },
          "nkeypos": {
            "description": "Location, in bytes, of the key in the records of an indexed file",
            "type": "integer",
            "minimum": 0,
            "maximum": 32767,
            "default": 0
          },
          "nlrecl": {
            "description": "Length of the record of the receiver file",
            "type": "integer",
            "minimum": 0,
            "maximum": 32767,
            "default": 0
          },
          "notify": {
            "description": "Defines the destination of the messages associated with the send transfer selected from the log file messages, by the value of the OPERMSG parameter The z/OS, IBM i, and OpenVMS platforms are case insensitive; place the value between double quotes to ensure case sensitivity.",
            "type": "string",
            "maxLength": 8
          },
          "npad": {
            "description": "Padding character at the network level",
            "type": "string",
            "maxLength": 16
          },
          "nrecfm": {
            "description": "File record format defined in protocol terms Case Insensitive",
            "default": " ",
            "type": "string",
            "enum": [
              "F",
              "V",
              "U",
              " "
            ]
          },
          "nspace": {
            "description": "File size, in protocol terms, expressed as a number of blocks of 1 K bytes",
            "type": "integer",
            "minimum": 0,
            "maximum": 9999999999,
            "default": 0
          },
          "ntype": {
            "description": "File type, in protocol terms Case Insensitive",
            "type": "string",
            "maxLength": 0
          },
          "opermsg": {
            "description": "Categories of transfer information messages intended for the operator, with all the messages also being written in the log file",
            "type": "integer",
            "minimum": 0,
            "maximum": 255,
            "default": 0
          },
          "origin": {
            "$ref": "#/components/schemas/CftEnumORIGIN"
          },
          "parm": {
            "description": "User parameter sent to the receiver",
            "type": "string",
            "maxLength": 512
          },
          "poststate": {
            "description": "The transfer phase step as it enters the Y phase Case Insensitive",
            "default": "DISP",
            "type": "string",
            "enum": [
              "DISP"
            ]
          },
          "posttimeout": {
            "description": "Timeout before changing the phase step to K if no END is received during post-processing",
            "type": "integer",
            "minimum": 0,
            "maximum": 3600,
            "default": 0
          },
          "pri": {
            "description": "Priority of scheduled transfers",
            "type": "integer",
            "minimum": 0,
            "maximum": 255,
            "default": 128
          },
          "rappl": {
            "description": "Identifier of the file receiver application Case Insensitive, except if value in delimited by double quotes",
            "type": "string",
            "maxLength": 48
          },
          "rpasswd": {
            "description": "Password for the user who is receiving the file",
            "type": "string",
            "maxLength": 32
          },
          "ruser": {
            "description": "Identifier for the user who is receiving the file Case Insensitive, except if value in delimited by double quotes",
            "type": "string",
            "maxLength": 32
          },
          "sappl": {
            "description": "Identifier of the file sender application Case Insensitive, except if value in delimited by double quotes",
            "type": "string",
            "maxLength": 48
          },
          "selfname": {
            "description": "Name of a file that contains a list of files selected for sending",
            "type": "string",
            "maxLength": 512
          },
          "sigfname": {
            "description": "Name of the signature file Case Insensitive",
            "type": "string",
            "maxLength": 512
          },
          "serial": {
            "description": "Parameter to enable file transfer serialization in flow definitions Case Insensitive",
            "default": " ",
            "type": "string",
            "enum": [
              "Y",
              "X",
              " "
            ]
          },
          "sourceappl": {
            "description": "Identifier of the file sender application Case Insensitive, except if value in delimited by double quotes",
            "type": "string",
            "maxLength": 100
          },
          "spart": {
            "description": "Network designation by which the local Transfer CFT identifies itself to its partner Case Insensitive",
            "type": "string",
            "maxLength": 64
          },
          "spasswd": {
            "description": "Password for the user who is sending the file",
            "type": "string",
            "maxLength": 32
          },
          "state": {
            "description": "Transfer request state Case Insensitive",
            "default": "DISP",
            "type": "string",
            "enum": [
              "DISP",
              "HOLD",
              "KEEP"
            ]
          },
          "storageaccount": {
            "description": "Storage account Case Insensitive",
            "type": "string",
            "maxLength": 32
          },
          "suser": {
            "description": "Identifier for the user who is sending the file Case Insensitive, except if value in delimited by double quotes",
            "type": "string",
            "maxLength": 32
          },
          "targetappl": {
            "description": "Identifier of the local file receiver application Case Insensitive, except if value in delimited by double quotes",
            "type": "string",
            "maxLength": 100
          },
          "tcycle": {
            "description": "Transfer cycle period unit Case Insensitive",
            "default": "DAY",
            "type": "string",
            "enum": [
              "MIN",
              "DAY",
              "MONTH"
            ]
          },
          "trk": {
            "description": "Details provided to Sentinel about transfers Case Insensitive",
            "default": "UNDEFINED",
            "type": "string",
            "enum": [
              "UNDEFINED",
              "ALL",
              "SUMMARY",
              "NO",
              "ERROR"
            ]
          },
          "userid": {
            "description": "Identifier of the transfer owner The z/OS, IBM i, and OpenVMS platforms are case insensitive; place the value between double quotes to ensure case sensitivity.",
            "type": "string",
            "maxLength": 32
          },
          "wfname": {
            "description": "Name of the temporary file used to send a group of files selected in line with the generic name specified in FNAME",
            "type": "string",
            "maxLength": 512
          },
          "workingdir": {
            "description": "Working directory",
            "type": "string",
            "maxLength": 512
          },
          "xlate": {
            "description": "Identifier of the CFTXLATE object defining the translation table used for the transfers Case Insensitive",
            "type": "string",
            "maxLength": 32
          },
          "archivefname": {
            "description": "Name of the archive file",
            "type": "string",
            "maxLength": 512
          }
        }
      },
      "CftObjectsCfttcpList": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "links": {
            "$ref": "#/components/schemas/ObjectSelfLinks"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CftObjectsCfttcpGetInfo"
            }
          }
        },
        "example": {
          "links": {
            "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftpart/PARIS/tcp"
          },
          "data": [
            {
              "type": "cfttcp",
              "id": "1",
              "attributes": {
                "cnxin": 2,
                "cnxout": 2,
                "comment": "Default destination for Paris office",
                "host": [
                  "paris.office"
                ],
                "origin": "DESIGNER"
              },
              "links": {
                "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftpart/PARIS/tcp/1"
              }
            },
            {
              "type": "cfttcp",
              "id": "62",
              "attributes": {
                "cnxin": 2,
                "cnxout": 2,
                "comment": "Alternate route for the Paris office",
                "host": [
                  "paris.alter.office"
                ],
                "origin": "DESIGNER"
              },
              "links": {
                "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftpart/PARIS/tcp/62"
              }
            }
          ]
        }
      },
      "CftObjectsCfttcpGet": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "links": {
            "$ref": "#/components/schemas/ObjectSelfLinks"
          },
          "data": {
            "$ref": "#/components/schemas/CftObjectsCfttcpGetInfo"
          }
        },
        "example": {
          "links": {
            "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftpart/PARIS/tcp/1"
          },
          "data": {
            "type": "cfttcp",
            "id": "1",
            "attributes": {
              "cnxin": 2,
              "cnxout": 2,
              "comment": "Default destination for the Paris office",
              "host": [
                "paris.office"
              ],
              "origin": "DESIGNER"
            }
          }
        }
      },
      "CftObjectsCfttcpGetInfo": {
        "type": "object",
        "required": [
          "type",
          "id",
          "attributes"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "cfttcp"
            ]
          },
          "id": {
            "type": "string"
          },
          "attributes": {
            "$ref": "#/components/schemas/CftObjectsCfttcpAttributes"
          },
          "links": {
            "$ref": "#/components/schemas/ObjectSelfLinks"
          }
        }
      },
      "CftObjectsCfttcpAttributes": {
        "type": "object",
        "required": [
          "host"
        ],
        "properties": {
          "cnxin": {
            "description": "Maximum number of sessions for input connections.\nThe maximum value is 990 for z/OS platform and 1000 for other platforms.",
            "type": "integer",
            "minimum": 0,
            "default": 2
          },
          "cnxinout": {
            "description": "Maximum number of communication sessions.\nThe maximum value is 990 for z/OS platform and 1000 for other platforms.",
            "type": "integer",
            "minimum": 0,
            "default": 2
          },
          "cnxout": {
            "description": "Maximum number of sessions for output connections",
            "type": "integer",
            "minimum": 0,
            "maximum": 1000,
            "default": 2
          },
          "comment": {
            "description": "Free comment Case Insensitive",
            "type": "string",
            "maxLength": 80
          },
          "imaxtime": {
            "description": "Last time for accepting incoming calls",
            "type": "integer",
            "minimum": 0,
            "maximum": 23595999,
            "default": 23595999
          },
          "imintime": {
            "description": "Initial time for accepting incoming calls",
            "type": "integer",
            "minimum": 0,
            "maximum": 23595999,
            "default": 0
          },
          "omaxtime": {
            "description": "Last time for giving outgoing calls",
            "type": "integer",
            "minimum": 0,
            "maximum": 23595999,
            "default": 23595999
          },
          "omintime": {
            "description": "Initial time for giving outgoing calls",
            "type": "integer",
            "minimum": 0,
            "maximum": 23595999,
            "default": 0
          },
          "origin": {
            "$ref": "#/components/schemas/CftEnumORIGIN"
          },
          "retrym": {
            "description": "Maximum number of retry",
            "type": "integer",
            "minimum": 0,
            "maximum": 32767,
            "default": 12
          },
          "retryn": {
            "description": "Maximum number of retry by period",
            "type": "integer",
            "minimum": 0,
            "maximum": 32767,
            "default": 4
          },
          "retryw": {
            "description": "Time between two retries",
            "type": "integer",
            "minimum": 0,
            "maximum": 32767,
            "default": 1
          },
          "host": {
            "description": "Host name The z/OS, IBM i, and OpenVMS platforms are case insensitive; place the value between double quotes to ensure case sensitivity.",
            "type": "array",
            "maxItems": 4,
            "items": {
              "type": "string",
              "maxLength": 512
            }
          },
          "verify": {
            "description": "Verifies the IP address (HOST) of an incoming connection request (checks the first 'n' digits of the caller number)",
            "type": "integer",
            "minimum": 0,
            "maximum": 64,
            "default": 0
          }
        }
      },
      "CftObjectsCftpartList": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "links": {
            "$ref": "#/components/schemas/ObjectSelfLinks"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CftObjectsCftpartGetInfo"
            }
          }
        },
        "example": {
          "links": {
            "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftpart"
          },
          "data": [
            {
              "type": "cftpart",
              "id": "paris",
              "attributes": {
                "prot": [
                  "pesit"
                ],
                "comment": "definition sample",
                "idf": "txt",
                "origin": "DESIGNER"
              },
              "links": {
                "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftpart/paris"
              }
            },
            {
              "type": "cftpart",
              "id": "newyork",
              "attributes": {
                "prot": [
                  "pesit"
                ],
                "comment": "definition sample",
                "idf": "txt",
                "origin": "DESIGNER"
              },
              "links": {
                "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftpart/newyork"
              }
            }
          ]
        }
      },
      "CftObjectsCftpartGet": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "links": {
            "$ref": "#/components/schemas/ObjectSelfLinks"
          },
          "data": {
            "$ref": "#/components/schemas/CftObjectsCftpartGetInfo"
          }
        },
        "example": {
          "links": {
            "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftpart/paris"
          },
          "data": {
            "type": "cftpart",
            "id": "paris",
            "attributes": {
              "prot": [
                "pesit"
              ],
              "comment": "Definition sample",
              "idf": "txt",
              "origin": "DESIGNER"
            }
          }
        }
      },
      "CftObjectsCftpartGetInfo": {
        "type": "object",
        "required": [
          "type",
          "id",
          "attributes"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "cftpart"
            ]
          },
          "id": {
            "type": "string"
          },
          "attributes": {
            "$ref": "#/components/schemas/CftObjectsCftpartAttributes"
          },
          "links": {
            "$ref": "#/components/schemas/ObjectSelfLinks"
          }
        }
      },
      "CftObjectsCftpartAttributes": {
        "type": "object",
        "required": [
          "prot"
        ],
        "properties": {
          "comment": {
            "description": "Free comment Case Insensitive",
            "type": "string",
            "maxLength": 80
          },
          "commut": {
            "description": "Type of switching supported for this partner Case Insensitive",
            "default": "YES",
            "type": "string",
            "enum": [
              "YES",
              "NO",
              "SERVER",
              "PART"
            ]
          },
          "cos": {
            "description": "Class Of Service for bandwidth control",
            "type": "string",
            "maxLength": 32
          },
          "ctrlpart": {
            "description": "Relevant only in server mode Case Insensitive",
            "default": "IGNORE",
            "type": "string",
            "enum": [
              "IGNORE",
              "ALL",
              "SPART",
              "RPART"
            ]
          },
          "fcharset": {
            "description": "Local file encoding",
            "type": "string",
            "maxLength": 32
          },
          "fprefix": {
            "description": "File name prefix The z/OS, IBM i, and OpenVMS platforms are case insensitive; place the value between double quotes to ensure case sensitivity.",
            "type": "string",
            "maxLength": 512
          },
          "group": {
            "description": "Group the partner belongs to Case Insensitive",
            "type": "string",
            "maxLength": 32
          },
          "idf": {
            "description": "Default identifier of the file for the partner Case Insensitive",
            "type": "string",
            "maxLength": 32
          },
          "imaxtime": {
            "description": "Maximum time after which the partner cannot call",
            "type": "integer",
            "minimum": 0,
            "maximum": 23595999,
            "default": 23595999
          },
          "imintime": {
            "description": "Minimum time before which the partner cannot call",
            "type": "integer",
            "minimum": 0,
            "maximum": 23595999,
            "default": 0
          },
          "ipart": {
            "description": "Local identifier of an intermediate partner Case Insensitive",
            "type": "string",
            "maxLength": 64
          },
          "nack": {
            "description": "Enables the negative acknowledgment feature Case Insensitive",
            "default": " ",
            "type": "string",
            "enum": [
              " ",
              "YES",
              "NO"
            ]
          },
          "ncharset": {
            "description": "Destination file encoding",
            "type": "string",
            "maxLength": 32
          },
          "nrpart": {
            "description": "Partner network identifier identifying the partner for incoming calls Case Insensitive, except if for a SFTP parameter the value is delimited by double quotes",
            "type": "string",
            "maxLength": 64
          },
          "nrpassw": {
            "description": "Partner sign-on password, authorizing a local site access right check Case Insensitive, except if value in delimited by double quotes",
            "type": "string",
            "maxLength": 32
          },
          "nspart": {
            "description": "Network identifier used by the local Transfer CFT to identify itself to its partner Case Insensitive, except if value in delimited by double quotes",
            "type": "string",
            "maxLength": 64
          },
          "nspassw": {
            "description": "Partner sign-on password, authorizing a local site access right check Case Insensitive, except if value in delimited by double quotes",
            "type": "string",
            "maxLength": 32
          },
          "omaxtime": {
            "description": "Maximum time after which the partner can no longer be called",
            "type": "integer",
            "minimum": 0,
            "maximum": 23595999,
            "default": 23595999
          },
          "omintime": {
            "description": "Minimum time before which the partner may not be called",
            "type": "integer",
            "minimum": 0,
            "maximum": 23595999,
            "default": 0
          },
          "origin": {
            "$ref": "#/components/schemas/CftEnumORIGIN"
          },
          "prot": {
            "description": "List of communication protocols (CFTPROT identifiers) authorized to communicate with this partner Case Insensitive",
            "type": "array",
            "maxItems": 4,
            "items": {
              "type": "string",
              "maxLength": 32
            }
          },
          "rauth": {
            "description": "CFTAUTH command ID (identifier) designating a list of IDFs authorized for the receive transfers with this partner Case Insensitive",
            "default": "*",
            "type": "string",
            "maxLength": 32
          },
          "sap": {
            "description": "Values of the remote SAPs, service access points, associated with each of the protocols defined by the PROT parameter Case Insensitive",
            "type": "array",
            "maxItems": 4,
            "items": {
              "type": "string",
              "maxLength": 32
            }
          },
          "sauth": {
            "description": "CFTAUTH command ID (identifier)designating a list of IDFs authorized for send transfers to this partner Case Insensitive",
            "default": "*",
            "type": "string",
            "maxLength": 32
          },
          "srdmz": {
            "description": "Secure relay multi RA support Case Insensitive",
            "type": "string",
            "maxLength": 32
          },
          "ssl": {
            "description": "SSL command identifier used for security profiles Case Insensitive",
            "type": "string",
            "maxLength": 32
          },
          "ssh": {
            "description": "SSH command Identifier used for security profiles Case Insensitive Valid only on platform supporting SFTP protocol (Unix, Windows)",
            "type": "string",
            "maxLength": 32
          },
          "state": {
            "description": "Partner state Case Insensitive",
            "default": "ACTIVEBOTH",
            "type": "string",
            "enum": [
              "ACTIVEBOTH",
              "ACTIVEREQ",
              "ACTIVESERV",
              "NOACTIVE"
            ]
          },
          "trk": {
            "description": "Detail provided to Sentinel about transfers Case Insensitive",
            "default": "UNDEFINED",
            "type": "string",
            "enum": [
              "UNDEFINED",
              "ALL",
              "SUMMARY",
              "NO",
              "ERROR"
            ]
          },
          "xlate": {
            "description": "Translation table identifier used for transfers with this partner Case Insensitive",
            "type": "string",
            "maxLength": 32
          },
          "syst": {
            "description": "Type of operating system supported by the partner Case Insensitive",
            "default": " ",
            "type": "string",
            "enum": [
              "MSDOS",
              "OS2",
              "OS400",
              "GCOS7",
              "GCOS8",
              "CTOS",
              "VSE",
              "VM",
              "MVS",
              "UNIX",
              "VMS",
              "GUARD",
              "BS2000",
              "WINNT",
              "WIN3X",
              "NETW",
              "WIN95",
              "OS2200",
              " "
            ]
          },
          "tcp": {
            "description": "List of TCP definitions associated with the partner.",
            "readOnly": true,
            "type": "array",
            "maxItems": 64,
            "items": {
              "$ref": "#/components/schemas/CftObjectsCfttcpGet"
            }
          }
        }
      }
    },
    "responses": {
      "ObjectCreated": {
        "description": "Object created successfully.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/RespObjectLinks"
            }
          }
        }
      },
      "ObjectDeleted": {
        "description": "Successfully deleted the object."
      },
      "ObjectUpdated": {
        "description": "Object Successfully modified.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/RespObjectLinks"
            }
          }
        }
      },
      "ObjectNotFound": {
        "description": "Object not found.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "BadRequest": {
        "description": "Bad request.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "Unauthorized": {
        "description": "Unauthorized - Incorrect credentials.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "Forbidden": {
        "description": "Forbidden - The requester does not have sufficient rights.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "TransferNotFound": {
        "description": "Transfer not found.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "ServerError": {
        "description": "Internal Server Error.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "OtherError": {
        "description": "Unexpected error.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "CftCmdStateDetails": {
        "description": "Transfer CFT Status.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "hosts": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CftCmdHostDetails"
                  }
                },
                "nodes": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CftCmdNodeDetails"
                  }
                }
              }
            }
          }
        }
      },
      "CftCmdNodesList": {
        "description": "Transfer CFT Node list.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "nodes": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CftCmdNodeDetails"
                  }
                }
              }
            }
          }
        }
      },
      "CftCmdHostsList": {
        "description": "Transfer CFT hostname list.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "hosts": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CftCmdHostDetails"
                  }
                }
              }
            }
          }
        }
      },
      "CftCmdNodeDetails": {
        "description": "Transfer CFT Node.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CftCmdNodeDetails"
            }
          }
        }
      },
      "CftCmdHostDetails": {
        "description": "Transfer CFT Host.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CftCmdHostDetails"
            }
          }
        }
      }
    },
    "parameters": {
      "idtu": {
        "name": "idtu",
        "in": "path",
        "description": "Unique transfer identifier.",
        "style": "simple",
        "explode": false,
        "schema": {
          "type": "string",
          "pattern": "[A-Z][A-Z0-9]{7}",
          "minLength": 8,
          "maxLength": 8
        },
        "required": true
      },
      "objectid": {
        "name": "id",
        "in": "path",
        "description": "object id",
        "style": "simple",
        "explode": false,
        "schema": {
          "type": "string",
          "minLength": 1,
          "maxLength": 32
        },
        "required": true
      },
      "objectpartid": {
        "name": "id",
        "in": "path",
        "description": "object id",
        "style": "simple",
        "explode": false,
        "schema": {
          "type": "string",
          "minLength": 1,
          "maxLength": 64
        },
        "required": true
      },
      "partnerid": {
        "name": "partnerid",
        "in": "path",
        "description": "id of a cftpart object",
        "style": "simple",
        "explode": false,
        "schema": {
          "type": "string",
          "minLength": 1,
          "maxLength": 64
        },
        "required": true
      },
      "classid": {
        "name": "id",
        "in": "path",
        "description": "Class of the TCP local resource(s) used to establish the connection with the partner.",
        "style": "simple",
        "explode": false,
        "schema": {
          "type": "integer",
          "minimum": 0,
          "maximum": 64,
          "format": "int32"
        },
        "required": true
      },
      "idfsendid": {
        "name": "idfsendid",
        "in": "path",
        "description": "id of a cftsend object",
        "style": "simple",
        "explode": false,
        "schema": {
          "type": "string",
          "minLength": 1,
          "maxLength": 32
        },
        "required": true
      },
      "idfrecvid": {
        "name": "idfrecvid",
        "in": "path",
        "description": "id of a cftrecv object",
        "style": "simple",
        "explode": false,
        "schema": {
          "type": "string",
          "minLength": 1,
          "maxLength": 32
        },
        "required": true
      },
      "idfpartid": {
        "name": "id",
        "in": "path",
        "description": "id of a cftpart definition for which the alias is created",
        "style": "simple",
        "explode": false,
        "schema": {
          "type": "string",
          "minLength": 1,
          "maxLength": 64
        },
        "required": true
      },
      "offsetParam": {
        "name": "offset",
        "in": "query",
        "description": "Number of objects to skip.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "type": "integer",
          "format": "int32",
          "default": 0
        }
      },
      "limitParam": {
        "name": "limit",
        "in": "query",
        "description": "Maximum number of objects to return.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "type": "integer",
          "format": "int32",
          "default": 100
        }
      },
      "selectid": {
        "name": "id",
        "in": "query",
        "description": "Object ID.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "type": "string",
          "minLength": 1,
          "maxLength": 32
        }
      },
      "selectclass": {
        "name": "id",
        "in": "query",
        "description": "Class of the TCP local resource(s) used to establish the connection with the partner",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "type": "integer",
          "format": "int32",
          "minimum": 0,
          "maximum": 64
        }
      },
      "selectpartid": {
        "name": "id",
        "in": "query",
        "description": "Object ID.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "type": "string",
          "minLength": 1,
          "maxLength": 64
        }
      },
      "fields": {
        "name": "fields",
        "in": "query",
        "description": "List of fields to return.\n\nDefault: PART,DIRECT,TYPE,COMPATSTATE,ACK,STATE,PHASE,PHASESTEP,IDF,IDT,IDTU,PIDTU,NREC,FREC,MSG,DIAGI,DIAGP,REQUSER,REQGROUP,IDA",
        "required": false,
        "style": "form",
        "explode": false,
        "schema": {
          "type": "array",
          "minItems": 1,
          "maxItems": 15,
          "items": {
            "type": "string"
          }
        }
      },
      "SelectTypeXlate": {
        "name": "type",
        "in": "query",
        "style": "form",
        "explode": true,
        "schema": {
          "type": "string",
          "enum": [
            "cftxlatesendasciiascii",
            "cftxlatesendasciiebcdic",
            "cftxlatesendebcdicebcdic",
            "cftxlatesendebcdicascii",
            "cftxlaterecvasciiascii",
            "cftxlaterecvasciiebcdic",
            "cftxlaterecvebcdicebcdic",
            "cftxlaterecvebcdicascii"
          ]
        }
      },
      "nodeid": {
        "name": "id",
        "in": "path",
        "description": "Node Id.",
        "style": "simple",
        "explode": false,
        "schema": {
          "type": "integer",
          "format": "int32",
          "minimum": 0,
          "maximum": 8
        },
        "required": true
      },
      "hostid": {
        "name": "id",
        "in": "path",
        "description": "Alias for Hostname.",
        "style": "simple",
        "explode": false,
        "schema": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255
        },
        "required": true
      },
      "certid": {
        "name": "id",
        "in": "path",
        "description": "Certificate id.",
        "style": "simple",
        "explode": false,
        "schema": {
          "type": "string",
          "minLength": 5,
          "maxLength": 74
        },
        "required": true
      },
      "selcertid": {
        "name": "id",
        "in": "query",
        "description": "Certificate ID.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "type": "string",
          "minLength": 1,
          "maxLength": 74
        }
      },
      "selectanyid": {
        "name": "id",
        "in": "query",
        "description": "Object ID.",
        "required": false,
        "explode": true,
        "schema": {
          "type": "string",
          "minLength": 1,
          "maxLength": 74
        }
      },
      "SelectTypeCertificate": {
        "name": "type",
        "in": "query",
        "style": "form",
        "explode": true,
        "schema": {
          "type": "string",
          "enum": [
            "ROOT",
            "INTER",
            "USER"
          ]
        }
      },
      "SelectRootcidCertificate": {
        "name": "rootcid",
        "in": "query",
        "style": "form",
        "explode": true,
        "schema": {
          "type": "string",
          "minLength": 1,
          "maxLength": 32
        }
      }
    }
  }
}